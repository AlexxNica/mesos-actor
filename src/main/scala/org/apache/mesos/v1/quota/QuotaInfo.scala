// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.quota

import org.apache.mesos.v1.quota

/** TODO(joerg84): Add limits, i.e. upper bounds of resources that a
  * role is allowed to use.
  *
  * @param role
  *   Quota is granted per role and not per framework, similar to
  *   dynamic reservations.
  * @param principal
  *   Principal which set the quota. Currently only operators can set quotas.
  * @param guarantee
  *   The guarantee that these resources are allocatable for the above role.
  *   NOTE: `guarantee.role` should not specify any role except '*',
  *   because quota does not reserve specific resources.
  */
@SerialVersionUID(0L)
final case class QuotaInfo(
    role: scala.Option[String] = None,
    principal: scala.Option[String] = None,
    guarantee: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[QuotaInfo] with com.trueaccord.lenses.Updatable[QuotaInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (role.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, role.get) }
      if (principal.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, principal.get) }
      guarantee.foreach(guarantee => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(guarantee.serializedSize) + guarantee.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      role.foreach { __v =>
        _output__.writeString(1, __v)
      };
      principal.foreach { __v =>
        _output__.writeString(2, __v)
      };
      guarantee.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): QuotaInfo = {
      var __role = this.role
      var __principal = this.principal
      val __guarantee = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.guarantee)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __role = Some(_input__.readString())
          case 18 =>
            __principal = Some(_input__.readString())
          case 26 =>
            __guarantee += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      quota.QuotaInfo(
          role = __role,
          principal = __principal,
          guarantee = __guarantee.result()
      )
    }
    def getRole: String = role.getOrElse("")
    def clearRole: QuotaInfo = copy(role = None)
    def withRole(__v: String): QuotaInfo = copy(role = Some(__v))
    def getPrincipal: String = principal.getOrElse("")
    def clearPrincipal: QuotaInfo = copy(principal = None)
    def withPrincipal(__v: String): QuotaInfo = copy(principal = Some(__v))
    def clearGuarantee = copy(guarantee = _root_.scala.collection.Seq.empty)
    def addGuarantee(__vs: org.apache.mesos.v1.mesos.Resource*): QuotaInfo = addAllGuarantee(__vs)
    def addAllGuarantee(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): QuotaInfo = copy(guarantee = guarantee ++ __vs)
    def withGuarantee(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): QuotaInfo = copy(guarantee = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => role.orNull
        case 2 => principal.orNull
        case 3 => guarantee
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => role.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => principal.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(guarantee.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = quota.QuotaInfo
}

object QuotaInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[QuotaInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[QuotaInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): QuotaInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    quota.QuotaInfo(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[QuotaInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      quota.QuotaInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = QuotaProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = QuotaProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => __out = org.apache.mesos.v1.mesos.Resource
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = quota.QuotaInfo(
  )
  implicit class QuotaInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, QuotaInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, QuotaInfo](_l) {
    def role: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getRole)((c_, f_) => c_.copy(role = Some(f_)))
    def optionalRole: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.role)((c_, f_) => c_.copy(role = f_))
    def principal: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPrincipal)((c_, f_) => c_.copy(principal = Some(f_)))
    def optionalPrincipal: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.principal)((c_, f_) => c_.copy(principal = f_))
    def guarantee: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.guarantee)((c_, f_) => c_.copy(guarantee = f_))
  }
  final val ROLE_FIELD_NUMBER = 1
  final val PRINCIPAL_FIELD_NUMBER = 2
  final val GUARANTEE_FIELD_NUMBER = 3
}
