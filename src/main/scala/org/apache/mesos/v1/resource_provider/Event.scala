// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.resource_provider

import org.apache.mesos.v1.resource_provider

@SerialVersionUID(0L)
final case class Event(
                        `type`: scala.Option[Event.Type] = None,
                        subscribed: scala.Option[Event.Subscribed] = None,
                        operation: scala.Option[Event.Operation] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Event] with com.trueaccord.lenses.Updatable[Event] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
      if (subscribed.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(subscribed.get.serializedSize) + subscribed.get.serializedSize }
      if (operation.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(operation.get.serializedSize) + operation.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      `type`.foreach { __v =>
        _output__.writeEnum(1, __v.value)
      };
      subscribed.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      operation.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Event = {
      var __type = this.`type`
      var __subscribed = this.subscribed
      var __operation = this.operation
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = Some(resource_provider.Event.Type.fromValue(_input__.readEnum()))
          case 18 =>
            __subscribed = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __subscribed.getOrElse(resource_provider.Event.Subscribed.defaultInstance)))
          case 26 =>
            __operation = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __operation.getOrElse(resource_provider.Event.Operation.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      resource_provider.Event(
          `type` = __type,
          subscribed = __subscribed,
          operation = __operation
      )
    }
    def getType: Event.Type = `type`.getOrElse(resource_provider.Event.Type.UNKNOWN)
    def clearType: Event = copy(`type` = None)
    def withType(__v: Event.Type): Event = copy(`type` = Some(__v))
    def getSubscribed: Event.Subscribed = subscribed.getOrElse(resource_provider.Event.Subscribed.defaultInstance)
    def clearSubscribed: Event = copy(subscribed = None)
    def withSubscribed(__v: Event.Subscribed): Event = copy(subscribed = Some(__v))
    def getOperation: Event.Operation = operation.getOrElse(resource_provider.Event.Operation.defaultInstance)
    def clearOperation: Event = copy(operation = None)
    def withOperation(__v: Event.Operation): Event = copy(operation = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.map(_.javaValueDescriptor).orNull
        case 2 => subscribed.orNull
        case 3 => operation.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => subscribed.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => operation.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = resource_provider.Event
}

object Event extends com.trueaccord.scalapb.GeneratedMessageCompanion[Event] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Event] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Event = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    resource_provider.Event(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => resource_provider.Event.Type.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Event.Subscribed]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Event.Operation]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[Event] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      resource_provider.Event(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => resource_provider.Event.Type.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Event.Subscribed]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Event.Operation]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ResourceProviderProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ResourceProviderProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = resource_provider.Event.Subscribed
      case 3 => __out = resource_provider.Event.Operation
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => resource_provider.Event.Type
    }
  }
  lazy val defaultInstance = resource_provider.Event(
  )
  sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Type
    def isUnknown: Boolean = false
    def isSubscribed: Boolean = false
    def isOperation: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = resource_provider.Event.Type
  }
  
  object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object UNKNOWN extends Type {
      val value = 0
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SUBSCRIBED extends Type {
      val value = 1
      val index = 1
      val name = "SUBSCRIBED"
      override def isSubscribed: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object OPERATION extends Type {
      val value = 2
      val index = 2
      val name = "OPERATION"
      override def isOperation: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(UNKNOWN, SUBSCRIBED, OPERATION)
    def fromValue(value: Int): Type = value match {
      case 0 => UNKNOWN
      case 1 => SUBSCRIBED
      case 2 => OPERATION
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = resource_provider.Event.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = resource_provider.Event.scalaDescriptor.enums(0)
  }
  /** First event received by the resource provider when it subscribes
    * to the master.
    */
  @SerialVersionUID(0L)
  final case class Subscribed(
      providerId: org.apache.mesos.v1.mesos.ResourceProviderID
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Subscribed] with com.trueaccord.lenses.Updatable[Subscribed] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(providerId.serializedSize) + providerId.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(providerId.serializedSize)
        providerId.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Event.Subscribed = {
        var __providerId = this.providerId
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __providerId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __providerId)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        resource_provider.Event.Subscribed(
            providerId = __providerId
        )
      }
      def withProviderId(__v: org.apache.mesos.v1.mesos.ResourceProviderID): Subscribed = copy(providerId = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => providerId
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => providerId.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = resource_provider.Event.Subscribed
  }
  
  object Subscribed extends com.trueaccord.scalapb.GeneratedMessageCompanion[Event.Subscribed] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Event.Subscribed] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Event.Subscribed = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      resource_provider.Event.Subscribed(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.ResourceProviderID]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Event.Subscribed] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        resource_provider.Event.Subscribed(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ResourceProviderID]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = resource_provider.Event.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = resource_provider.Event.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.ResourceProviderID
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = resource_provider.Event.Subscribed(
      providerId = org.apache.mesos.v1.mesos.ResourceProviderID.defaultInstance
    )
    implicit class SubscribedLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.Subscribed]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Event.Subscribed](_l) {
      def providerId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ResourceProviderID] = field(_.providerId)((c_, f_) => c_.copy(providerId = f_))
    }
    final val PROVIDER_ID_FIELD_NUMBER = 1
  }
  
  /** Received when the master wants to send an operation to the
    * resource provider.
    */
  @SerialVersionUID(0L)
  final case class Operation(
      operation: scala.Option[org.apache.mesos.v1.mesos.Offer.Operation] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Operation] with com.trueaccord.lenses.Updatable[Operation] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (operation.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(operation.get.serializedSize) + operation.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        operation.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Event.Operation = {
        var __operation = this.operation
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __operation = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __operation.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        resource_provider.Event.Operation(
            operation = __operation
        )
      }
      def getOperation: org.apache.mesos.v1.mesos.Offer.Operation = operation.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.defaultInstance)
      def clearOperation: Operation = copy(operation = None)
      def withOperation(__v: org.apache.mesos.v1.mesos.Offer.Operation): Operation = copy(operation = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => operation.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => operation.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = resource_provider.Event.Operation
  }
  
  object Operation extends com.trueaccord.scalapb.GeneratedMessageCompanion[Event.Operation] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Event.Operation] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Event.Operation = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      resource_provider.Event.Operation(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Event.Operation] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        resource_provider.Event.Operation(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = resource_provider.Event.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = resource_provider.Event.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.Offer.Operation
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = resource_provider.Event.Operation(
    )
    implicit class OperationLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.Operation]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Event.Operation](_l) {
      def operation: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation] = field(_.getOperation)((c_, f_) => c_.copy(operation = Some(f_)))
      def optionalOperation: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Offer.Operation]] = field(_.operation)((c_, f_) => c_.copy(operation = f_))
    }
    final val OPERATION_FIELD_NUMBER = 1
  }
  
  implicit class EventLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Event]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Event](_l) {
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
    def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Event.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def subscribed: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.Subscribed] = field(_.getSubscribed)((c_, f_) => c_.copy(subscribed = Some(f_)))
    def optionalSubscribed: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Event.Subscribed]] = field(_.subscribed)((c_, f_) => c_.copy(subscribed = f_))
    def operation: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.Operation] = field(_.getOperation)((c_, f_) => c_.copy(operation = Some(f_)))
    def optionalOperation: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Event.Operation]] = field(_.operation)((c_, f_) => c_.copy(operation = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val SUBSCRIBED_FIELD_NUMBER = 2
  final val OPERATION_FIELD_NUMBER = 3
}
