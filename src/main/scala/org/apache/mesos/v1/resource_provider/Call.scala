// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.resource_provider

import org.apache.mesos.v1.resource_provider

@SerialVersionUID(0L)
final case class Call(
                       `type`: scala.Option[Call.Type] = None,
                       subscribe: scala.Option[Call.Subscribe] = None,
                       update: scala.Option[Call.Update] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Call] with com.trueaccord.lenses.Updatable[Call] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
      if (subscribe.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(subscribe.get.serializedSize) + subscribe.get.serializedSize }
      if (update.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(update.get.serializedSize) + update.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      `type`.foreach { __v =>
        _output__.writeEnum(1, __v.value)
      };
      subscribe.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      update.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call = {
      var __type = this.`type`
      var __subscribe = this.subscribe
      var __update = this.update
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = Some(resource_provider.Call.Type.fromValue(_input__.readEnum()))
          case 18 =>
            __subscribe = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __subscribe.getOrElse(resource_provider.Call.Subscribe.defaultInstance)))
          case 26 =>
            __update = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __update.getOrElse(resource_provider.Call.Update.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      resource_provider.Call(
          `type` = __type,
          subscribe = __subscribe,
          update = __update
      )
    }
    def getType: Call.Type = `type`.getOrElse(resource_provider.Call.Type.UNKNOWN)
    def clearType: Call = copy(`type` = None)
    def withType(__v: Call.Type): Call = copy(`type` = Some(__v))
    def getSubscribe: Call.Subscribe = subscribe.getOrElse(resource_provider.Call.Subscribe.defaultInstance)
    def clearSubscribe: Call = copy(subscribe = None)
    def withSubscribe(__v: Call.Subscribe): Call = copy(subscribe = Some(__v))
    def getUpdate: Call.Update = update.getOrElse(resource_provider.Call.Update.defaultInstance)
    def clearUpdate: Call = copy(update = None)
    def withUpdate(__v: Call.Update): Call = copy(update = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.map(_.javaValueDescriptor).orNull
        case 2 => subscribe.orNull
        case 3 => update.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => subscribe.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => update.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = resource_provider.Call
}

object Call extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    resource_provider.Call(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => resource_provider.Call.Type.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Call.Subscribe]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Call.Update]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[Call] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      resource_provider.Call(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => resource_provider.Call.Type.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Call.Subscribe]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Call.Update]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ResourceProviderProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ResourceProviderProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = resource_provider.Call.Subscribe
      case 3 => __out = resource_provider.Call.Update
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => resource_provider.Call.Type
    }
  }
  lazy val defaultInstance = resource_provider.Call(
  )
  sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Type
    def isUnknown: Boolean = false
    def isSubscribe: Boolean = false
    def isUpdate: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = resource_provider.Call.Type
  }
  
  object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object UNKNOWN extends Type {
      val value = 0
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SUBSCRIBE extends Type {
      val value = 1
      val index = 1
      val name = "SUBSCRIBE"
      override def isSubscribe: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object UPDATE extends Type {
      val value = 2
      val index = 2
      val name = "UPDATE"
      override def isUpdate: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(UNKNOWN, SUBSCRIBE, UPDATE)
    def fromValue(value: Int): Type = value match {
      case 0 => UNKNOWN
      case 1 => SUBSCRIBE
      case 2 => UPDATE
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = resource_provider.Call.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = resource_provider.Call.scalaDescriptor.enums(0)
  }
  /** Request to subscribe with the master.
    */
  @SerialVersionUID(0L)
  final case class Subscribe(
      resourceProviderInfo: org.apache.mesos.v1.mesos.ResourceProviderInfo
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Subscribe] with com.trueaccord.lenses.Updatable[Subscribe] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(resourceProviderInfo.serializedSize) + resourceProviderInfo.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(resourceProviderInfo.serializedSize)
        resourceProviderInfo.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.Subscribe = {
        var __resourceProviderInfo = this.resourceProviderInfo
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __resourceProviderInfo = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __resourceProviderInfo)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        resource_provider.Call.Subscribe(
            resourceProviderInfo = __resourceProviderInfo
        )
      }
      def withResourceProviderInfo(__v: org.apache.mesos.v1.mesos.ResourceProviderInfo): Subscribe = copy(resourceProviderInfo = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => resourceProviderInfo
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => resourceProviderInfo.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = resource_provider.Call.Subscribe
  }
  
  object Subscribe extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.Subscribe] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.Subscribe] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.Subscribe = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      resource_provider.Call.Subscribe(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.ResourceProviderInfo]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.Subscribe] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        resource_provider.Call.Subscribe(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ResourceProviderInfo]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = resource_provider.Call.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = resource_provider.Call.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.ResourceProviderInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = resource_provider.Call.Subscribe(
      resourceProviderInfo = org.apache.mesos.v1.mesos.ResourceProviderInfo.defaultInstance
    )
    implicit class SubscribeLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.Subscribe]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.Subscribe](_l) {
      def resourceProviderInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ResourceProviderInfo] = field(_.resourceProviderInfo)((c_, f_) => c_.copy(resourceProviderInfo = f_))
    }
    final val RESOURCE_PROVIDER_INFO_FIELD_NUMBER = 1
  }
  
  /** Notify the master about the status of an operation.
    */
  @SerialVersionUID(0L)
  final case class Update(
                           state: Call.Update.State,
                           operation: org.apache.mesos.v1.mesos.Offer.Operation,
                           convertedResources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Update] with com.trueaccord.lenses.Updatable[Update] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, state.value)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(operation.serializedSize) + operation.serializedSize
        convertedResources.foreach(convertedResources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(convertedResources.serializedSize) + convertedResources.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeEnum(1, state.value)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(operation.serializedSize)
        operation.writeTo(_output__)
        convertedResources.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.Update = {
        var __state = this.state
        var __operation = this.operation
        val __convertedResources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.convertedResources)
        var __requiredFields0: Long = 0x3L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __state = resource_provider.Call.Update.State.fromValue(_input__.readEnum())
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __operation = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __operation)
              __requiredFields0 &= 0xfffffffffffffffdL
            case 26 =>
              __convertedResources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        resource_provider.Call.Update(
            state = __state,
            operation = __operation,
            convertedResources = __convertedResources.result()
        )
      }
      def withState(__v: Call.Update.State): Update = copy(state = __v)
      def withOperation(__v: org.apache.mesos.v1.mesos.Offer.Operation): Update = copy(operation = __v)
      def clearConvertedResources = copy(convertedResources = _root_.scala.collection.Seq.empty)
      def addConvertedResources(__vs: org.apache.mesos.v1.mesos.Resource*): Update = addAllConvertedResources(__vs)
      def addAllConvertedResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Update = copy(convertedResources = convertedResources ++ __vs)
      def withConvertedResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Update = copy(convertedResources = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => state.javaValueDescriptor
          case 2 => operation
          case 3 => convertedResources
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PEnum(state.scalaValueDescriptor)
          case 2 => operation.toPMessage
          case 3 => _root_.scalapb.descriptors.PRepeated(convertedResources.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = resource_provider.Call.Update
  }
  
  object Update extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.Update] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.Update] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.Update = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      resource_provider.Call.Update(
        resource_provider.Call.Update.State.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
        __fieldsMap(__fields.get(1)).asInstanceOf[org.apache.mesos.v1.mesos.Offer.Operation],
        __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.Update] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        resource_provider.Call.Update(
          resource_provider.Call.Update.State.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[org.apache.mesos.v1.mesos.Offer.Operation],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = resource_provider.Call.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = resource_provider.Call.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = org.apache.mesos.v1.mesos.Offer.Operation
        case 3 => __out = org.apache.mesos.v1.mesos.Resource
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resource_provider.Call.Update.State
      }
    }
    lazy val defaultInstance = resource_provider.Call.Update(
      state = resource_provider.Call.Update.State.OK,
      operation = org.apache.mesos.v1.mesos.Offer.Operation.defaultInstance
    )
    sealed trait State extends _root_.com.trueaccord.scalapb.GeneratedEnum {
      type EnumType = State
      def isOk: Boolean = false
      def isFailed: Boolean = false
      def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[State] = resource_provider.Call.Update.State
    }
    
    object State extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[State] {
      implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[State] = this
      @SerialVersionUID(0L)
      case object OK extends State {
        val value = 1
        val index = 0
        val name = "OK"
        override def isOk: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object FAILED extends State {
        val value = 2
        val index = 1
        val name = "FAILED"
        override def isFailed: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case class Unrecognized(value: Int) extends State with _root_.com.trueaccord.scalapb.UnrecognizedEnum
      
      lazy val values = scala.collection.Seq(OK, FAILED)
      def fromValue(value: Int): State = value match {
        case 1 => OK
        case 2 => FAILED
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = resource_provider.Call.Update.javaDescriptor.getEnumTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = resource_provider.Call.Update.scalaDescriptor.enums(0)
    }
    implicit class UpdateLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.Update]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.Update](_l) {
      def state: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.Update.State] = field(_.state)((c_, f_) => c_.copy(state = f_))
      def operation: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation] = field(_.operation)((c_, f_) => c_.copy(operation = f_))
      def convertedResources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.convertedResources)((c_, f_) => c_.copy(convertedResources = f_))
    }
    final val STATE_FIELD_NUMBER = 1
    final val OPERATION_FIELD_NUMBER = 2
    final val CONVERTED_RESOURCES_FIELD_NUMBER = 3
  }
  
  implicit class CallLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call](_l) {
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
    def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def subscribe: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.Subscribe] = field(_.getSubscribe)((c_, f_) => c_.copy(subscribe = Some(f_)))
    def optionalSubscribe: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.Subscribe]] = field(_.subscribe)((c_, f_) => c_.copy(subscribe = f_))
    def update: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.Update] = field(_.getUpdate)((c_, f_) => c_.copy(update = Some(f_)))
    def optionalUpdate: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.Update]] = field(_.update)((c_, f_) => c_.copy(update = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val SUBSCRIBE_FIELD_NUMBER = 2
  final val UPDATE_FIELD_NUMBER = 3
}
