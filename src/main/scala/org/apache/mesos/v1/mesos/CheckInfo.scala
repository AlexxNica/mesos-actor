// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes a general non-interpreting non-killing check for a task or
  * executor (or any arbitrary process/command). A type is picked by
  * specifying one of the optional fields. Specifying more than one type
  * is an error.
  *
  * NOTE: This API is unstable and the related feature is experimental.
  *
  * @param type
  *   The type of the check.
  * @param command
  *   Command check.
  * @param http
  *   HTTP check.
  * @param tcp
  *   TCP check.
  * @param delaySeconds
  *   Amount of time to wait to start checking the task after it
  *   transitions to `TASK_RUNNING` or `TASK_STARTING` if the latter
  *   is used by the executor.
  * @param intervalSeconds
  *   Interval between check attempts, i.e., amount of time to wait after
  *   the previous check finished or timed out to start the next check.
  * @param timeoutSeconds
  *   Amount of time to wait for the check to complete. Zero means infinite
  *   timeout.
  *  
  *   After this timeout, the check attempt is aborted and no result is
  *   reported. Note that this may be considered a state change and hence
  *   may trigger a check status change delivery to the corresponding
  *   scheduler. See `CheckStatusInfo` for more details.
  */
@SerialVersionUID(0L)
final case class CheckInfo(
    `type`: scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Type] = None,
    command: scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Command] = None,
    http: scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Http] = None,
    tcp: scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Tcp] = None,
    delaySeconds: scala.Option[Double] = None,
    intervalSeconds: scala.Option[Double] = None,
    timeoutSeconds: scala.Option[Double] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CheckInfo] with com.trueaccord.lenses.Updatable[CheckInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
      if (command.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.get.serializedSize) + command.get.serializedSize }
      if (http.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(http.get.serializedSize) + http.get.serializedSize }
      if (tcp.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(tcp.get.serializedSize) + tcp.get.serializedSize }
      if (delaySeconds.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(4, delaySeconds.get) }
      if (intervalSeconds.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(5, intervalSeconds.get) }
      if (timeoutSeconds.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(6, timeoutSeconds.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      `type`.foreach { __v =>
        _output__.writeEnum(1, __v.value)
      };
      command.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      http.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      delaySeconds.foreach { __v =>
        _output__.writeDouble(4, __v)
      };
      intervalSeconds.foreach { __v =>
        _output__.writeDouble(5, __v)
      };
      timeoutSeconds.foreach { __v =>
        _output__.writeDouble(6, __v)
      };
      tcp.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.CheckInfo = {
      var __type = this.`type`
      var __command = this.command
      var __http = this.http
      var __tcp = this.tcp
      var __delaySeconds = this.delaySeconds
      var __intervalSeconds = this.intervalSeconds
      var __timeoutSeconds = this.timeoutSeconds
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = Some(org.apache.mesos.v1.mesos.CheckInfo.Type.fromValue(_input__.readEnum()))
          case 18 =>
            __command = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __command.getOrElse(org.apache.mesos.v1.mesos.CheckInfo.Command.defaultInstance)))
          case 26 =>
            __http = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __http.getOrElse(org.apache.mesos.v1.mesos.CheckInfo.Http.defaultInstance)))
          case 58 =>
            __tcp = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __tcp.getOrElse(org.apache.mesos.v1.mesos.CheckInfo.Tcp.defaultInstance)))
          case 33 =>
            __delaySeconds = Some(_input__.readDouble())
          case 41 =>
            __intervalSeconds = Some(_input__.readDouble())
          case 49 =>
            __timeoutSeconds = Some(_input__.readDouble())
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.CheckInfo(
          `type` = __type,
          command = __command,
          http = __http,
          tcp = __tcp,
          delaySeconds = __delaySeconds,
          intervalSeconds = __intervalSeconds,
          timeoutSeconds = __timeoutSeconds
      )
    }
    def getType: org.apache.mesos.v1.mesos.CheckInfo.Type = `type`.getOrElse(org.apache.mesos.v1.mesos.CheckInfo.Type.UNKNOWN)
    def clearType: CheckInfo = copy(`type` = None)
    def withType(__v: org.apache.mesos.v1.mesos.CheckInfo.Type): CheckInfo = copy(`type` = Some(__v))
    def getCommand: org.apache.mesos.v1.mesos.CheckInfo.Command = command.getOrElse(org.apache.mesos.v1.mesos.CheckInfo.Command.defaultInstance)
    def clearCommand: CheckInfo = copy(command = None)
    def withCommand(__v: org.apache.mesos.v1.mesos.CheckInfo.Command): CheckInfo = copy(command = Some(__v))
    def getHttp: org.apache.mesos.v1.mesos.CheckInfo.Http = http.getOrElse(org.apache.mesos.v1.mesos.CheckInfo.Http.defaultInstance)
    def clearHttp: CheckInfo = copy(http = None)
    def withHttp(__v: org.apache.mesos.v1.mesos.CheckInfo.Http): CheckInfo = copy(http = Some(__v))
    def getTcp: org.apache.mesos.v1.mesos.CheckInfo.Tcp = tcp.getOrElse(org.apache.mesos.v1.mesos.CheckInfo.Tcp.defaultInstance)
    def clearTcp: CheckInfo = copy(tcp = None)
    def withTcp(__v: org.apache.mesos.v1.mesos.CheckInfo.Tcp): CheckInfo = copy(tcp = Some(__v))
    def getDelaySeconds: Double = delaySeconds.getOrElse(15.0)
    def clearDelaySeconds: CheckInfo = copy(delaySeconds = None)
    def withDelaySeconds(__v: Double): CheckInfo = copy(delaySeconds = Some(__v))
    def getIntervalSeconds: Double = intervalSeconds.getOrElse(10.0)
    def clearIntervalSeconds: CheckInfo = copy(intervalSeconds = None)
    def withIntervalSeconds(__v: Double): CheckInfo = copy(intervalSeconds = Some(__v))
    def getTimeoutSeconds: Double = timeoutSeconds.getOrElse(20.0)
    def clearTimeoutSeconds: CheckInfo = copy(timeoutSeconds = None)
    def withTimeoutSeconds(__v: Double): CheckInfo = copy(timeoutSeconds = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.map(_.javaValueDescriptor).orNull
        case 2 => command.orNull
        case 3 => http.orNull
        case 7 => tcp.orNull
        case 4 => delaySeconds.orNull
        case 5 => intervalSeconds.orNull
        case 6 => timeoutSeconds.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => command.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => http.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => tcp.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => delaySeconds.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => intervalSeconds.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => timeoutSeconds.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.CheckInfo
}

object CheckInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.CheckInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.CheckInfo(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.CheckInfo.Type.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Command]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Http]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Tcp]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Double]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.CheckInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.CheckInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.CheckInfo.Type.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Command]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Http]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Tcp]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Double]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(15)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(15)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = org.apache.mesos.v1.mesos.CheckInfo.Command
      case 3 => __out = org.apache.mesos.v1.mesos.CheckInfo.Http
      case 7 => __out = org.apache.mesos.v1.mesos.CheckInfo.Tcp
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => org.apache.mesos.v1.mesos.CheckInfo.Type
    }
  }
  lazy val defaultInstance = org.apache.mesos.v1.mesos.CheckInfo(
  )
  sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Type
    def isUnknown: Boolean = false
    def isCommand: Boolean = false
    def isHttp: Boolean = false
    def isTcp: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = org.apache.mesos.v1.mesos.CheckInfo.Type
  }
  
  object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object UNKNOWN extends Type {
      val value = 0
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object COMMAND extends Type {
      val value = 1
      val index = 1
      val name = "COMMAND"
      override def isCommand: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HTTP extends Type {
      val value = 2
      val index = 2
      val name = "HTTP"
      override def isHttp: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object TCP extends Type {
      val value = 3
      val index = 3
      val name = "TCP"
      override def isTcp: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(UNKNOWN, COMMAND, HTTP, TCP)
    def fromValue(value: Int): Type = value match {
      case 0 => UNKNOWN
      case 1 => COMMAND
      case 2 => HTTP
      case 3 => TCP
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.CheckInfo.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.CheckInfo.scalaDescriptor.enums(0)
  }
  /** Describes a command check. If applicable, enters mount and/or network
    * namespaces of the task.
    */
  @SerialVersionUID(0L)
  final case class Command(
      command: org.apache.mesos.v1.mesos.CommandInfo
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Command] with com.trueaccord.lenses.Updatable[Command] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.serializedSize) + command.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(command.serializedSize)
        command.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.CheckInfo.Command = {
        var __command = this.command
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __command = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __command)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        org.apache.mesos.v1.mesos.CheckInfo.Command(
            command = __command
        )
      }
      def withCommand(__v: org.apache.mesos.v1.mesos.CommandInfo): Command = copy(command = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => command
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => command.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.CheckInfo.Command
  }
  
  object Command extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckInfo.Command] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckInfo.Command] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.CheckInfo.Command = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.CheckInfo.Command(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.CommandInfo]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.CheckInfo.Command] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.CheckInfo.Command(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.CommandInfo]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.CheckInfo.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.CheckInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.CommandInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.CheckInfo.Command(
      command = org.apache.mesos.v1.mesos.CommandInfo.defaultInstance
    )
    implicit class CommandLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo.Command]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo.Command](_l) {
      def command: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CommandInfo] = field(_.command)((c_, f_) => c_.copy(command = f_))
    }
    final val COMMAND_FIELD_NUMBER = 1
  }
  
  /** Describes an HTTP check. Sends a GET request to
    * http://&lt;host&gt;:port/path. Note that &lt;host&gt; is not configurable and is
    * resolved automatically to 127.0.0.1.
    *
    * @param port
    *   Port to send the HTTP request.
    * @param path
    *   HTTP request path.
    */
  @SerialVersionUID(0L)
  final case class Http(
      port: Int,
      path: scala.Option[String] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Http] with com.trueaccord.lenses.Updatable[Http] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, port)
        if (path.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, path.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeUInt32(1, port)
        path.foreach { __v =>
          _output__.writeString(2, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.CheckInfo.Http = {
        var __port = this.port
        var __path = this.path
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __port = _input__.readUInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __path = Some(_input__.readString())
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        org.apache.mesos.v1.mesos.CheckInfo.Http(
            port = __port,
            path = __path
        )
      }
      def withPort(__v: Int): Http = copy(port = __v)
      def getPath: String = path.getOrElse("")
      def clearPath: Http = copy(path = None)
      def withPath(__v: String): Http = copy(path = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => port
          case 2 => path.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(port)
          case 2 => path.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.CheckInfo.Http
  }
  
  object Http extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckInfo.Http] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckInfo.Http] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.CheckInfo.Http = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.CheckInfo.Http(
        __fieldsMap(__fields.get(0)).asInstanceOf[Int],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.CheckInfo.Http] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.CheckInfo.Http(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.CheckInfo.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.CheckInfo.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.CheckInfo.Http(
      port = 0
    )
    implicit class HttpLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo.Http]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo.Http](_l) {
      def port: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.port)((c_, f_) => c_.copy(port = f_))
      def path: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPath)((c_, f_) => c_.copy(path = Some(f_)))
      def optionalPath: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.path)((c_, f_) => c_.copy(path = f_))
    }
    final val PORT_FIELD_NUMBER = 1
    final val PATH_FIELD_NUMBER = 2
  }
  
  /** Describes a TCP check, i.e. based on establishing a TCP connection to
    * the specified port. Note that &lt;host&gt; is not configurable and is resolved
    * automatically to 127.0.0.1.
    */
  @SerialVersionUID(0L)
  final case class Tcp(
      port: Int
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Tcp] with com.trueaccord.lenses.Updatable[Tcp] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, port)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeUInt32(1, port)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.CheckInfo.Tcp = {
        var __port = this.port
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __port = _input__.readUInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        org.apache.mesos.v1.mesos.CheckInfo.Tcp(
            port = __port
        )
      }
      def withPort(__v: Int): Tcp = copy(port = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => port
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(port)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.CheckInfo.Tcp
  }
  
  object Tcp extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckInfo.Tcp] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckInfo.Tcp] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.CheckInfo.Tcp = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.CheckInfo.Tcp(
        __fieldsMap(__fields.get(0)).asInstanceOf[Int]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.CheckInfo.Tcp] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.CheckInfo.Tcp(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.CheckInfo.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.CheckInfo.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.CheckInfo.Tcp(
      port = 0
    )
    implicit class TcpLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo.Tcp]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo.Tcp](_l) {
      def port: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.port)((c_, f_) => c_.copy(port = f_))
    }
    final val PORT_FIELD_NUMBER = 1
  }
  
  implicit class CheckInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo](_l) {
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
    def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def command: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo.Command] = field(_.getCommand)((c_, f_) => c_.copy(command = Some(f_)))
    def optionalCommand: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Command]] = field(_.command)((c_, f_) => c_.copy(command = f_))
    def http: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo.Http] = field(_.getHttp)((c_, f_) => c_.copy(http = Some(f_)))
    def optionalHttp: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Http]] = field(_.http)((c_, f_) => c_.copy(http = f_))
    def tcp: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo.Tcp] = field(_.getTcp)((c_, f_) => c_.copy(tcp = Some(f_)))
    def optionalTcp: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Tcp]] = field(_.tcp)((c_, f_) => c_.copy(tcp = f_))
    def delaySeconds: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getDelaySeconds)((c_, f_) => c_.copy(delaySeconds = Some(f_)))
    def optionalDelaySeconds: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.delaySeconds)((c_, f_) => c_.copy(delaySeconds = f_))
    def intervalSeconds: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getIntervalSeconds)((c_, f_) => c_.copy(intervalSeconds = Some(f_)))
    def optionalIntervalSeconds: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.intervalSeconds)((c_, f_) => c_.copy(intervalSeconds = f_))
    def timeoutSeconds: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getTimeoutSeconds)((c_, f_) => c_.copy(timeoutSeconds = Some(f_)))
    def optionalTimeoutSeconds: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.timeoutSeconds)((c_, f_) => c_.copy(timeoutSeconds = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val COMMAND_FIELD_NUMBER = 2
  final val HTTP_FIELD_NUMBER = 3
  final val TCP_FIELD_NUMBER = 7
  final val DELAY_SECONDS_FIELD_NUMBER = 4
  final val INTERVAL_SECONDS_FIELD_NUMBER = 5
  final val TIMEOUT_SECONDS_FIELD_NUMBER = 6
}
