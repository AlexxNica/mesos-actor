// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes a master. This will probably have more fields in the
  * future which might be used, for example, to link a framework webui
  * to a master webui.
  *
  * @param ip
  *   The IP address (only IPv4) as a packed 4-bytes integer,
  *   stored in network order.  Deprecated, use `address.ip` instead.
  * @param port
  *   The TCP port the Master is listening on for incoming
  *   HTTP requests; deprecated, use `address.port` instead.
  * @param pid
  *   In the default implementation, this will contain information
  *   about both the IP address, port and Master name; it should really
  *   not be relied upon by external tooling/frameworks and be
  *   considered an "internal" implementation field.
  * @param hostname
  *   The server's hostname, if available; it may be unreliable
  *   in environments where the DNS configuration does not resolve
  *   internal hostnames (eg, some public cloud providers).
  *   Deprecated, use `address.hostname` instead.
  * @param version
  *   The running Master version, as a string; taken from the
  *   generated "master/version.hpp".
  * @param address
  *   The full IP address (supports both IPv4 and IPv6 formats)
  *   and supersedes the use of `ip`, `port` and `hostname`.
  *   Since Mesos 0.24.
  */
@SerialVersionUID(0L)
final case class MasterInfo(
    id: String,
    ip: Int,
    port: Int,
    pid: scala.Option[String] = None,
    hostname: scala.Option[String] = None,
    version: scala.Option[String] = None,
    address: scala.Option[org.apache.mesos.v1.mesos.Address] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[MasterInfo] with com.trueaccord.lenses.Updatable[MasterInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, id)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, ip)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, port)
      if (pid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, pid.get) }
      if (hostname.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, hostname.get) }
      if (version.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, version.get) }
      if (address.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(address.get.serializedSize) + address.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, id)
      _output__.writeUInt32(2, ip)
      _output__.writeUInt32(3, port)
      pid.foreach { __v =>
        _output__.writeString(4, __v)
      };
      hostname.foreach { __v =>
        _output__.writeString(5, __v)
      };
      version.foreach { __v =>
        _output__.writeString(6, __v)
      };
      address.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.MasterInfo = {
      var __id = this.id
      var __ip = this.ip
      var __port = this.port
      var __pid = this.pid
      var __hostname = this.hostname
      var __version = this.version
      var __address = this.address
      var __requiredFields0: Long = 0x7L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __ip = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __port = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 34 =>
            __pid = Some(_input__.readString())
          case 42 =>
            __hostname = Some(_input__.readString())
          case 50 =>
            __version = Some(_input__.readString())
          case 58 =>
            __address = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __address.getOrElse(org.apache.mesos.v1.mesos.Address.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.MasterInfo(
          id = __id,
          ip = __ip,
          port = __port,
          pid = __pid,
          hostname = __hostname,
          version = __version,
          address = __address
      )
    }
    def withId(__v: String): MasterInfo = copy(id = __v)
    def withIp(__v: Int): MasterInfo = copy(ip = __v)
    def withPort(__v: Int): MasterInfo = copy(port = __v)
    def getPid: String = pid.getOrElse("")
    def clearPid: MasterInfo = copy(pid = None)
    def withPid(__v: String): MasterInfo = copy(pid = Some(__v))
    def getHostname: String = hostname.getOrElse("")
    def clearHostname: MasterInfo = copy(hostname = None)
    def withHostname(__v: String): MasterInfo = copy(hostname = Some(__v))
    def getVersion: String = version.getOrElse("")
    def clearVersion: MasterInfo = copy(version = None)
    def withVersion(__v: String): MasterInfo = copy(version = Some(__v))
    def getAddress: org.apache.mesos.v1.mesos.Address = address.getOrElse(org.apache.mesos.v1.mesos.Address.defaultInstance)
    def clearAddress: MasterInfo = copy(address = None)
    def withAddress(__v: org.apache.mesos.v1.mesos.Address): MasterInfo = copy(address = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id
        case 2 => ip
        case 3 => port
        case 4 => pid.orNull
        case 5 => hostname.orNull
        case 6 => version.orNull
        case 7 => address.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 2 => _root_.scalapb.descriptors.PInt(ip)
        case 3 => _root_.scalapb.descriptors.PInt(port)
        case 4 => pid.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => hostname.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => version.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => address.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.MasterInfo
}

object MasterInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.MasterInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.MasterInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.MasterInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.MasterInfo(
      __fieldsMap(__fields.get(0)).asInstanceOf[String],
      __fieldsMap(__fields.get(1)).asInstanceOf[Int],
      __fieldsMap(__fields.get(2)).asInstanceOf[Int],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Address]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.MasterInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.MasterInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Address]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(20)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(20)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 7 => __out = org.apache.mesos.v1.mesos.Address
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.MasterInfo(
    id = "",
    ip = 0,
    port = 5050
  )
  implicit class MasterInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.MasterInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.MasterInfo](_l) {
    def id: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def ip: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.ip)((c_, f_) => c_.copy(ip = f_))
    def port: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.port)((c_, f_) => c_.copy(port = f_))
    def pid: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPid)((c_, f_) => c_.copy(pid = Some(f_)))
    def optionalPid: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.pid)((c_, f_) => c_.copy(pid = f_))
    def hostname: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getHostname)((c_, f_) => c_.copy(hostname = Some(f_)))
    def optionalHostname: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.hostname)((c_, f_) => c_.copy(hostname = f_))
    def version: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getVersion)((c_, f_) => c_.copy(version = Some(f_)))
    def optionalVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def address: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Address] = field(_.getAddress)((c_, f_) => c_.copy(address = Some(f_)))
    def optionalAddress: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Address]] = field(_.address)((c_, f_) => c_.copy(address = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val IP_FIELD_NUMBER = 2
  final val PORT_FIELD_NUMBER = 3
  final val PID_FIELD_NUMBER = 4
  final val HOSTNAME_FIELD_NUMBER = 5
  final val VERSION_FIELD_NUMBER = 6
  final val ADDRESS_FIELD_NUMBER = 7
}
