// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Named port used for service discovery.
  *
  * @param number
  *   Port number on which the framework exposes a service.
  * @param name
  *   Name of the service hosted on this port.
  * @param protocol
  *   Layer 4-7 protocol on which the framework exposes its services.
  * @param visibility
  *   This field restricts discovery within a framework (FRAMEWORK),
  *   within a Mesos cluster (CLUSTER), or places no restrictions (EXTERNAL).
  *   The visibility setting for a Port overrides the general visibility setting
  *   in the DiscoveryInfo.
  * @param labels
  *   This can be used to decorate the message with metadata to be
  *   interpreted by external applications such as firewalls.
  */
@SerialVersionUID(0L)
final case class Port(
    number: Int,
    name: scala.Option[String] = None,
    protocol: scala.Option[String] = None,
    visibility: scala.Option[org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility] = None,
    labels: scala.Option[org.apache.mesos.v1.mesos.Labels] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Port] with com.trueaccord.lenses.Updatable[Port] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, number)
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, name.get) }
      if (protocol.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, protocol.get) }
      if (visibility.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, visibility.get.value) }
      if (labels.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(labels.get.serializedSize) + labels.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeUInt32(1, number)
      name.foreach { __v =>
        _output__.writeString(2, __v)
      };
      protocol.foreach { __v =>
        _output__.writeString(3, __v)
      };
      visibility.foreach { __v =>
        _output__.writeEnum(4, __v.value)
      };
      labels.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Port = {
      var __number = this.number
      var __name = this.name
      var __protocol = this.protocol
      var __visibility = this.visibility
      var __labels = this.labels
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __number = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __name = Some(_input__.readString())
          case 26 =>
            __protocol = Some(_input__.readString())
          case 32 =>
            __visibility = Some(org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility.fromValue(_input__.readEnum()))
          case 42 =>
            __labels = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.Port(
          number = __number,
          name = __name,
          protocol = __protocol,
          visibility = __visibility,
          labels = __labels
      )
    }
    def withNumber(__v: Int): Port = copy(number = __v)
    def getName: String = name.getOrElse("")
    def clearName: Port = copy(name = None)
    def withName(__v: String): Port = copy(name = Some(__v))
    def getProtocol: String = protocol.getOrElse("")
    def clearProtocol: Port = copy(protocol = None)
    def withProtocol(__v: String): Port = copy(protocol = Some(__v))
    def getVisibility: org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility = visibility.getOrElse(org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility.FRAMEWORK)
    def clearVisibility: Port = copy(visibility = None)
    def withVisibility(__v: org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility): Port = copy(visibility = Some(__v))
    def getLabels: org.apache.mesos.v1.mesos.Labels = labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)
    def clearLabels: Port = copy(labels = None)
    def withLabels(__v: org.apache.mesos.v1.mesos.Labels): Port = copy(labels = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => number
        case 2 => name.orNull
        case 3 => protocol.orNull
        case 4 => visibility.map(_.javaValueDescriptor).orNull
        case 5 => labels.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(number)
        case 2 => name.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => protocol.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => visibility.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => labels.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.Port
}

object Port extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Port] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Port] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Port = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.Port(
      __fieldsMap(__fields.get(0)).asInstanceOf[Int],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Labels]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Port] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.Port(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Labels]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(65)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(65)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => __out = org.apache.mesos.v1.mesos.Labels
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility
    }
  }
  lazy val defaultInstance = org.apache.mesos.v1.mesos.Port(
    number = 0
  )
  implicit class PortLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Port]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Port](_l) {
    def number: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.number)((c_, f_) => c_.copy(number = f_))
    def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getName)((c_, f_) => c_.copy(name = Some(f_)))
    def optionalName: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def protocol: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getProtocol)((c_, f_) => c_.copy(protocol = Some(f_)))
    def optionalProtocol: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.protocol)((c_, f_) => c_.copy(protocol = f_))
    def visibility: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility] = field(_.getVisibility)((c_, f_) => c_.copy(visibility = Some(f_)))
    def optionalVisibility: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility]] = field(_.visibility)((c_, f_) => c_.copy(visibility = f_))
    def labels: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Labels] = field(_.getLabels)((c_, f_) => c_.copy(labels = Some(f_)))
    def optionalLabels: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Labels]] = field(_.labels)((c_, f_) => c_.copy(labels = f_))
  }
  final val NUMBER_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val PROTOCOL_FIELD_NUMBER = 3
  final val VISIBILITY_FIELD_NUMBER = 4
  final val LABELS_FIELD_NUMBER = 5
}
