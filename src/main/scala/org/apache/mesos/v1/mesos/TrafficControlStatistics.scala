// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * When the network bandwidth caps are enabled and the container
  * is over its limit, outbound packets may be either delayed or
  * dropped completely either because it exceeds the maximum bandwidth
  * allocation for a single container (the cap) or because the combined
  * network traffic of multiple containers on the host exceeds the
  * transmit capacity of the host (the share). We can report the
  * following statistics for each of these conditions exported directly
  * from the Linux Traffic Control Queueing Discipline.
  *
  * id         : name of the limiter, e.g. 'tx_bw_cap'
  * backlog    : number of packets currently delayed
  * bytes      : total bytes seen
  * drops      : number of packets dropped in total
  * overlimits : number of packets which exceeded allocation
  * packets    : total packets seen
  * qlen       : number of packets currently queued
  * rate_bps   : throughput in bytes/sec
  * rate_pps   : throughput in packets/sec
  * requeues   : number of times a packet has been delayed due to
  *              locking or device contention issues
  *
  * More information on the operation of Linux Traffic Control can be
  * found at http://www.lartc.org/lartc.html.
  */
@SerialVersionUID(0L)
final case class TrafficControlStatistics(
    id: String,
    backlog: scala.Option[Long] = None,
    bytes: scala.Option[Long] = None,
    drops: scala.Option[Long] = None,
    overlimits: scala.Option[Long] = None,
    packets: scala.Option[Long] = None,
    qlen: scala.Option[Long] = None,
    ratebps: scala.Option[Long] = None,
    ratepps: scala.Option[Long] = None,
    requeues: scala.Option[Long] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TrafficControlStatistics] with com.trueaccord.lenses.Updatable[TrafficControlStatistics] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, id)
      if (backlog.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, backlog.get) }
      if (bytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, bytes.get) }
      if (drops.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, drops.get) }
      if (overlimits.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(5, overlimits.get) }
      if (packets.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(6, packets.get) }
      if (qlen.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(7, qlen.get) }
      if (ratebps.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(8, ratebps.get) }
      if (ratepps.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(9, ratepps.get) }
      if (requeues.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(10, requeues.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, id)
      backlog.foreach { __v =>
        _output__.writeUInt64(2, __v)
      };
      bytes.foreach { __v =>
        _output__.writeUInt64(3, __v)
      };
      drops.foreach { __v =>
        _output__.writeUInt64(4, __v)
      };
      overlimits.foreach { __v =>
        _output__.writeUInt64(5, __v)
      };
      packets.foreach { __v =>
        _output__.writeUInt64(6, __v)
      };
      qlen.foreach { __v =>
        _output__.writeUInt64(7, __v)
      };
      ratebps.foreach { __v =>
        _output__.writeUInt64(8, __v)
      };
      ratepps.foreach { __v =>
        _output__.writeUInt64(9, __v)
      };
      requeues.foreach { __v =>
        _output__.writeUInt64(10, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.TrafficControlStatistics = {
      var __id = this.id
      var __backlog = this.backlog
      var __bytes = this.bytes
      var __drops = this.drops
      var __overlimits = this.overlimits
      var __packets = this.packets
      var __qlen = this.qlen
      var __ratebps = this.ratebps
      var __ratepps = this.ratepps
      var __requeues = this.requeues
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __backlog = Some(_input__.readUInt64())
          case 24 =>
            __bytes = Some(_input__.readUInt64())
          case 32 =>
            __drops = Some(_input__.readUInt64())
          case 40 =>
            __overlimits = Some(_input__.readUInt64())
          case 48 =>
            __packets = Some(_input__.readUInt64())
          case 56 =>
            __qlen = Some(_input__.readUInt64())
          case 64 =>
            __ratebps = Some(_input__.readUInt64())
          case 72 =>
            __ratepps = Some(_input__.readUInt64())
          case 80 =>
            __requeues = Some(_input__.readUInt64())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.TrafficControlStatistics(
          id = __id,
          backlog = __backlog,
          bytes = __bytes,
          drops = __drops,
          overlimits = __overlimits,
          packets = __packets,
          qlen = __qlen,
          ratebps = __ratebps,
          ratepps = __ratepps,
          requeues = __requeues
      )
    }
    def withId(__v: String): TrafficControlStatistics = copy(id = __v)
    def getBacklog: Long = backlog.getOrElse(0L)
    def clearBacklog: TrafficControlStatistics = copy(backlog = None)
    def withBacklog(__v: Long): TrafficControlStatistics = copy(backlog = Some(__v))
    def getBytes: Long = bytes.getOrElse(0L)
    def clearBytes: TrafficControlStatistics = copy(bytes = None)
    def withBytes(__v: Long): TrafficControlStatistics = copy(bytes = Some(__v))
    def getDrops: Long = drops.getOrElse(0L)
    def clearDrops: TrafficControlStatistics = copy(drops = None)
    def withDrops(__v: Long): TrafficControlStatistics = copy(drops = Some(__v))
    def getOverlimits: Long = overlimits.getOrElse(0L)
    def clearOverlimits: TrafficControlStatistics = copy(overlimits = None)
    def withOverlimits(__v: Long): TrafficControlStatistics = copy(overlimits = Some(__v))
    def getPackets: Long = packets.getOrElse(0L)
    def clearPackets: TrafficControlStatistics = copy(packets = None)
    def withPackets(__v: Long): TrafficControlStatistics = copy(packets = Some(__v))
    def getQlen: Long = qlen.getOrElse(0L)
    def clearQlen: TrafficControlStatistics = copy(qlen = None)
    def withQlen(__v: Long): TrafficControlStatistics = copy(qlen = Some(__v))
    def getRatebps: Long = ratebps.getOrElse(0L)
    def clearRatebps: TrafficControlStatistics = copy(ratebps = None)
    def withRatebps(__v: Long): TrafficControlStatistics = copy(ratebps = Some(__v))
    def getRatepps: Long = ratepps.getOrElse(0L)
    def clearRatepps: TrafficControlStatistics = copy(ratepps = None)
    def withRatepps(__v: Long): TrafficControlStatistics = copy(ratepps = Some(__v))
    def getRequeues: Long = requeues.getOrElse(0L)
    def clearRequeues: TrafficControlStatistics = copy(requeues = None)
    def withRequeues(__v: Long): TrafficControlStatistics = copy(requeues = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id
        case 2 => backlog.orNull
        case 3 => bytes.orNull
        case 4 => drops.orNull
        case 5 => overlimits.orNull
        case 6 => packets.orNull
        case 7 => qlen.orNull
        case 8 => ratebps.orNull
        case 9 => ratepps.orNull
        case 10 => requeues.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 2 => backlog.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => bytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => drops.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => overlimits.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => packets.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => qlen.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => ratebps.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => ratepps.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => requeues.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.TrafficControlStatistics
}

object TrafficControlStatistics extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.TrafficControlStatistics] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.TrafficControlStatistics] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.TrafficControlStatistics = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.TrafficControlStatistics(
      __fieldsMap(__fields.get(0)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.TrafficControlStatistics] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.TrafficControlStatistics(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(26)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(26)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.TrafficControlStatistics(
    id = ""
  )
  implicit class TrafficControlStatisticsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TrafficControlStatistics]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.TrafficControlStatistics](_l) {
    def id: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def backlog: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getBacklog)((c_, f_) => c_.copy(backlog = Some(f_)))
    def optionalBacklog: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.backlog)((c_, f_) => c_.copy(backlog = f_))
    def bytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getBytes)((c_, f_) => c_.copy(bytes = Some(f_)))
    def optionalBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.bytes)((c_, f_) => c_.copy(bytes = f_))
    def drops: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDrops)((c_, f_) => c_.copy(drops = Some(f_)))
    def optionalDrops: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.drops)((c_, f_) => c_.copy(drops = f_))
    def overlimits: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOverlimits)((c_, f_) => c_.copy(overlimits = Some(f_)))
    def optionalOverlimits: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.overlimits)((c_, f_) => c_.copy(overlimits = f_))
    def packets: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getPackets)((c_, f_) => c_.copy(packets = Some(f_)))
    def optionalPackets: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.packets)((c_, f_) => c_.copy(packets = f_))
    def qlen: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getQlen)((c_, f_) => c_.copy(qlen = Some(f_)))
    def optionalQlen: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.qlen)((c_, f_) => c_.copy(qlen = f_))
    def ratebps: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getRatebps)((c_, f_) => c_.copy(ratebps = Some(f_)))
    def optionalRatebps: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.ratebps)((c_, f_) => c_.copy(ratebps = f_))
    def ratepps: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getRatepps)((c_, f_) => c_.copy(ratepps = Some(f_)))
    def optionalRatepps: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.ratepps)((c_, f_) => c_.copy(ratepps = f_))
    def requeues: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getRequeues)((c_, f_) => c_.copy(requeues = Some(f_)))
    def optionalRequeues: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.requeues)((c_, f_) => c_.copy(requeues = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val BACKLOG_FIELD_NUMBER = 2
  final val BYTES_FIELD_NUMBER = 3
  final val DROPS_FIELD_NUMBER = 4
  final val OVERLIMITS_FIELD_NUMBER = 5
  final val PACKETS_FIELD_NUMBER = 6
  final val QLEN_FIELD_NUMBER = 7
  final val RATEBPS_FIELD_NUMBER = 8
  final val RATEPPS_FIELD_NUMBER = 9
  final val REQUEUES_FIELD_NUMBER = 10
}
