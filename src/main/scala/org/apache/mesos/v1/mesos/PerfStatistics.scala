// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes a sample of events from "perf stat". Only available on
  * Linux.
  *
  * NOTE: Each optional field matches the name of a perf event (see
  * "perf list") with the following changes:
  * 1. Names are downcased.
  * 2. Hyphens ('-') are replaced with underscores ('_').
  * 3. Events with alternate names use the name "perf stat" returns,
  *    e.g., for the event "cycles OR cpu-cycles" perf always returns
  *    cycles.
  *
  * @param timestamp
  *   Start of sample interval, in seconds since the Epoch.
  * @param duration
  *   Duration of sample interval, in seconds.
  * @param cycles
  *   Hardware event.
  * @param cpuClock
  *   Software event.
  * @param l1DcacheLoads
  *   Hardware cache event.
  */
@SerialVersionUID(0L)
final case class PerfStatistics(
    timestamp: Double,
    duration: Double,
    cycles: scala.Option[Long] = None,
    stalledCyclesFrontend: scala.Option[Long] = None,
    stalledCyclesBackend: scala.Option[Long] = None,
    instructions: scala.Option[Long] = None,
    cacheReferences: scala.Option[Long] = None,
    cacheMisses: scala.Option[Long] = None,
    branches: scala.Option[Long] = None,
    branchMisses: scala.Option[Long] = None,
    busCycles: scala.Option[Long] = None,
    refCycles: scala.Option[Long] = None,
    cpuClock: scala.Option[Double] = None,
    taskClock: scala.Option[Double] = None,
    pageFaults: scala.Option[Long] = None,
    minorFaults: scala.Option[Long] = None,
    majorFaults: scala.Option[Long] = None,
    contextSwitches: scala.Option[Long] = None,
    cpuMigrations: scala.Option[Long] = None,
    alignmentFaults: scala.Option[Long] = None,
    emulationFaults: scala.Option[Long] = None,
    l1DcacheLoads: scala.Option[Long] = None,
    l1DcacheLoadMisses: scala.Option[Long] = None,
    l1DcacheStores: scala.Option[Long] = None,
    l1DcacheStoreMisses: scala.Option[Long] = None,
    l1DcachePrefetches: scala.Option[Long] = None,
    l1DcachePrefetchMisses: scala.Option[Long] = None,
    l1IcacheLoads: scala.Option[Long] = None,
    l1IcacheLoadMisses: scala.Option[Long] = None,
    l1IcachePrefetches: scala.Option[Long] = None,
    l1IcachePrefetchMisses: scala.Option[Long] = None,
    llcLoads: scala.Option[Long] = None,
    llcLoadMisses: scala.Option[Long] = None,
    llcStores: scala.Option[Long] = None,
    llcStoreMisses: scala.Option[Long] = None,
    llcPrefetches: scala.Option[Long] = None,
    llcPrefetchMisses: scala.Option[Long] = None,
    dtlbLoads: scala.Option[Long] = None,
    dtlbLoadMisses: scala.Option[Long] = None,
    dtlbStores: scala.Option[Long] = None,
    dtlbStoreMisses: scala.Option[Long] = None,
    dtlbPrefetches: scala.Option[Long] = None,
    dtlbPrefetchMisses: scala.Option[Long] = None,
    itlbLoads: scala.Option[Long] = None,
    itlbLoadMisses: scala.Option[Long] = None,
    branchLoads: scala.Option[Long] = None,
    branchLoadMisses: scala.Option[Long] = None,
    nodeLoads: scala.Option[Long] = None,
    nodeLoadMisses: scala.Option[Long] = None,
    nodeStores: scala.Option[Long] = None,
    nodeStoreMisses: scala.Option[Long] = None,
    nodePrefetches: scala.Option[Long] = None,
    nodePrefetchMisses: scala.Option[Long] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[PerfStatistics] with com.trueaccord.lenses.Updatable[PerfStatistics] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, timestamp)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(2, duration)
      if (cycles.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, cycles.get) }
      if (stalledCyclesFrontend.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, stalledCyclesFrontend.get) }
      if (stalledCyclesBackend.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(5, stalledCyclesBackend.get) }
      if (instructions.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(6, instructions.get) }
      if (cacheReferences.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(7, cacheReferences.get) }
      if (cacheMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(8, cacheMisses.get) }
      if (branches.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(9, branches.get) }
      if (branchMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(10, branchMisses.get) }
      if (busCycles.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(11, busCycles.get) }
      if (refCycles.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(12, refCycles.get) }
      if (cpuClock.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(13, cpuClock.get) }
      if (taskClock.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(14, taskClock.get) }
      if (pageFaults.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(15, pageFaults.get) }
      if (minorFaults.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(16, minorFaults.get) }
      if (majorFaults.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(17, majorFaults.get) }
      if (contextSwitches.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(18, contextSwitches.get) }
      if (cpuMigrations.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(19, cpuMigrations.get) }
      if (alignmentFaults.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(20, alignmentFaults.get) }
      if (emulationFaults.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(21, emulationFaults.get) }
      if (l1DcacheLoads.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(22, l1DcacheLoads.get) }
      if (l1DcacheLoadMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(23, l1DcacheLoadMisses.get) }
      if (l1DcacheStores.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(24, l1DcacheStores.get) }
      if (l1DcacheStoreMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(25, l1DcacheStoreMisses.get) }
      if (l1DcachePrefetches.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(26, l1DcachePrefetches.get) }
      if (l1DcachePrefetchMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(27, l1DcachePrefetchMisses.get) }
      if (l1IcacheLoads.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(28, l1IcacheLoads.get) }
      if (l1IcacheLoadMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(29, l1IcacheLoadMisses.get) }
      if (l1IcachePrefetches.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(30, l1IcachePrefetches.get) }
      if (l1IcachePrefetchMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(31, l1IcachePrefetchMisses.get) }
      if (llcLoads.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(32, llcLoads.get) }
      if (llcLoadMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(33, llcLoadMisses.get) }
      if (llcStores.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(34, llcStores.get) }
      if (llcStoreMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(35, llcStoreMisses.get) }
      if (llcPrefetches.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(36, llcPrefetches.get) }
      if (llcPrefetchMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(37, llcPrefetchMisses.get) }
      if (dtlbLoads.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(38, dtlbLoads.get) }
      if (dtlbLoadMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(39, dtlbLoadMisses.get) }
      if (dtlbStores.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(40, dtlbStores.get) }
      if (dtlbStoreMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(41, dtlbStoreMisses.get) }
      if (dtlbPrefetches.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(42, dtlbPrefetches.get) }
      if (dtlbPrefetchMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(43, dtlbPrefetchMisses.get) }
      if (itlbLoads.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(44, itlbLoads.get) }
      if (itlbLoadMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(45, itlbLoadMisses.get) }
      if (branchLoads.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(46, branchLoads.get) }
      if (branchLoadMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(47, branchLoadMisses.get) }
      if (nodeLoads.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(48, nodeLoads.get) }
      if (nodeLoadMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(49, nodeLoadMisses.get) }
      if (nodeStores.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(50, nodeStores.get) }
      if (nodeStoreMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(51, nodeStoreMisses.get) }
      if (nodePrefetches.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(52, nodePrefetches.get) }
      if (nodePrefetchMisses.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(53, nodePrefetchMisses.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeDouble(1, timestamp)
      _output__.writeDouble(2, duration)
      cycles.foreach { __v =>
        _output__.writeUInt64(3, __v)
      };
      stalledCyclesFrontend.foreach { __v =>
        _output__.writeUInt64(4, __v)
      };
      stalledCyclesBackend.foreach { __v =>
        _output__.writeUInt64(5, __v)
      };
      instructions.foreach { __v =>
        _output__.writeUInt64(6, __v)
      };
      cacheReferences.foreach { __v =>
        _output__.writeUInt64(7, __v)
      };
      cacheMisses.foreach { __v =>
        _output__.writeUInt64(8, __v)
      };
      branches.foreach { __v =>
        _output__.writeUInt64(9, __v)
      };
      branchMisses.foreach { __v =>
        _output__.writeUInt64(10, __v)
      };
      busCycles.foreach { __v =>
        _output__.writeUInt64(11, __v)
      };
      refCycles.foreach { __v =>
        _output__.writeUInt64(12, __v)
      };
      cpuClock.foreach { __v =>
        _output__.writeDouble(13, __v)
      };
      taskClock.foreach { __v =>
        _output__.writeDouble(14, __v)
      };
      pageFaults.foreach { __v =>
        _output__.writeUInt64(15, __v)
      };
      minorFaults.foreach { __v =>
        _output__.writeUInt64(16, __v)
      };
      majorFaults.foreach { __v =>
        _output__.writeUInt64(17, __v)
      };
      contextSwitches.foreach { __v =>
        _output__.writeUInt64(18, __v)
      };
      cpuMigrations.foreach { __v =>
        _output__.writeUInt64(19, __v)
      };
      alignmentFaults.foreach { __v =>
        _output__.writeUInt64(20, __v)
      };
      emulationFaults.foreach { __v =>
        _output__.writeUInt64(21, __v)
      };
      l1DcacheLoads.foreach { __v =>
        _output__.writeUInt64(22, __v)
      };
      l1DcacheLoadMisses.foreach { __v =>
        _output__.writeUInt64(23, __v)
      };
      l1DcacheStores.foreach { __v =>
        _output__.writeUInt64(24, __v)
      };
      l1DcacheStoreMisses.foreach { __v =>
        _output__.writeUInt64(25, __v)
      };
      l1DcachePrefetches.foreach { __v =>
        _output__.writeUInt64(26, __v)
      };
      l1DcachePrefetchMisses.foreach { __v =>
        _output__.writeUInt64(27, __v)
      };
      l1IcacheLoads.foreach { __v =>
        _output__.writeUInt64(28, __v)
      };
      l1IcacheLoadMisses.foreach { __v =>
        _output__.writeUInt64(29, __v)
      };
      l1IcachePrefetches.foreach { __v =>
        _output__.writeUInt64(30, __v)
      };
      l1IcachePrefetchMisses.foreach { __v =>
        _output__.writeUInt64(31, __v)
      };
      llcLoads.foreach { __v =>
        _output__.writeUInt64(32, __v)
      };
      llcLoadMisses.foreach { __v =>
        _output__.writeUInt64(33, __v)
      };
      llcStores.foreach { __v =>
        _output__.writeUInt64(34, __v)
      };
      llcStoreMisses.foreach { __v =>
        _output__.writeUInt64(35, __v)
      };
      llcPrefetches.foreach { __v =>
        _output__.writeUInt64(36, __v)
      };
      llcPrefetchMisses.foreach { __v =>
        _output__.writeUInt64(37, __v)
      };
      dtlbLoads.foreach { __v =>
        _output__.writeUInt64(38, __v)
      };
      dtlbLoadMisses.foreach { __v =>
        _output__.writeUInt64(39, __v)
      };
      dtlbStores.foreach { __v =>
        _output__.writeUInt64(40, __v)
      };
      dtlbStoreMisses.foreach { __v =>
        _output__.writeUInt64(41, __v)
      };
      dtlbPrefetches.foreach { __v =>
        _output__.writeUInt64(42, __v)
      };
      dtlbPrefetchMisses.foreach { __v =>
        _output__.writeUInt64(43, __v)
      };
      itlbLoads.foreach { __v =>
        _output__.writeUInt64(44, __v)
      };
      itlbLoadMisses.foreach { __v =>
        _output__.writeUInt64(45, __v)
      };
      branchLoads.foreach { __v =>
        _output__.writeUInt64(46, __v)
      };
      branchLoadMisses.foreach { __v =>
        _output__.writeUInt64(47, __v)
      };
      nodeLoads.foreach { __v =>
        _output__.writeUInt64(48, __v)
      };
      nodeLoadMisses.foreach { __v =>
        _output__.writeUInt64(49, __v)
      };
      nodeStores.foreach { __v =>
        _output__.writeUInt64(50, __v)
      };
      nodeStoreMisses.foreach { __v =>
        _output__.writeUInt64(51, __v)
      };
      nodePrefetches.foreach { __v =>
        _output__.writeUInt64(52, __v)
      };
      nodePrefetchMisses.foreach { __v =>
        _output__.writeUInt64(53, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.PerfStatistics = {
      var __timestamp = this.timestamp
      var __duration = this.duration
      var __cycles = this.cycles
      var __stalledCyclesFrontend = this.stalledCyclesFrontend
      var __stalledCyclesBackend = this.stalledCyclesBackend
      var __instructions = this.instructions
      var __cacheReferences = this.cacheReferences
      var __cacheMisses = this.cacheMisses
      var __branches = this.branches
      var __branchMisses = this.branchMisses
      var __busCycles = this.busCycles
      var __refCycles = this.refCycles
      var __cpuClock = this.cpuClock
      var __taskClock = this.taskClock
      var __pageFaults = this.pageFaults
      var __minorFaults = this.minorFaults
      var __majorFaults = this.majorFaults
      var __contextSwitches = this.contextSwitches
      var __cpuMigrations = this.cpuMigrations
      var __alignmentFaults = this.alignmentFaults
      var __emulationFaults = this.emulationFaults
      var __l1DcacheLoads = this.l1DcacheLoads
      var __l1DcacheLoadMisses = this.l1DcacheLoadMisses
      var __l1DcacheStores = this.l1DcacheStores
      var __l1DcacheStoreMisses = this.l1DcacheStoreMisses
      var __l1DcachePrefetches = this.l1DcachePrefetches
      var __l1DcachePrefetchMisses = this.l1DcachePrefetchMisses
      var __l1IcacheLoads = this.l1IcacheLoads
      var __l1IcacheLoadMisses = this.l1IcacheLoadMisses
      var __l1IcachePrefetches = this.l1IcachePrefetches
      var __l1IcachePrefetchMisses = this.l1IcachePrefetchMisses
      var __llcLoads = this.llcLoads
      var __llcLoadMisses = this.llcLoadMisses
      var __llcStores = this.llcStores
      var __llcStoreMisses = this.llcStoreMisses
      var __llcPrefetches = this.llcPrefetches
      var __llcPrefetchMisses = this.llcPrefetchMisses
      var __dtlbLoads = this.dtlbLoads
      var __dtlbLoadMisses = this.dtlbLoadMisses
      var __dtlbStores = this.dtlbStores
      var __dtlbStoreMisses = this.dtlbStoreMisses
      var __dtlbPrefetches = this.dtlbPrefetches
      var __dtlbPrefetchMisses = this.dtlbPrefetchMisses
      var __itlbLoads = this.itlbLoads
      var __itlbLoadMisses = this.itlbLoadMisses
      var __branchLoads = this.branchLoads
      var __branchLoadMisses = this.branchLoadMisses
      var __nodeLoads = this.nodeLoads
      var __nodeLoadMisses = this.nodeLoadMisses
      var __nodeStores = this.nodeStores
      var __nodeStoreMisses = this.nodeStoreMisses
      var __nodePrefetches = this.nodePrefetches
      var __nodePrefetchMisses = this.nodePrefetchMisses
      var __requiredFields0: Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __timestamp = _input__.readDouble()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 17 =>
            __duration = _input__.readDouble()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __cycles = Some(_input__.readUInt64())
          case 32 =>
            __stalledCyclesFrontend = Some(_input__.readUInt64())
          case 40 =>
            __stalledCyclesBackend = Some(_input__.readUInt64())
          case 48 =>
            __instructions = Some(_input__.readUInt64())
          case 56 =>
            __cacheReferences = Some(_input__.readUInt64())
          case 64 =>
            __cacheMisses = Some(_input__.readUInt64())
          case 72 =>
            __branches = Some(_input__.readUInt64())
          case 80 =>
            __branchMisses = Some(_input__.readUInt64())
          case 88 =>
            __busCycles = Some(_input__.readUInt64())
          case 96 =>
            __refCycles = Some(_input__.readUInt64())
          case 105 =>
            __cpuClock = Some(_input__.readDouble())
          case 113 =>
            __taskClock = Some(_input__.readDouble())
          case 120 =>
            __pageFaults = Some(_input__.readUInt64())
          case 128 =>
            __minorFaults = Some(_input__.readUInt64())
          case 136 =>
            __majorFaults = Some(_input__.readUInt64())
          case 144 =>
            __contextSwitches = Some(_input__.readUInt64())
          case 152 =>
            __cpuMigrations = Some(_input__.readUInt64())
          case 160 =>
            __alignmentFaults = Some(_input__.readUInt64())
          case 168 =>
            __emulationFaults = Some(_input__.readUInt64())
          case 176 =>
            __l1DcacheLoads = Some(_input__.readUInt64())
          case 184 =>
            __l1DcacheLoadMisses = Some(_input__.readUInt64())
          case 192 =>
            __l1DcacheStores = Some(_input__.readUInt64())
          case 200 =>
            __l1DcacheStoreMisses = Some(_input__.readUInt64())
          case 208 =>
            __l1DcachePrefetches = Some(_input__.readUInt64())
          case 216 =>
            __l1DcachePrefetchMisses = Some(_input__.readUInt64())
          case 224 =>
            __l1IcacheLoads = Some(_input__.readUInt64())
          case 232 =>
            __l1IcacheLoadMisses = Some(_input__.readUInt64())
          case 240 =>
            __l1IcachePrefetches = Some(_input__.readUInt64())
          case 248 =>
            __l1IcachePrefetchMisses = Some(_input__.readUInt64())
          case 256 =>
            __llcLoads = Some(_input__.readUInt64())
          case 264 =>
            __llcLoadMisses = Some(_input__.readUInt64())
          case 272 =>
            __llcStores = Some(_input__.readUInt64())
          case 280 =>
            __llcStoreMisses = Some(_input__.readUInt64())
          case 288 =>
            __llcPrefetches = Some(_input__.readUInt64())
          case 296 =>
            __llcPrefetchMisses = Some(_input__.readUInt64())
          case 304 =>
            __dtlbLoads = Some(_input__.readUInt64())
          case 312 =>
            __dtlbLoadMisses = Some(_input__.readUInt64())
          case 320 =>
            __dtlbStores = Some(_input__.readUInt64())
          case 328 =>
            __dtlbStoreMisses = Some(_input__.readUInt64())
          case 336 =>
            __dtlbPrefetches = Some(_input__.readUInt64())
          case 344 =>
            __dtlbPrefetchMisses = Some(_input__.readUInt64())
          case 352 =>
            __itlbLoads = Some(_input__.readUInt64())
          case 360 =>
            __itlbLoadMisses = Some(_input__.readUInt64())
          case 368 =>
            __branchLoads = Some(_input__.readUInt64())
          case 376 =>
            __branchLoadMisses = Some(_input__.readUInt64())
          case 384 =>
            __nodeLoads = Some(_input__.readUInt64())
          case 392 =>
            __nodeLoadMisses = Some(_input__.readUInt64())
          case 400 =>
            __nodeStores = Some(_input__.readUInt64())
          case 408 =>
            __nodeStoreMisses = Some(_input__.readUInt64())
          case 416 =>
            __nodePrefetches = Some(_input__.readUInt64())
          case 424 =>
            __nodePrefetchMisses = Some(_input__.readUInt64())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.PerfStatistics(
          timestamp = __timestamp,
          duration = __duration,
          cycles = __cycles,
          stalledCyclesFrontend = __stalledCyclesFrontend,
          stalledCyclesBackend = __stalledCyclesBackend,
          instructions = __instructions,
          cacheReferences = __cacheReferences,
          cacheMisses = __cacheMisses,
          branches = __branches,
          branchMisses = __branchMisses,
          busCycles = __busCycles,
          refCycles = __refCycles,
          cpuClock = __cpuClock,
          taskClock = __taskClock,
          pageFaults = __pageFaults,
          minorFaults = __minorFaults,
          majorFaults = __majorFaults,
          contextSwitches = __contextSwitches,
          cpuMigrations = __cpuMigrations,
          alignmentFaults = __alignmentFaults,
          emulationFaults = __emulationFaults,
          l1DcacheLoads = __l1DcacheLoads,
          l1DcacheLoadMisses = __l1DcacheLoadMisses,
          l1DcacheStores = __l1DcacheStores,
          l1DcacheStoreMisses = __l1DcacheStoreMisses,
          l1DcachePrefetches = __l1DcachePrefetches,
          l1DcachePrefetchMisses = __l1DcachePrefetchMisses,
          l1IcacheLoads = __l1IcacheLoads,
          l1IcacheLoadMisses = __l1IcacheLoadMisses,
          l1IcachePrefetches = __l1IcachePrefetches,
          l1IcachePrefetchMisses = __l1IcachePrefetchMisses,
          llcLoads = __llcLoads,
          llcLoadMisses = __llcLoadMisses,
          llcStores = __llcStores,
          llcStoreMisses = __llcStoreMisses,
          llcPrefetches = __llcPrefetches,
          llcPrefetchMisses = __llcPrefetchMisses,
          dtlbLoads = __dtlbLoads,
          dtlbLoadMisses = __dtlbLoadMisses,
          dtlbStores = __dtlbStores,
          dtlbStoreMisses = __dtlbStoreMisses,
          dtlbPrefetches = __dtlbPrefetches,
          dtlbPrefetchMisses = __dtlbPrefetchMisses,
          itlbLoads = __itlbLoads,
          itlbLoadMisses = __itlbLoadMisses,
          branchLoads = __branchLoads,
          branchLoadMisses = __branchLoadMisses,
          nodeLoads = __nodeLoads,
          nodeLoadMisses = __nodeLoadMisses,
          nodeStores = __nodeStores,
          nodeStoreMisses = __nodeStoreMisses,
          nodePrefetches = __nodePrefetches,
          nodePrefetchMisses = __nodePrefetchMisses
      )
    }
    def withTimestamp(__v: Double): PerfStatistics = copy(timestamp = __v)
    def withDuration(__v: Double): PerfStatistics = copy(duration = __v)
    def getCycles: Long = cycles.getOrElse(0L)
    def clearCycles: PerfStatistics = copy(cycles = None)
    def withCycles(__v: Long): PerfStatistics = copy(cycles = Some(__v))
    def getStalledCyclesFrontend: Long = stalledCyclesFrontend.getOrElse(0L)
    def clearStalledCyclesFrontend: PerfStatistics = copy(stalledCyclesFrontend = None)
    def withStalledCyclesFrontend(__v: Long): PerfStatistics = copy(stalledCyclesFrontend = Some(__v))
    def getStalledCyclesBackend: Long = stalledCyclesBackend.getOrElse(0L)
    def clearStalledCyclesBackend: PerfStatistics = copy(stalledCyclesBackend = None)
    def withStalledCyclesBackend(__v: Long): PerfStatistics = copy(stalledCyclesBackend = Some(__v))
    def getInstructions: Long = instructions.getOrElse(0L)
    def clearInstructions: PerfStatistics = copy(instructions = None)
    def withInstructions(__v: Long): PerfStatistics = copy(instructions = Some(__v))
    def getCacheReferences: Long = cacheReferences.getOrElse(0L)
    def clearCacheReferences: PerfStatistics = copy(cacheReferences = None)
    def withCacheReferences(__v: Long): PerfStatistics = copy(cacheReferences = Some(__v))
    def getCacheMisses: Long = cacheMisses.getOrElse(0L)
    def clearCacheMisses: PerfStatistics = copy(cacheMisses = None)
    def withCacheMisses(__v: Long): PerfStatistics = copy(cacheMisses = Some(__v))
    def getBranches: Long = branches.getOrElse(0L)
    def clearBranches: PerfStatistics = copy(branches = None)
    def withBranches(__v: Long): PerfStatistics = copy(branches = Some(__v))
    def getBranchMisses: Long = branchMisses.getOrElse(0L)
    def clearBranchMisses: PerfStatistics = copy(branchMisses = None)
    def withBranchMisses(__v: Long): PerfStatistics = copy(branchMisses = Some(__v))
    def getBusCycles: Long = busCycles.getOrElse(0L)
    def clearBusCycles: PerfStatistics = copy(busCycles = None)
    def withBusCycles(__v: Long): PerfStatistics = copy(busCycles = Some(__v))
    def getRefCycles: Long = refCycles.getOrElse(0L)
    def clearRefCycles: PerfStatistics = copy(refCycles = None)
    def withRefCycles(__v: Long): PerfStatistics = copy(refCycles = Some(__v))
    def getCpuClock: Double = cpuClock.getOrElse(0.0)
    def clearCpuClock: PerfStatistics = copy(cpuClock = None)
    def withCpuClock(__v: Double): PerfStatistics = copy(cpuClock = Some(__v))
    def getTaskClock: Double = taskClock.getOrElse(0.0)
    def clearTaskClock: PerfStatistics = copy(taskClock = None)
    def withTaskClock(__v: Double): PerfStatistics = copy(taskClock = Some(__v))
    def getPageFaults: Long = pageFaults.getOrElse(0L)
    def clearPageFaults: PerfStatistics = copy(pageFaults = None)
    def withPageFaults(__v: Long): PerfStatistics = copy(pageFaults = Some(__v))
    def getMinorFaults: Long = minorFaults.getOrElse(0L)
    def clearMinorFaults: PerfStatistics = copy(minorFaults = None)
    def withMinorFaults(__v: Long): PerfStatistics = copy(minorFaults = Some(__v))
    def getMajorFaults: Long = majorFaults.getOrElse(0L)
    def clearMajorFaults: PerfStatistics = copy(majorFaults = None)
    def withMajorFaults(__v: Long): PerfStatistics = copy(majorFaults = Some(__v))
    def getContextSwitches: Long = contextSwitches.getOrElse(0L)
    def clearContextSwitches: PerfStatistics = copy(contextSwitches = None)
    def withContextSwitches(__v: Long): PerfStatistics = copy(contextSwitches = Some(__v))
    def getCpuMigrations: Long = cpuMigrations.getOrElse(0L)
    def clearCpuMigrations: PerfStatistics = copy(cpuMigrations = None)
    def withCpuMigrations(__v: Long): PerfStatistics = copy(cpuMigrations = Some(__v))
    def getAlignmentFaults: Long = alignmentFaults.getOrElse(0L)
    def clearAlignmentFaults: PerfStatistics = copy(alignmentFaults = None)
    def withAlignmentFaults(__v: Long): PerfStatistics = copy(alignmentFaults = Some(__v))
    def getEmulationFaults: Long = emulationFaults.getOrElse(0L)
    def clearEmulationFaults: PerfStatistics = copy(emulationFaults = None)
    def withEmulationFaults(__v: Long): PerfStatistics = copy(emulationFaults = Some(__v))
    def getL1DcacheLoads: Long = l1DcacheLoads.getOrElse(0L)
    def clearL1DcacheLoads: PerfStatistics = copy(l1DcacheLoads = None)
    def withL1DcacheLoads(__v: Long): PerfStatistics = copy(l1DcacheLoads = Some(__v))
    def getL1DcacheLoadMisses: Long = l1DcacheLoadMisses.getOrElse(0L)
    def clearL1DcacheLoadMisses: PerfStatistics = copy(l1DcacheLoadMisses = None)
    def withL1DcacheLoadMisses(__v: Long): PerfStatistics = copy(l1DcacheLoadMisses = Some(__v))
    def getL1DcacheStores: Long = l1DcacheStores.getOrElse(0L)
    def clearL1DcacheStores: PerfStatistics = copy(l1DcacheStores = None)
    def withL1DcacheStores(__v: Long): PerfStatistics = copy(l1DcacheStores = Some(__v))
    def getL1DcacheStoreMisses: Long = l1DcacheStoreMisses.getOrElse(0L)
    def clearL1DcacheStoreMisses: PerfStatistics = copy(l1DcacheStoreMisses = None)
    def withL1DcacheStoreMisses(__v: Long): PerfStatistics = copy(l1DcacheStoreMisses = Some(__v))
    def getL1DcachePrefetches: Long = l1DcachePrefetches.getOrElse(0L)
    def clearL1DcachePrefetches: PerfStatistics = copy(l1DcachePrefetches = None)
    def withL1DcachePrefetches(__v: Long): PerfStatistics = copy(l1DcachePrefetches = Some(__v))
    def getL1DcachePrefetchMisses: Long = l1DcachePrefetchMisses.getOrElse(0L)
    def clearL1DcachePrefetchMisses: PerfStatistics = copy(l1DcachePrefetchMisses = None)
    def withL1DcachePrefetchMisses(__v: Long): PerfStatistics = copy(l1DcachePrefetchMisses = Some(__v))
    def getL1IcacheLoads: Long = l1IcacheLoads.getOrElse(0L)
    def clearL1IcacheLoads: PerfStatistics = copy(l1IcacheLoads = None)
    def withL1IcacheLoads(__v: Long): PerfStatistics = copy(l1IcacheLoads = Some(__v))
    def getL1IcacheLoadMisses: Long = l1IcacheLoadMisses.getOrElse(0L)
    def clearL1IcacheLoadMisses: PerfStatistics = copy(l1IcacheLoadMisses = None)
    def withL1IcacheLoadMisses(__v: Long): PerfStatistics = copy(l1IcacheLoadMisses = Some(__v))
    def getL1IcachePrefetches: Long = l1IcachePrefetches.getOrElse(0L)
    def clearL1IcachePrefetches: PerfStatistics = copy(l1IcachePrefetches = None)
    def withL1IcachePrefetches(__v: Long): PerfStatistics = copy(l1IcachePrefetches = Some(__v))
    def getL1IcachePrefetchMisses: Long = l1IcachePrefetchMisses.getOrElse(0L)
    def clearL1IcachePrefetchMisses: PerfStatistics = copy(l1IcachePrefetchMisses = None)
    def withL1IcachePrefetchMisses(__v: Long): PerfStatistics = copy(l1IcachePrefetchMisses = Some(__v))
    def getLlcLoads: Long = llcLoads.getOrElse(0L)
    def clearLlcLoads: PerfStatistics = copy(llcLoads = None)
    def withLlcLoads(__v: Long): PerfStatistics = copy(llcLoads = Some(__v))
    def getLlcLoadMisses: Long = llcLoadMisses.getOrElse(0L)
    def clearLlcLoadMisses: PerfStatistics = copy(llcLoadMisses = None)
    def withLlcLoadMisses(__v: Long): PerfStatistics = copy(llcLoadMisses = Some(__v))
    def getLlcStores: Long = llcStores.getOrElse(0L)
    def clearLlcStores: PerfStatistics = copy(llcStores = None)
    def withLlcStores(__v: Long): PerfStatistics = copy(llcStores = Some(__v))
    def getLlcStoreMisses: Long = llcStoreMisses.getOrElse(0L)
    def clearLlcStoreMisses: PerfStatistics = copy(llcStoreMisses = None)
    def withLlcStoreMisses(__v: Long): PerfStatistics = copy(llcStoreMisses = Some(__v))
    def getLlcPrefetches: Long = llcPrefetches.getOrElse(0L)
    def clearLlcPrefetches: PerfStatistics = copy(llcPrefetches = None)
    def withLlcPrefetches(__v: Long): PerfStatistics = copy(llcPrefetches = Some(__v))
    def getLlcPrefetchMisses: Long = llcPrefetchMisses.getOrElse(0L)
    def clearLlcPrefetchMisses: PerfStatistics = copy(llcPrefetchMisses = None)
    def withLlcPrefetchMisses(__v: Long): PerfStatistics = copy(llcPrefetchMisses = Some(__v))
    def getDtlbLoads: Long = dtlbLoads.getOrElse(0L)
    def clearDtlbLoads: PerfStatistics = copy(dtlbLoads = None)
    def withDtlbLoads(__v: Long): PerfStatistics = copy(dtlbLoads = Some(__v))
    def getDtlbLoadMisses: Long = dtlbLoadMisses.getOrElse(0L)
    def clearDtlbLoadMisses: PerfStatistics = copy(dtlbLoadMisses = None)
    def withDtlbLoadMisses(__v: Long): PerfStatistics = copy(dtlbLoadMisses = Some(__v))
    def getDtlbStores: Long = dtlbStores.getOrElse(0L)
    def clearDtlbStores: PerfStatistics = copy(dtlbStores = None)
    def withDtlbStores(__v: Long): PerfStatistics = copy(dtlbStores = Some(__v))
    def getDtlbStoreMisses: Long = dtlbStoreMisses.getOrElse(0L)
    def clearDtlbStoreMisses: PerfStatistics = copy(dtlbStoreMisses = None)
    def withDtlbStoreMisses(__v: Long): PerfStatistics = copy(dtlbStoreMisses = Some(__v))
    def getDtlbPrefetches: Long = dtlbPrefetches.getOrElse(0L)
    def clearDtlbPrefetches: PerfStatistics = copy(dtlbPrefetches = None)
    def withDtlbPrefetches(__v: Long): PerfStatistics = copy(dtlbPrefetches = Some(__v))
    def getDtlbPrefetchMisses: Long = dtlbPrefetchMisses.getOrElse(0L)
    def clearDtlbPrefetchMisses: PerfStatistics = copy(dtlbPrefetchMisses = None)
    def withDtlbPrefetchMisses(__v: Long): PerfStatistics = copy(dtlbPrefetchMisses = Some(__v))
    def getItlbLoads: Long = itlbLoads.getOrElse(0L)
    def clearItlbLoads: PerfStatistics = copy(itlbLoads = None)
    def withItlbLoads(__v: Long): PerfStatistics = copy(itlbLoads = Some(__v))
    def getItlbLoadMisses: Long = itlbLoadMisses.getOrElse(0L)
    def clearItlbLoadMisses: PerfStatistics = copy(itlbLoadMisses = None)
    def withItlbLoadMisses(__v: Long): PerfStatistics = copy(itlbLoadMisses = Some(__v))
    def getBranchLoads: Long = branchLoads.getOrElse(0L)
    def clearBranchLoads: PerfStatistics = copy(branchLoads = None)
    def withBranchLoads(__v: Long): PerfStatistics = copy(branchLoads = Some(__v))
    def getBranchLoadMisses: Long = branchLoadMisses.getOrElse(0L)
    def clearBranchLoadMisses: PerfStatistics = copy(branchLoadMisses = None)
    def withBranchLoadMisses(__v: Long): PerfStatistics = copy(branchLoadMisses = Some(__v))
    def getNodeLoads: Long = nodeLoads.getOrElse(0L)
    def clearNodeLoads: PerfStatistics = copy(nodeLoads = None)
    def withNodeLoads(__v: Long): PerfStatistics = copy(nodeLoads = Some(__v))
    def getNodeLoadMisses: Long = nodeLoadMisses.getOrElse(0L)
    def clearNodeLoadMisses: PerfStatistics = copy(nodeLoadMisses = None)
    def withNodeLoadMisses(__v: Long): PerfStatistics = copy(nodeLoadMisses = Some(__v))
    def getNodeStores: Long = nodeStores.getOrElse(0L)
    def clearNodeStores: PerfStatistics = copy(nodeStores = None)
    def withNodeStores(__v: Long): PerfStatistics = copy(nodeStores = Some(__v))
    def getNodeStoreMisses: Long = nodeStoreMisses.getOrElse(0L)
    def clearNodeStoreMisses: PerfStatistics = copy(nodeStoreMisses = None)
    def withNodeStoreMisses(__v: Long): PerfStatistics = copy(nodeStoreMisses = Some(__v))
    def getNodePrefetches: Long = nodePrefetches.getOrElse(0L)
    def clearNodePrefetches: PerfStatistics = copy(nodePrefetches = None)
    def withNodePrefetches(__v: Long): PerfStatistics = copy(nodePrefetches = Some(__v))
    def getNodePrefetchMisses: Long = nodePrefetchMisses.getOrElse(0L)
    def clearNodePrefetchMisses: PerfStatistics = copy(nodePrefetchMisses = None)
    def withNodePrefetchMisses(__v: Long): PerfStatistics = copy(nodePrefetchMisses = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => timestamp
        case 2 => duration
        case 3 => cycles.orNull
        case 4 => stalledCyclesFrontend.orNull
        case 5 => stalledCyclesBackend.orNull
        case 6 => instructions.orNull
        case 7 => cacheReferences.orNull
        case 8 => cacheMisses.orNull
        case 9 => branches.orNull
        case 10 => branchMisses.orNull
        case 11 => busCycles.orNull
        case 12 => refCycles.orNull
        case 13 => cpuClock.orNull
        case 14 => taskClock.orNull
        case 15 => pageFaults.orNull
        case 16 => minorFaults.orNull
        case 17 => majorFaults.orNull
        case 18 => contextSwitches.orNull
        case 19 => cpuMigrations.orNull
        case 20 => alignmentFaults.orNull
        case 21 => emulationFaults.orNull
        case 22 => l1DcacheLoads.orNull
        case 23 => l1DcacheLoadMisses.orNull
        case 24 => l1DcacheStores.orNull
        case 25 => l1DcacheStoreMisses.orNull
        case 26 => l1DcachePrefetches.orNull
        case 27 => l1DcachePrefetchMisses.orNull
        case 28 => l1IcacheLoads.orNull
        case 29 => l1IcacheLoadMisses.orNull
        case 30 => l1IcachePrefetches.orNull
        case 31 => l1IcachePrefetchMisses.orNull
        case 32 => llcLoads.orNull
        case 33 => llcLoadMisses.orNull
        case 34 => llcStores.orNull
        case 35 => llcStoreMisses.orNull
        case 36 => llcPrefetches.orNull
        case 37 => llcPrefetchMisses.orNull
        case 38 => dtlbLoads.orNull
        case 39 => dtlbLoadMisses.orNull
        case 40 => dtlbStores.orNull
        case 41 => dtlbStoreMisses.orNull
        case 42 => dtlbPrefetches.orNull
        case 43 => dtlbPrefetchMisses.orNull
        case 44 => itlbLoads.orNull
        case 45 => itlbLoadMisses.orNull
        case 46 => branchLoads.orNull
        case 47 => branchLoadMisses.orNull
        case 48 => nodeLoads.orNull
        case 49 => nodeLoadMisses.orNull
        case 50 => nodeStores.orNull
        case 51 => nodeStoreMisses.orNull
        case 52 => nodePrefetches.orNull
        case 53 => nodePrefetchMisses.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PDouble(timestamp)
        case 2 => _root_.scalapb.descriptors.PDouble(duration)
        case 3 => cycles.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => stalledCyclesFrontend.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => stalledCyclesBackend.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => instructions.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => cacheReferences.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => cacheMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => branches.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => branchMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => busCycles.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => refCycles.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => cpuClock.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => taskClock.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => pageFaults.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => minorFaults.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => majorFaults.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => contextSwitches.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => cpuMigrations.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => alignmentFaults.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => emulationFaults.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => l1DcacheLoads.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => l1DcacheLoadMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 24 => l1DcacheStores.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 25 => l1DcacheStoreMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 26 => l1DcachePrefetches.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 27 => l1DcachePrefetchMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 28 => l1IcacheLoads.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 29 => l1IcacheLoadMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 30 => l1IcachePrefetches.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 31 => l1IcachePrefetchMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 32 => llcLoads.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 33 => llcLoadMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 34 => llcStores.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 35 => llcStoreMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 36 => llcPrefetches.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 37 => llcPrefetchMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 38 => dtlbLoads.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 39 => dtlbLoadMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 40 => dtlbStores.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 41 => dtlbStoreMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 42 => dtlbPrefetches.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 43 => dtlbPrefetchMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 44 => itlbLoads.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 45 => itlbLoadMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 46 => branchLoads.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 47 => branchLoadMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 48 => nodeLoads.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 49 => nodeLoadMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 50 => nodeStores.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 51 => nodeStoreMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 52 => nodePrefetches.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 53 => nodePrefetchMisses.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.PerfStatistics
}

object PerfStatistics extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.PerfStatistics] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.PerfStatistics] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.PerfStatistics = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.PerfStatistics(
      __fieldsMap(__fields.get(0)).asInstanceOf[Double],
      __fieldsMap(__fields.get(1)).asInstanceOf[Double],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(19)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(20)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(21)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(22)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(23)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(24)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(25)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(26)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(27)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(28)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(29)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(30)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(31)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(32)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(33)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(34)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(35)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(36)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(37)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(38)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(39)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(40)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(41)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(42)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(43)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(44)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(45)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(46)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(47)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(48)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(49)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(50)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(51)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(52)).asInstanceOf[scala.Option[Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.PerfStatistics] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.PerfStatistics(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Double],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Double],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(26).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(27).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(28).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(29).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(31).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(32).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(33).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(34).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(35).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(36).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(37).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(38).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(39).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(40).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(41).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(42).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(43).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(44).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(45).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(46).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(47).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(48).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(49).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(50).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(51).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(52).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(53).get).flatMap(_.as[scala.Option[Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(35)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(35)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.PerfStatistics(
    timestamp = 0.0,
    duration = 0.0
  )
  implicit class PerfStatisticsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.PerfStatistics]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.PerfStatistics](_l) {
    def timestamp: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def duration: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.duration)((c_, f_) => c_.copy(duration = f_))
    def cycles: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getCycles)((c_, f_) => c_.copy(cycles = Some(f_)))
    def optionalCycles: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.cycles)((c_, f_) => c_.copy(cycles = f_))
    def stalledCyclesFrontend: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getStalledCyclesFrontend)((c_, f_) => c_.copy(stalledCyclesFrontend = Some(f_)))
    def optionalStalledCyclesFrontend: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.stalledCyclesFrontend)((c_, f_) => c_.copy(stalledCyclesFrontend = f_))
    def stalledCyclesBackend: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getStalledCyclesBackend)((c_, f_) => c_.copy(stalledCyclesBackend = Some(f_)))
    def optionalStalledCyclesBackend: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.stalledCyclesBackend)((c_, f_) => c_.copy(stalledCyclesBackend = f_))
    def instructions: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInstructions)((c_, f_) => c_.copy(instructions = Some(f_)))
    def optionalInstructions: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.instructions)((c_, f_) => c_.copy(instructions = f_))
    def cacheReferences: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getCacheReferences)((c_, f_) => c_.copy(cacheReferences = Some(f_)))
    def optionalCacheReferences: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.cacheReferences)((c_, f_) => c_.copy(cacheReferences = f_))
    def cacheMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getCacheMisses)((c_, f_) => c_.copy(cacheMisses = Some(f_)))
    def optionalCacheMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.cacheMisses)((c_, f_) => c_.copy(cacheMisses = f_))
    def branches: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getBranches)((c_, f_) => c_.copy(branches = Some(f_)))
    def optionalBranches: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.branches)((c_, f_) => c_.copy(branches = f_))
    def branchMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getBranchMisses)((c_, f_) => c_.copy(branchMisses = Some(f_)))
    def optionalBranchMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.branchMisses)((c_, f_) => c_.copy(branchMisses = f_))
    def busCycles: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getBusCycles)((c_, f_) => c_.copy(busCycles = Some(f_)))
    def optionalBusCycles: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.busCycles)((c_, f_) => c_.copy(busCycles = f_))
    def refCycles: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getRefCycles)((c_, f_) => c_.copy(refCycles = Some(f_)))
    def optionalRefCycles: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.refCycles)((c_, f_) => c_.copy(refCycles = f_))
    def cpuClock: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getCpuClock)((c_, f_) => c_.copy(cpuClock = Some(f_)))
    def optionalCpuClock: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.cpuClock)((c_, f_) => c_.copy(cpuClock = f_))
    def taskClock: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getTaskClock)((c_, f_) => c_.copy(taskClock = Some(f_)))
    def optionalTaskClock: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.taskClock)((c_, f_) => c_.copy(taskClock = f_))
    def pageFaults: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getPageFaults)((c_, f_) => c_.copy(pageFaults = Some(f_)))
    def optionalPageFaults: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.pageFaults)((c_, f_) => c_.copy(pageFaults = f_))
    def minorFaults: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMinorFaults)((c_, f_) => c_.copy(minorFaults = Some(f_)))
    def optionalMinorFaults: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.minorFaults)((c_, f_) => c_.copy(minorFaults = f_))
    def majorFaults: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMajorFaults)((c_, f_) => c_.copy(majorFaults = Some(f_)))
    def optionalMajorFaults: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.majorFaults)((c_, f_) => c_.copy(majorFaults = f_))
    def contextSwitches: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getContextSwitches)((c_, f_) => c_.copy(contextSwitches = Some(f_)))
    def optionalContextSwitches: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.contextSwitches)((c_, f_) => c_.copy(contextSwitches = f_))
    def cpuMigrations: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getCpuMigrations)((c_, f_) => c_.copy(cpuMigrations = Some(f_)))
    def optionalCpuMigrations: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.cpuMigrations)((c_, f_) => c_.copy(cpuMigrations = f_))
    def alignmentFaults: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getAlignmentFaults)((c_, f_) => c_.copy(alignmentFaults = Some(f_)))
    def optionalAlignmentFaults: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.alignmentFaults)((c_, f_) => c_.copy(alignmentFaults = f_))
    def emulationFaults: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getEmulationFaults)((c_, f_) => c_.copy(emulationFaults = Some(f_)))
    def optionalEmulationFaults: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.emulationFaults)((c_, f_) => c_.copy(emulationFaults = f_))
    def l1DcacheLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getL1DcacheLoads)((c_, f_) => c_.copy(l1DcacheLoads = Some(f_)))
    def optionalL1DcacheLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.l1DcacheLoads)((c_, f_) => c_.copy(l1DcacheLoads = f_))
    def l1DcacheLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getL1DcacheLoadMisses)((c_, f_) => c_.copy(l1DcacheLoadMisses = Some(f_)))
    def optionalL1DcacheLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.l1DcacheLoadMisses)((c_, f_) => c_.copy(l1DcacheLoadMisses = f_))
    def l1DcacheStores: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getL1DcacheStores)((c_, f_) => c_.copy(l1DcacheStores = Some(f_)))
    def optionalL1DcacheStores: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.l1DcacheStores)((c_, f_) => c_.copy(l1DcacheStores = f_))
    def l1DcacheStoreMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getL1DcacheStoreMisses)((c_, f_) => c_.copy(l1DcacheStoreMisses = Some(f_)))
    def optionalL1DcacheStoreMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.l1DcacheStoreMisses)((c_, f_) => c_.copy(l1DcacheStoreMisses = f_))
    def l1DcachePrefetches: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getL1DcachePrefetches)((c_, f_) => c_.copy(l1DcachePrefetches = Some(f_)))
    def optionalL1DcachePrefetches: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.l1DcachePrefetches)((c_, f_) => c_.copy(l1DcachePrefetches = f_))
    def l1DcachePrefetchMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getL1DcachePrefetchMisses)((c_, f_) => c_.copy(l1DcachePrefetchMisses = Some(f_)))
    def optionalL1DcachePrefetchMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.l1DcachePrefetchMisses)((c_, f_) => c_.copy(l1DcachePrefetchMisses = f_))
    def l1IcacheLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getL1IcacheLoads)((c_, f_) => c_.copy(l1IcacheLoads = Some(f_)))
    def optionalL1IcacheLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.l1IcacheLoads)((c_, f_) => c_.copy(l1IcacheLoads = f_))
    def l1IcacheLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getL1IcacheLoadMisses)((c_, f_) => c_.copy(l1IcacheLoadMisses = Some(f_)))
    def optionalL1IcacheLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.l1IcacheLoadMisses)((c_, f_) => c_.copy(l1IcacheLoadMisses = f_))
    def l1IcachePrefetches: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getL1IcachePrefetches)((c_, f_) => c_.copy(l1IcachePrefetches = Some(f_)))
    def optionalL1IcachePrefetches: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.l1IcachePrefetches)((c_, f_) => c_.copy(l1IcachePrefetches = f_))
    def l1IcachePrefetchMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getL1IcachePrefetchMisses)((c_, f_) => c_.copy(l1IcachePrefetchMisses = Some(f_)))
    def optionalL1IcachePrefetchMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.l1IcachePrefetchMisses)((c_, f_) => c_.copy(l1IcachePrefetchMisses = f_))
    def llcLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getLlcLoads)((c_, f_) => c_.copy(llcLoads = Some(f_)))
    def optionalLlcLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.llcLoads)((c_, f_) => c_.copy(llcLoads = f_))
    def llcLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getLlcLoadMisses)((c_, f_) => c_.copy(llcLoadMisses = Some(f_)))
    def optionalLlcLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.llcLoadMisses)((c_, f_) => c_.copy(llcLoadMisses = f_))
    def llcStores: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getLlcStores)((c_, f_) => c_.copy(llcStores = Some(f_)))
    def optionalLlcStores: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.llcStores)((c_, f_) => c_.copy(llcStores = f_))
    def llcStoreMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getLlcStoreMisses)((c_, f_) => c_.copy(llcStoreMisses = Some(f_)))
    def optionalLlcStoreMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.llcStoreMisses)((c_, f_) => c_.copy(llcStoreMisses = f_))
    def llcPrefetches: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getLlcPrefetches)((c_, f_) => c_.copy(llcPrefetches = Some(f_)))
    def optionalLlcPrefetches: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.llcPrefetches)((c_, f_) => c_.copy(llcPrefetches = f_))
    def llcPrefetchMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getLlcPrefetchMisses)((c_, f_) => c_.copy(llcPrefetchMisses = Some(f_)))
    def optionalLlcPrefetchMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.llcPrefetchMisses)((c_, f_) => c_.copy(llcPrefetchMisses = f_))
    def dtlbLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDtlbLoads)((c_, f_) => c_.copy(dtlbLoads = Some(f_)))
    def optionalDtlbLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.dtlbLoads)((c_, f_) => c_.copy(dtlbLoads = f_))
    def dtlbLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDtlbLoadMisses)((c_, f_) => c_.copy(dtlbLoadMisses = Some(f_)))
    def optionalDtlbLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.dtlbLoadMisses)((c_, f_) => c_.copy(dtlbLoadMisses = f_))
    def dtlbStores: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDtlbStores)((c_, f_) => c_.copy(dtlbStores = Some(f_)))
    def optionalDtlbStores: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.dtlbStores)((c_, f_) => c_.copy(dtlbStores = f_))
    def dtlbStoreMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDtlbStoreMisses)((c_, f_) => c_.copy(dtlbStoreMisses = Some(f_)))
    def optionalDtlbStoreMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.dtlbStoreMisses)((c_, f_) => c_.copy(dtlbStoreMisses = f_))
    def dtlbPrefetches: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDtlbPrefetches)((c_, f_) => c_.copy(dtlbPrefetches = Some(f_)))
    def optionalDtlbPrefetches: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.dtlbPrefetches)((c_, f_) => c_.copy(dtlbPrefetches = f_))
    def dtlbPrefetchMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDtlbPrefetchMisses)((c_, f_) => c_.copy(dtlbPrefetchMisses = Some(f_)))
    def optionalDtlbPrefetchMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.dtlbPrefetchMisses)((c_, f_) => c_.copy(dtlbPrefetchMisses = f_))
    def itlbLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getItlbLoads)((c_, f_) => c_.copy(itlbLoads = Some(f_)))
    def optionalItlbLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.itlbLoads)((c_, f_) => c_.copy(itlbLoads = f_))
    def itlbLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getItlbLoadMisses)((c_, f_) => c_.copy(itlbLoadMisses = Some(f_)))
    def optionalItlbLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.itlbLoadMisses)((c_, f_) => c_.copy(itlbLoadMisses = f_))
    def branchLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getBranchLoads)((c_, f_) => c_.copy(branchLoads = Some(f_)))
    def optionalBranchLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.branchLoads)((c_, f_) => c_.copy(branchLoads = f_))
    def branchLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getBranchLoadMisses)((c_, f_) => c_.copy(branchLoadMisses = Some(f_)))
    def optionalBranchLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.branchLoadMisses)((c_, f_) => c_.copy(branchLoadMisses = f_))
    def nodeLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNodeLoads)((c_, f_) => c_.copy(nodeLoads = Some(f_)))
    def optionalNodeLoads: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.nodeLoads)((c_, f_) => c_.copy(nodeLoads = f_))
    def nodeLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNodeLoadMisses)((c_, f_) => c_.copy(nodeLoadMisses = Some(f_)))
    def optionalNodeLoadMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.nodeLoadMisses)((c_, f_) => c_.copy(nodeLoadMisses = f_))
    def nodeStores: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNodeStores)((c_, f_) => c_.copy(nodeStores = Some(f_)))
    def optionalNodeStores: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.nodeStores)((c_, f_) => c_.copy(nodeStores = f_))
    def nodeStoreMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNodeStoreMisses)((c_, f_) => c_.copy(nodeStoreMisses = Some(f_)))
    def optionalNodeStoreMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.nodeStoreMisses)((c_, f_) => c_.copy(nodeStoreMisses = f_))
    def nodePrefetches: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNodePrefetches)((c_, f_) => c_.copy(nodePrefetches = Some(f_)))
    def optionalNodePrefetches: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.nodePrefetches)((c_, f_) => c_.copy(nodePrefetches = f_))
    def nodePrefetchMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNodePrefetchMisses)((c_, f_) => c_.copy(nodePrefetchMisses = Some(f_)))
    def optionalNodePrefetchMisses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.nodePrefetchMisses)((c_, f_) => c_.copy(nodePrefetchMisses = f_))
  }
  final val TIMESTAMP_FIELD_NUMBER = 1
  final val DURATION_FIELD_NUMBER = 2
  final val CYCLES_FIELD_NUMBER = 3
  final val STALLED_CYCLES_FRONTEND_FIELD_NUMBER = 4
  final val STALLED_CYCLES_BACKEND_FIELD_NUMBER = 5
  final val INSTRUCTIONS_FIELD_NUMBER = 6
  final val CACHE_REFERENCES_FIELD_NUMBER = 7
  final val CACHE_MISSES_FIELD_NUMBER = 8
  final val BRANCHES_FIELD_NUMBER = 9
  final val BRANCH_MISSES_FIELD_NUMBER = 10
  final val BUS_CYCLES_FIELD_NUMBER = 11
  final val REF_CYCLES_FIELD_NUMBER = 12
  final val CPU_CLOCK_FIELD_NUMBER = 13
  final val TASK_CLOCK_FIELD_NUMBER = 14
  final val PAGE_FAULTS_FIELD_NUMBER = 15
  final val MINOR_FAULTS_FIELD_NUMBER = 16
  final val MAJOR_FAULTS_FIELD_NUMBER = 17
  final val CONTEXT_SWITCHES_FIELD_NUMBER = 18
  final val CPU_MIGRATIONS_FIELD_NUMBER = 19
  final val ALIGNMENT_FAULTS_FIELD_NUMBER = 20
  final val EMULATION_FAULTS_FIELD_NUMBER = 21
  final val L1_DCACHE_LOADS_FIELD_NUMBER = 22
  final val L1_DCACHE_LOAD_MISSES_FIELD_NUMBER = 23
  final val L1_DCACHE_STORES_FIELD_NUMBER = 24
  final val L1_DCACHE_STORE_MISSES_FIELD_NUMBER = 25
  final val L1_DCACHE_PREFETCHES_FIELD_NUMBER = 26
  final val L1_DCACHE_PREFETCH_MISSES_FIELD_NUMBER = 27
  final val L1_ICACHE_LOADS_FIELD_NUMBER = 28
  final val L1_ICACHE_LOAD_MISSES_FIELD_NUMBER = 29
  final val L1_ICACHE_PREFETCHES_FIELD_NUMBER = 30
  final val L1_ICACHE_PREFETCH_MISSES_FIELD_NUMBER = 31
  final val LLC_LOADS_FIELD_NUMBER = 32
  final val LLC_LOAD_MISSES_FIELD_NUMBER = 33
  final val LLC_STORES_FIELD_NUMBER = 34
  final val LLC_STORE_MISSES_FIELD_NUMBER = 35
  final val LLC_PREFETCHES_FIELD_NUMBER = 36
  final val LLC_PREFETCH_MISSES_FIELD_NUMBER = 37
  final val DTLB_LOADS_FIELD_NUMBER = 38
  final val DTLB_LOAD_MISSES_FIELD_NUMBER = 39
  final val DTLB_STORES_FIELD_NUMBER = 40
  final val DTLB_STORE_MISSES_FIELD_NUMBER = 41
  final val DTLB_PREFETCHES_FIELD_NUMBER = 42
  final val DTLB_PREFETCH_MISSES_FIELD_NUMBER = 43
  final val ITLB_LOADS_FIELD_NUMBER = 44
  final val ITLB_LOAD_MISSES_FIELD_NUMBER = 45
  final val BRANCH_LOADS_FIELD_NUMBER = 46
  final val BRANCH_LOAD_MISSES_FIELD_NUMBER = 47
  final val NODE_LOADS_FIELD_NUMBER = 48
  final val NODE_LOAD_MISSES_FIELD_NUMBER = 49
  final val NODE_STORES_FIELD_NUMBER = 50
  final val NODE_STORE_MISSES_FIELD_NUMBER = 51
  final val NODE_PREFETCHES_FIELD_NUMBER = 52
  final val NODE_PREFETCH_MISSES_FIELD_NUMBER = 53
}
