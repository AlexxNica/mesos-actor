// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * A snapshot of resource usage statistics.
  *
  * @param timestamp
  *   Snapshot time, in seconds since the Epoch.
  * @param cpusUserTimeSecs
  *   CPU Usage Information:
  *   Total CPU time spent in user mode, and kernel mode.
  * @param cpusLimit
  *   Number of CPUs allocated.
  * @param cpusNrPeriods
  *   cpu.stat on process throttling (for contention issues).
  * @param memTotalBytes
  *   mem_total_bytes was added in 0.23.0 to represent the total memory
  *   of a process in RAM (as opposed to in Swap). This was previously
  *   reported as mem_rss_bytes, which was also changed in 0.23.0 to
  *   represent only the anonymous memory usage, to keep in sync with
  *   Linux kernel's (arguably erroneous) use of terminology.
  * @param memTotalMemswBytes
  *   Total memory + swap usage. This is set if swap is enabled.
  * @param memLimitBytes
  *   Hard memory limit for a container.
  * @param memSoftLimitBytes
  *   Soft memory limit for a container.
  * @param memFileBytes
  *   TODO(chzhcn) mem_file_bytes and mem_anon_bytes are deprecated in
  *   0.23.0 and will be removed in 0.24.0.
  * @param memCacheBytes
  *   mem_cache_bytes is added in 0.23.0 to represent page cache usage.
  * @param memRssBytes
  *   Since 0.23.0, mem_rss_bytes is changed to represent only
  *   anonymous memory usage. Note that neither its requiredness, type,
  *   name nor numeric tag has been changed.
  * @param memSwapBytes
  *   This is only set if swap is enabled.
  * @param memLowPressureCounter
  *   Number of occurrences of different levels of memory pressure
  *   events reported by memory cgroup. Pressure listening (re)starts
  *   with these values set to 0 when agent (re)starts. See
  *   https://www.kernel.org/doc/Documentation/cgroups/memory.txt for
  *   more details.
  * @param diskLimitBytes
  *   Disk Usage Information for executor working directory.
  * @param diskStatistics
  *   Per disk (resource) statistics.
  * @param perf
  *   Perf statistics.
  * @param netRxPackets
  *   Network Usage Information:
  * @param netTcpRttMicrosecsP50
  *   The kernel keeps track of RTT (round-trip time) for its TCP
  *   sockets. RTT is a way to tell the latency of a container.
  * @param netTrafficControlStatistics
  *   Network traffic flowing into or out of a container can be delayed
  *   or dropped due to congestion or policy inside and outside the
  *   container.
  * @param netSnmpStatistics
  *   Network SNMP statistics for each container.
  */
@SerialVersionUID(0L)
final case class ResourceStatistics(
    timestamp: Double,
    processes: scala.Option[Int] = None,
    threads: scala.Option[Int] = None,
    cpusUserTimeSecs: scala.Option[Double] = None,
    cpusSystemTimeSecs: scala.Option[Double] = None,
    cpusLimit: scala.Option[Double] = None,
    cpusNrPeriods: scala.Option[Int] = None,
    cpusNrThrottled: scala.Option[Int] = None,
    cpusThrottledTimeSecs: scala.Option[Double] = None,
    memTotalBytes: scala.Option[Long] = None,
    memTotalMemswBytes: scala.Option[Long] = None,
    memLimitBytes: scala.Option[Long] = None,
    memSoftLimitBytes: scala.Option[Long] = None,
    memFileBytes: scala.Option[Long] = None,
    memAnonBytes: scala.Option[Long] = None,
    memCacheBytes: scala.Option[Long] = None,
    memRssBytes: scala.Option[Long] = None,
    memMappedFileBytes: scala.Option[Long] = None,
    memSwapBytes: scala.Option[Long] = None,
    memUnevictableBytes: scala.Option[Long] = None,
    memLowPressureCounter: scala.Option[Long] = None,
    memMediumPressureCounter: scala.Option[Long] = None,
    memCriticalPressureCounter: scala.Option[Long] = None,
    diskLimitBytes: scala.Option[Long] = None,
    diskUsedBytes: scala.Option[Long] = None,
    diskStatistics: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.DiskStatistics] = _root_.scala.collection.Seq.empty,
    perf: scala.Option[org.apache.mesos.v1.mesos.PerfStatistics] = None,
    netRxPackets: scala.Option[Long] = None,
    netRxBytes: scala.Option[Long] = None,
    netRxErrors: scala.Option[Long] = None,
    netRxDropped: scala.Option[Long] = None,
    netTxPackets: scala.Option[Long] = None,
    netTxBytes: scala.Option[Long] = None,
    netTxErrors: scala.Option[Long] = None,
    netTxDropped: scala.Option[Long] = None,
    netTcpRttMicrosecsP50: scala.Option[Double] = None,
    netTcpRttMicrosecsP90: scala.Option[Double] = None,
    netTcpRttMicrosecsP95: scala.Option[Double] = None,
    netTcpRttMicrosecsP99: scala.Option[Double] = None,
    netTcpActiveConnections: scala.Option[Double] = None,
    netTcpTimeWaitConnections: scala.Option[Double] = None,
    netTrafficControlStatistics: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.TrafficControlStatistics] = _root_.scala.collection.Seq.empty,
    netSnmpStatistics: scala.Option[org.apache.mesos.v1.mesos.SNMPStatistics] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ResourceStatistics] with com.trueaccord.lenses.Updatable[ResourceStatistics] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, timestamp)
      if (processes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(30, processes.get) }
      if (threads.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(31, threads.get) }
      if (cpusUserTimeSecs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(2, cpusUserTimeSecs.get) }
      if (cpusSystemTimeSecs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(3, cpusSystemTimeSecs.get) }
      if (cpusLimit.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(4, cpusLimit.get) }
      if (cpusNrPeriods.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(7, cpusNrPeriods.get) }
      if (cpusNrThrottled.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(8, cpusNrThrottled.get) }
      if (cpusThrottledTimeSecs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(9, cpusThrottledTimeSecs.get) }
      if (memTotalBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(36, memTotalBytes.get) }
      if (memTotalMemswBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(37, memTotalMemswBytes.get) }
      if (memLimitBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(6, memLimitBytes.get) }
      if (memSoftLimitBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(38, memSoftLimitBytes.get) }
      if (memFileBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(10, memFileBytes.get) }
      if (memAnonBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(11, memAnonBytes.get) }
      if (memCacheBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(39, memCacheBytes.get) }
      if (memRssBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(5, memRssBytes.get) }
      if (memMappedFileBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(12, memMappedFileBytes.get) }
      if (memSwapBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(40, memSwapBytes.get) }
      if (memUnevictableBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(41, memUnevictableBytes.get) }
      if (memLowPressureCounter.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(32, memLowPressureCounter.get) }
      if (memMediumPressureCounter.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(33, memMediumPressureCounter.get) }
      if (memCriticalPressureCounter.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(34, memCriticalPressureCounter.get) }
      if (diskLimitBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(26, diskLimitBytes.get) }
      if (diskUsedBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(27, diskUsedBytes.get) }
      diskStatistics.foreach(diskStatistics => __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(diskStatistics.serializedSize) + diskStatistics.serializedSize)
      if (perf.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(perf.get.serializedSize) + perf.get.serializedSize }
      if (netRxPackets.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(14, netRxPackets.get) }
      if (netRxBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(15, netRxBytes.get) }
      if (netRxErrors.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(16, netRxErrors.get) }
      if (netRxDropped.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(17, netRxDropped.get) }
      if (netTxPackets.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(18, netTxPackets.get) }
      if (netTxBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(19, netTxBytes.get) }
      if (netTxErrors.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(20, netTxErrors.get) }
      if (netTxDropped.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(21, netTxDropped.get) }
      if (netTcpRttMicrosecsP50.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(22, netTcpRttMicrosecsP50.get) }
      if (netTcpRttMicrosecsP90.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(23, netTcpRttMicrosecsP90.get) }
      if (netTcpRttMicrosecsP95.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(24, netTcpRttMicrosecsP95.get) }
      if (netTcpRttMicrosecsP99.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(25, netTcpRttMicrosecsP99.get) }
      if (netTcpActiveConnections.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(28, netTcpActiveConnections.get) }
      if (netTcpTimeWaitConnections.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(29, netTcpTimeWaitConnections.get) }
      netTrafficControlStatistics.foreach(netTrafficControlStatistics => __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(netTrafficControlStatistics.serializedSize) + netTrafficControlStatistics.serializedSize)
      if (netSnmpStatistics.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(netSnmpStatistics.get.serializedSize) + netSnmpStatistics.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeDouble(1, timestamp)
      cpusUserTimeSecs.foreach { __v =>
        _output__.writeDouble(2, __v)
      };
      cpusSystemTimeSecs.foreach { __v =>
        _output__.writeDouble(3, __v)
      };
      cpusLimit.foreach { __v =>
        _output__.writeDouble(4, __v)
      };
      memRssBytes.foreach { __v =>
        _output__.writeUInt64(5, __v)
      };
      memLimitBytes.foreach { __v =>
        _output__.writeUInt64(6, __v)
      };
      cpusNrPeriods.foreach { __v =>
        _output__.writeUInt32(7, __v)
      };
      cpusNrThrottled.foreach { __v =>
        _output__.writeUInt32(8, __v)
      };
      cpusThrottledTimeSecs.foreach { __v =>
        _output__.writeDouble(9, __v)
      };
      memFileBytes.foreach { __v =>
        _output__.writeUInt64(10, __v)
      };
      memAnonBytes.foreach { __v =>
        _output__.writeUInt64(11, __v)
      };
      memMappedFileBytes.foreach { __v =>
        _output__.writeUInt64(12, __v)
      };
      perf.foreach { __v =>
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      netRxPackets.foreach { __v =>
        _output__.writeUInt64(14, __v)
      };
      netRxBytes.foreach { __v =>
        _output__.writeUInt64(15, __v)
      };
      netRxErrors.foreach { __v =>
        _output__.writeUInt64(16, __v)
      };
      netRxDropped.foreach { __v =>
        _output__.writeUInt64(17, __v)
      };
      netTxPackets.foreach { __v =>
        _output__.writeUInt64(18, __v)
      };
      netTxBytes.foreach { __v =>
        _output__.writeUInt64(19, __v)
      };
      netTxErrors.foreach { __v =>
        _output__.writeUInt64(20, __v)
      };
      netTxDropped.foreach { __v =>
        _output__.writeUInt64(21, __v)
      };
      netTcpRttMicrosecsP50.foreach { __v =>
        _output__.writeDouble(22, __v)
      };
      netTcpRttMicrosecsP90.foreach { __v =>
        _output__.writeDouble(23, __v)
      };
      netTcpRttMicrosecsP95.foreach { __v =>
        _output__.writeDouble(24, __v)
      };
      netTcpRttMicrosecsP99.foreach { __v =>
        _output__.writeDouble(25, __v)
      };
      diskLimitBytes.foreach { __v =>
        _output__.writeUInt64(26, __v)
      };
      diskUsedBytes.foreach { __v =>
        _output__.writeUInt64(27, __v)
      };
      netTcpActiveConnections.foreach { __v =>
        _output__.writeDouble(28, __v)
      };
      netTcpTimeWaitConnections.foreach { __v =>
        _output__.writeDouble(29, __v)
      };
      processes.foreach { __v =>
        _output__.writeUInt32(30, __v)
      };
      threads.foreach { __v =>
        _output__.writeUInt32(31, __v)
      };
      memLowPressureCounter.foreach { __v =>
        _output__.writeUInt64(32, __v)
      };
      memMediumPressureCounter.foreach { __v =>
        _output__.writeUInt64(33, __v)
      };
      memCriticalPressureCounter.foreach { __v =>
        _output__.writeUInt64(34, __v)
      };
      netTrafficControlStatistics.foreach { __v =>
        _output__.writeTag(35, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      memTotalBytes.foreach { __v =>
        _output__.writeUInt64(36, __v)
      };
      memTotalMemswBytes.foreach { __v =>
        _output__.writeUInt64(37, __v)
      };
      memSoftLimitBytes.foreach { __v =>
        _output__.writeUInt64(38, __v)
      };
      memCacheBytes.foreach { __v =>
        _output__.writeUInt64(39, __v)
      };
      memSwapBytes.foreach { __v =>
        _output__.writeUInt64(40, __v)
      };
      memUnevictableBytes.foreach { __v =>
        _output__.writeUInt64(41, __v)
      };
      netSnmpStatistics.foreach { __v =>
        _output__.writeTag(42, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      diskStatistics.foreach { __v =>
        _output__.writeTag(43, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.ResourceStatistics = {
      var __timestamp = this.timestamp
      var __processes = this.processes
      var __threads = this.threads
      var __cpusUserTimeSecs = this.cpusUserTimeSecs
      var __cpusSystemTimeSecs = this.cpusSystemTimeSecs
      var __cpusLimit = this.cpusLimit
      var __cpusNrPeriods = this.cpusNrPeriods
      var __cpusNrThrottled = this.cpusNrThrottled
      var __cpusThrottledTimeSecs = this.cpusThrottledTimeSecs
      var __memTotalBytes = this.memTotalBytes
      var __memTotalMemswBytes = this.memTotalMemswBytes
      var __memLimitBytes = this.memLimitBytes
      var __memSoftLimitBytes = this.memSoftLimitBytes
      var __memFileBytes = this.memFileBytes
      var __memAnonBytes = this.memAnonBytes
      var __memCacheBytes = this.memCacheBytes
      var __memRssBytes = this.memRssBytes
      var __memMappedFileBytes = this.memMappedFileBytes
      var __memSwapBytes = this.memSwapBytes
      var __memUnevictableBytes = this.memUnevictableBytes
      var __memLowPressureCounter = this.memLowPressureCounter
      var __memMediumPressureCounter = this.memMediumPressureCounter
      var __memCriticalPressureCounter = this.memCriticalPressureCounter
      var __diskLimitBytes = this.diskLimitBytes
      var __diskUsedBytes = this.diskUsedBytes
      val __diskStatistics = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.DiskStatistics] ++= this.diskStatistics)
      var __perf = this.perf
      var __netRxPackets = this.netRxPackets
      var __netRxBytes = this.netRxBytes
      var __netRxErrors = this.netRxErrors
      var __netRxDropped = this.netRxDropped
      var __netTxPackets = this.netTxPackets
      var __netTxBytes = this.netTxBytes
      var __netTxErrors = this.netTxErrors
      var __netTxDropped = this.netTxDropped
      var __netTcpRttMicrosecsP50 = this.netTcpRttMicrosecsP50
      var __netTcpRttMicrosecsP90 = this.netTcpRttMicrosecsP90
      var __netTcpRttMicrosecsP95 = this.netTcpRttMicrosecsP95
      var __netTcpRttMicrosecsP99 = this.netTcpRttMicrosecsP99
      var __netTcpActiveConnections = this.netTcpActiveConnections
      var __netTcpTimeWaitConnections = this.netTcpTimeWaitConnections
      val __netTrafficControlStatistics = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.TrafficControlStatistics] ++= this.netTrafficControlStatistics)
      var __netSnmpStatistics = this.netSnmpStatistics
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __timestamp = _input__.readDouble()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 240 =>
            __processes = Some(_input__.readUInt32())
          case 248 =>
            __threads = Some(_input__.readUInt32())
          case 17 =>
            __cpusUserTimeSecs = Some(_input__.readDouble())
          case 25 =>
            __cpusSystemTimeSecs = Some(_input__.readDouble())
          case 33 =>
            __cpusLimit = Some(_input__.readDouble())
          case 56 =>
            __cpusNrPeriods = Some(_input__.readUInt32())
          case 64 =>
            __cpusNrThrottled = Some(_input__.readUInt32())
          case 73 =>
            __cpusThrottledTimeSecs = Some(_input__.readDouble())
          case 288 =>
            __memTotalBytes = Some(_input__.readUInt64())
          case 296 =>
            __memTotalMemswBytes = Some(_input__.readUInt64())
          case 48 =>
            __memLimitBytes = Some(_input__.readUInt64())
          case 304 =>
            __memSoftLimitBytes = Some(_input__.readUInt64())
          case 80 =>
            __memFileBytes = Some(_input__.readUInt64())
          case 88 =>
            __memAnonBytes = Some(_input__.readUInt64())
          case 312 =>
            __memCacheBytes = Some(_input__.readUInt64())
          case 40 =>
            __memRssBytes = Some(_input__.readUInt64())
          case 96 =>
            __memMappedFileBytes = Some(_input__.readUInt64())
          case 320 =>
            __memSwapBytes = Some(_input__.readUInt64())
          case 328 =>
            __memUnevictableBytes = Some(_input__.readUInt64())
          case 256 =>
            __memLowPressureCounter = Some(_input__.readUInt64())
          case 264 =>
            __memMediumPressureCounter = Some(_input__.readUInt64())
          case 272 =>
            __memCriticalPressureCounter = Some(_input__.readUInt64())
          case 208 =>
            __diskLimitBytes = Some(_input__.readUInt64())
          case 216 =>
            __diskUsedBytes = Some(_input__.readUInt64())
          case 346 =>
            __diskStatistics += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.DiskStatistics.defaultInstance)
          case 106 =>
            __perf = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __perf.getOrElse(org.apache.mesos.v1.mesos.PerfStatistics.defaultInstance)))
          case 112 =>
            __netRxPackets = Some(_input__.readUInt64())
          case 120 =>
            __netRxBytes = Some(_input__.readUInt64())
          case 128 =>
            __netRxErrors = Some(_input__.readUInt64())
          case 136 =>
            __netRxDropped = Some(_input__.readUInt64())
          case 144 =>
            __netTxPackets = Some(_input__.readUInt64())
          case 152 =>
            __netTxBytes = Some(_input__.readUInt64())
          case 160 =>
            __netTxErrors = Some(_input__.readUInt64())
          case 168 =>
            __netTxDropped = Some(_input__.readUInt64())
          case 177 =>
            __netTcpRttMicrosecsP50 = Some(_input__.readDouble())
          case 185 =>
            __netTcpRttMicrosecsP90 = Some(_input__.readDouble())
          case 193 =>
            __netTcpRttMicrosecsP95 = Some(_input__.readDouble())
          case 201 =>
            __netTcpRttMicrosecsP99 = Some(_input__.readDouble())
          case 225 =>
            __netTcpActiveConnections = Some(_input__.readDouble())
          case 233 =>
            __netTcpTimeWaitConnections = Some(_input__.readDouble())
          case 282 =>
            __netTrafficControlStatistics += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.TrafficControlStatistics.defaultInstance)
          case 338 =>
            __netSnmpStatistics = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __netSnmpStatistics.getOrElse(org.apache.mesos.v1.mesos.SNMPStatistics.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.ResourceStatistics(
          timestamp = __timestamp,
          processes = __processes,
          threads = __threads,
          cpusUserTimeSecs = __cpusUserTimeSecs,
          cpusSystemTimeSecs = __cpusSystemTimeSecs,
          cpusLimit = __cpusLimit,
          cpusNrPeriods = __cpusNrPeriods,
          cpusNrThrottled = __cpusNrThrottled,
          cpusThrottledTimeSecs = __cpusThrottledTimeSecs,
          memTotalBytes = __memTotalBytes,
          memTotalMemswBytes = __memTotalMemswBytes,
          memLimitBytes = __memLimitBytes,
          memSoftLimitBytes = __memSoftLimitBytes,
          memFileBytes = __memFileBytes,
          memAnonBytes = __memAnonBytes,
          memCacheBytes = __memCacheBytes,
          memRssBytes = __memRssBytes,
          memMappedFileBytes = __memMappedFileBytes,
          memSwapBytes = __memSwapBytes,
          memUnevictableBytes = __memUnevictableBytes,
          memLowPressureCounter = __memLowPressureCounter,
          memMediumPressureCounter = __memMediumPressureCounter,
          memCriticalPressureCounter = __memCriticalPressureCounter,
          diskLimitBytes = __diskLimitBytes,
          diskUsedBytes = __diskUsedBytes,
          diskStatistics = __diskStatistics.result(),
          perf = __perf,
          netRxPackets = __netRxPackets,
          netRxBytes = __netRxBytes,
          netRxErrors = __netRxErrors,
          netRxDropped = __netRxDropped,
          netTxPackets = __netTxPackets,
          netTxBytes = __netTxBytes,
          netTxErrors = __netTxErrors,
          netTxDropped = __netTxDropped,
          netTcpRttMicrosecsP50 = __netTcpRttMicrosecsP50,
          netTcpRttMicrosecsP90 = __netTcpRttMicrosecsP90,
          netTcpRttMicrosecsP95 = __netTcpRttMicrosecsP95,
          netTcpRttMicrosecsP99 = __netTcpRttMicrosecsP99,
          netTcpActiveConnections = __netTcpActiveConnections,
          netTcpTimeWaitConnections = __netTcpTimeWaitConnections,
          netTrafficControlStatistics = __netTrafficControlStatistics.result(),
          netSnmpStatistics = __netSnmpStatistics
      )
    }
    def withTimestamp(__v: Double): ResourceStatistics = copy(timestamp = __v)
    def getProcesses: Int = processes.getOrElse(0)
    def clearProcesses: ResourceStatistics = copy(processes = None)
    def withProcesses(__v: Int): ResourceStatistics = copy(processes = Some(__v))
    def getThreads: Int = threads.getOrElse(0)
    def clearThreads: ResourceStatistics = copy(threads = None)
    def withThreads(__v: Int): ResourceStatistics = copy(threads = Some(__v))
    def getCpusUserTimeSecs: Double = cpusUserTimeSecs.getOrElse(0.0)
    def clearCpusUserTimeSecs: ResourceStatistics = copy(cpusUserTimeSecs = None)
    def withCpusUserTimeSecs(__v: Double): ResourceStatistics = copy(cpusUserTimeSecs = Some(__v))
    def getCpusSystemTimeSecs: Double = cpusSystemTimeSecs.getOrElse(0.0)
    def clearCpusSystemTimeSecs: ResourceStatistics = copy(cpusSystemTimeSecs = None)
    def withCpusSystemTimeSecs(__v: Double): ResourceStatistics = copy(cpusSystemTimeSecs = Some(__v))
    def getCpusLimit: Double = cpusLimit.getOrElse(0.0)
    def clearCpusLimit: ResourceStatistics = copy(cpusLimit = None)
    def withCpusLimit(__v: Double): ResourceStatistics = copy(cpusLimit = Some(__v))
    def getCpusNrPeriods: Int = cpusNrPeriods.getOrElse(0)
    def clearCpusNrPeriods: ResourceStatistics = copy(cpusNrPeriods = None)
    def withCpusNrPeriods(__v: Int): ResourceStatistics = copy(cpusNrPeriods = Some(__v))
    def getCpusNrThrottled: Int = cpusNrThrottled.getOrElse(0)
    def clearCpusNrThrottled: ResourceStatistics = copy(cpusNrThrottled = None)
    def withCpusNrThrottled(__v: Int): ResourceStatistics = copy(cpusNrThrottled = Some(__v))
    def getCpusThrottledTimeSecs: Double = cpusThrottledTimeSecs.getOrElse(0.0)
    def clearCpusThrottledTimeSecs: ResourceStatistics = copy(cpusThrottledTimeSecs = None)
    def withCpusThrottledTimeSecs(__v: Double): ResourceStatistics = copy(cpusThrottledTimeSecs = Some(__v))
    def getMemTotalBytes: Long = memTotalBytes.getOrElse(0L)
    def clearMemTotalBytes: ResourceStatistics = copy(memTotalBytes = None)
    def withMemTotalBytes(__v: Long): ResourceStatistics = copy(memTotalBytes = Some(__v))
    def getMemTotalMemswBytes: Long = memTotalMemswBytes.getOrElse(0L)
    def clearMemTotalMemswBytes: ResourceStatistics = copy(memTotalMemswBytes = None)
    def withMemTotalMemswBytes(__v: Long): ResourceStatistics = copy(memTotalMemswBytes = Some(__v))
    def getMemLimitBytes: Long = memLimitBytes.getOrElse(0L)
    def clearMemLimitBytes: ResourceStatistics = copy(memLimitBytes = None)
    def withMemLimitBytes(__v: Long): ResourceStatistics = copy(memLimitBytes = Some(__v))
    def getMemSoftLimitBytes: Long = memSoftLimitBytes.getOrElse(0L)
    def clearMemSoftLimitBytes: ResourceStatistics = copy(memSoftLimitBytes = None)
    def withMemSoftLimitBytes(__v: Long): ResourceStatistics = copy(memSoftLimitBytes = Some(__v))
    def getMemFileBytes: Long = memFileBytes.getOrElse(0L)
    def clearMemFileBytes: ResourceStatistics = copy(memFileBytes = None)
    def withMemFileBytes(__v: Long): ResourceStatistics = copy(memFileBytes = Some(__v))
    def getMemAnonBytes: Long = memAnonBytes.getOrElse(0L)
    def clearMemAnonBytes: ResourceStatistics = copy(memAnonBytes = None)
    def withMemAnonBytes(__v: Long): ResourceStatistics = copy(memAnonBytes = Some(__v))
    def getMemCacheBytes: Long = memCacheBytes.getOrElse(0L)
    def clearMemCacheBytes: ResourceStatistics = copy(memCacheBytes = None)
    def withMemCacheBytes(__v: Long): ResourceStatistics = copy(memCacheBytes = Some(__v))
    def getMemRssBytes: Long = memRssBytes.getOrElse(0L)
    def clearMemRssBytes: ResourceStatistics = copy(memRssBytes = None)
    def withMemRssBytes(__v: Long): ResourceStatistics = copy(memRssBytes = Some(__v))
    def getMemMappedFileBytes: Long = memMappedFileBytes.getOrElse(0L)
    def clearMemMappedFileBytes: ResourceStatistics = copy(memMappedFileBytes = None)
    def withMemMappedFileBytes(__v: Long): ResourceStatistics = copy(memMappedFileBytes = Some(__v))
    def getMemSwapBytes: Long = memSwapBytes.getOrElse(0L)
    def clearMemSwapBytes: ResourceStatistics = copy(memSwapBytes = None)
    def withMemSwapBytes(__v: Long): ResourceStatistics = copy(memSwapBytes = Some(__v))
    def getMemUnevictableBytes: Long = memUnevictableBytes.getOrElse(0L)
    def clearMemUnevictableBytes: ResourceStatistics = copy(memUnevictableBytes = None)
    def withMemUnevictableBytes(__v: Long): ResourceStatistics = copy(memUnevictableBytes = Some(__v))
    def getMemLowPressureCounter: Long = memLowPressureCounter.getOrElse(0L)
    def clearMemLowPressureCounter: ResourceStatistics = copy(memLowPressureCounter = None)
    def withMemLowPressureCounter(__v: Long): ResourceStatistics = copy(memLowPressureCounter = Some(__v))
    def getMemMediumPressureCounter: Long = memMediumPressureCounter.getOrElse(0L)
    def clearMemMediumPressureCounter: ResourceStatistics = copy(memMediumPressureCounter = None)
    def withMemMediumPressureCounter(__v: Long): ResourceStatistics = copy(memMediumPressureCounter = Some(__v))
    def getMemCriticalPressureCounter: Long = memCriticalPressureCounter.getOrElse(0L)
    def clearMemCriticalPressureCounter: ResourceStatistics = copy(memCriticalPressureCounter = None)
    def withMemCriticalPressureCounter(__v: Long): ResourceStatistics = copy(memCriticalPressureCounter = Some(__v))
    def getDiskLimitBytes: Long = diskLimitBytes.getOrElse(0L)
    def clearDiskLimitBytes: ResourceStatistics = copy(diskLimitBytes = None)
    def withDiskLimitBytes(__v: Long): ResourceStatistics = copy(diskLimitBytes = Some(__v))
    def getDiskUsedBytes: Long = diskUsedBytes.getOrElse(0L)
    def clearDiskUsedBytes: ResourceStatistics = copy(diskUsedBytes = None)
    def withDiskUsedBytes(__v: Long): ResourceStatistics = copy(diskUsedBytes = Some(__v))
    def clearDiskStatistics = copy(diskStatistics = _root_.scala.collection.Seq.empty)
    def addDiskStatistics(__vs: org.apache.mesos.v1.mesos.DiskStatistics*): ResourceStatistics = addAllDiskStatistics(__vs)
    def addAllDiskStatistics(__vs: TraversableOnce[org.apache.mesos.v1.mesos.DiskStatistics]): ResourceStatistics = copy(diskStatistics = diskStatistics ++ __vs)
    def withDiskStatistics(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.DiskStatistics]): ResourceStatistics = copy(diskStatistics = __v)
    def getPerf: org.apache.mesos.v1.mesos.PerfStatistics = perf.getOrElse(org.apache.mesos.v1.mesos.PerfStatistics.defaultInstance)
    def clearPerf: ResourceStatistics = copy(perf = None)
    def withPerf(__v: org.apache.mesos.v1.mesos.PerfStatistics): ResourceStatistics = copy(perf = Some(__v))
    def getNetRxPackets: Long = netRxPackets.getOrElse(0L)
    def clearNetRxPackets: ResourceStatistics = copy(netRxPackets = None)
    def withNetRxPackets(__v: Long): ResourceStatistics = copy(netRxPackets = Some(__v))
    def getNetRxBytes: Long = netRxBytes.getOrElse(0L)
    def clearNetRxBytes: ResourceStatistics = copy(netRxBytes = None)
    def withNetRxBytes(__v: Long): ResourceStatistics = copy(netRxBytes = Some(__v))
    def getNetRxErrors: Long = netRxErrors.getOrElse(0L)
    def clearNetRxErrors: ResourceStatistics = copy(netRxErrors = None)
    def withNetRxErrors(__v: Long): ResourceStatistics = copy(netRxErrors = Some(__v))
    def getNetRxDropped: Long = netRxDropped.getOrElse(0L)
    def clearNetRxDropped: ResourceStatistics = copy(netRxDropped = None)
    def withNetRxDropped(__v: Long): ResourceStatistics = copy(netRxDropped = Some(__v))
    def getNetTxPackets: Long = netTxPackets.getOrElse(0L)
    def clearNetTxPackets: ResourceStatistics = copy(netTxPackets = None)
    def withNetTxPackets(__v: Long): ResourceStatistics = copy(netTxPackets = Some(__v))
    def getNetTxBytes: Long = netTxBytes.getOrElse(0L)
    def clearNetTxBytes: ResourceStatistics = copy(netTxBytes = None)
    def withNetTxBytes(__v: Long): ResourceStatistics = copy(netTxBytes = Some(__v))
    def getNetTxErrors: Long = netTxErrors.getOrElse(0L)
    def clearNetTxErrors: ResourceStatistics = copy(netTxErrors = None)
    def withNetTxErrors(__v: Long): ResourceStatistics = copy(netTxErrors = Some(__v))
    def getNetTxDropped: Long = netTxDropped.getOrElse(0L)
    def clearNetTxDropped: ResourceStatistics = copy(netTxDropped = None)
    def withNetTxDropped(__v: Long): ResourceStatistics = copy(netTxDropped = Some(__v))
    def getNetTcpRttMicrosecsP50: Double = netTcpRttMicrosecsP50.getOrElse(0.0)
    def clearNetTcpRttMicrosecsP50: ResourceStatistics = copy(netTcpRttMicrosecsP50 = None)
    def withNetTcpRttMicrosecsP50(__v: Double): ResourceStatistics = copy(netTcpRttMicrosecsP50 = Some(__v))
    def getNetTcpRttMicrosecsP90: Double = netTcpRttMicrosecsP90.getOrElse(0.0)
    def clearNetTcpRttMicrosecsP90: ResourceStatistics = copy(netTcpRttMicrosecsP90 = None)
    def withNetTcpRttMicrosecsP90(__v: Double): ResourceStatistics = copy(netTcpRttMicrosecsP90 = Some(__v))
    def getNetTcpRttMicrosecsP95: Double = netTcpRttMicrosecsP95.getOrElse(0.0)
    def clearNetTcpRttMicrosecsP95: ResourceStatistics = copy(netTcpRttMicrosecsP95 = None)
    def withNetTcpRttMicrosecsP95(__v: Double): ResourceStatistics = copy(netTcpRttMicrosecsP95 = Some(__v))
    def getNetTcpRttMicrosecsP99: Double = netTcpRttMicrosecsP99.getOrElse(0.0)
    def clearNetTcpRttMicrosecsP99: ResourceStatistics = copy(netTcpRttMicrosecsP99 = None)
    def withNetTcpRttMicrosecsP99(__v: Double): ResourceStatistics = copy(netTcpRttMicrosecsP99 = Some(__v))
    def getNetTcpActiveConnections: Double = netTcpActiveConnections.getOrElse(0.0)
    def clearNetTcpActiveConnections: ResourceStatistics = copy(netTcpActiveConnections = None)
    def withNetTcpActiveConnections(__v: Double): ResourceStatistics = copy(netTcpActiveConnections = Some(__v))
    def getNetTcpTimeWaitConnections: Double = netTcpTimeWaitConnections.getOrElse(0.0)
    def clearNetTcpTimeWaitConnections: ResourceStatistics = copy(netTcpTimeWaitConnections = None)
    def withNetTcpTimeWaitConnections(__v: Double): ResourceStatistics = copy(netTcpTimeWaitConnections = Some(__v))
    def clearNetTrafficControlStatistics = copy(netTrafficControlStatistics = _root_.scala.collection.Seq.empty)
    def addNetTrafficControlStatistics(__vs: org.apache.mesos.v1.mesos.TrafficControlStatistics*): ResourceStatistics = addAllNetTrafficControlStatistics(__vs)
    def addAllNetTrafficControlStatistics(__vs: TraversableOnce[org.apache.mesos.v1.mesos.TrafficControlStatistics]): ResourceStatistics = copy(netTrafficControlStatistics = netTrafficControlStatistics ++ __vs)
    def withNetTrafficControlStatistics(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.TrafficControlStatistics]): ResourceStatistics = copy(netTrafficControlStatistics = __v)
    def getNetSnmpStatistics: org.apache.mesos.v1.mesos.SNMPStatistics = netSnmpStatistics.getOrElse(org.apache.mesos.v1.mesos.SNMPStatistics.defaultInstance)
    def clearNetSnmpStatistics: ResourceStatistics = copy(netSnmpStatistics = None)
    def withNetSnmpStatistics(__v: org.apache.mesos.v1.mesos.SNMPStatistics): ResourceStatistics = copy(netSnmpStatistics = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => timestamp
        case 30 => processes.orNull
        case 31 => threads.orNull
        case 2 => cpusUserTimeSecs.orNull
        case 3 => cpusSystemTimeSecs.orNull
        case 4 => cpusLimit.orNull
        case 7 => cpusNrPeriods.orNull
        case 8 => cpusNrThrottled.orNull
        case 9 => cpusThrottledTimeSecs.orNull
        case 36 => memTotalBytes.orNull
        case 37 => memTotalMemswBytes.orNull
        case 6 => memLimitBytes.orNull
        case 38 => memSoftLimitBytes.orNull
        case 10 => memFileBytes.orNull
        case 11 => memAnonBytes.orNull
        case 39 => memCacheBytes.orNull
        case 5 => memRssBytes.orNull
        case 12 => memMappedFileBytes.orNull
        case 40 => memSwapBytes.orNull
        case 41 => memUnevictableBytes.orNull
        case 32 => memLowPressureCounter.orNull
        case 33 => memMediumPressureCounter.orNull
        case 34 => memCriticalPressureCounter.orNull
        case 26 => diskLimitBytes.orNull
        case 27 => diskUsedBytes.orNull
        case 43 => diskStatistics
        case 13 => perf.orNull
        case 14 => netRxPackets.orNull
        case 15 => netRxBytes.orNull
        case 16 => netRxErrors.orNull
        case 17 => netRxDropped.orNull
        case 18 => netTxPackets.orNull
        case 19 => netTxBytes.orNull
        case 20 => netTxErrors.orNull
        case 21 => netTxDropped.orNull
        case 22 => netTcpRttMicrosecsP50.orNull
        case 23 => netTcpRttMicrosecsP90.orNull
        case 24 => netTcpRttMicrosecsP95.orNull
        case 25 => netTcpRttMicrosecsP99.orNull
        case 28 => netTcpActiveConnections.orNull
        case 29 => netTcpTimeWaitConnections.orNull
        case 35 => netTrafficControlStatistics
        case 42 => netSnmpStatistics.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PDouble(timestamp)
        case 30 => processes.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 31 => threads.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => cpusUserTimeSecs.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => cpusSystemTimeSecs.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => cpusLimit.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => cpusNrPeriods.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => cpusNrThrottled.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => cpusThrottledTimeSecs.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 36 => memTotalBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 37 => memTotalMemswBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => memLimitBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 38 => memSoftLimitBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => memFileBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => memAnonBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 39 => memCacheBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => memRssBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => memMappedFileBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 40 => memSwapBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 41 => memUnevictableBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 32 => memLowPressureCounter.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 33 => memMediumPressureCounter.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 34 => memCriticalPressureCounter.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 26 => diskLimitBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 27 => diskUsedBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 43 => _root_.scalapb.descriptors.PRepeated(diskStatistics.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 13 => perf.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => netRxPackets.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => netRxBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => netRxErrors.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => netRxDropped.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => netTxPackets.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => netTxBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => netTxErrors.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => netTxDropped.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => netTcpRttMicrosecsP50.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => netTcpRttMicrosecsP90.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 24 => netTcpRttMicrosecsP95.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 25 => netTcpRttMicrosecsP99.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 28 => netTcpActiveConnections.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 29 => netTcpTimeWaitConnections.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 35 => _root_.scalapb.descriptors.PRepeated(netTrafficControlStatistics.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 42 => netSnmpStatistics.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.ResourceStatistics
}

object ResourceStatistics extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ResourceStatistics] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ResourceStatistics] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.ResourceStatistics = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.ResourceStatistics(
      __fieldsMap(__fields.get(0)).asInstanceOf[Double],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(19)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(20)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(21)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(22)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(23)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(24)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.getOrElse(__fields.get(25), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.DiskStatistics]],
      __fieldsMap.get(__fields.get(26)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.PerfStatistics]],
      __fieldsMap.get(__fields.get(27)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(28)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(29)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(30)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(31)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(32)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(33)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(34)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(35)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(36)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(37)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(38)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(39)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(40)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.getOrElse(__fields.get(41), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.TrafficControlStatistics]],
      __fieldsMap.get(__fields.get(42)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.SNMPStatistics]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.ResourceStatistics] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.ResourceStatistics(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Double],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(31).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(36).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(37).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(38).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(39).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(40).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(41).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(32).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(33).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(34).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(26).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(27).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(43).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.DiskStatistics]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.PerfStatistics]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(28).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(29).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(35).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.TrafficControlStatistics]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(42).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.SNMPStatistics]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(33)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(33)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 43 => __out = org.apache.mesos.v1.mesos.DiskStatistics
      case 13 => __out = org.apache.mesos.v1.mesos.PerfStatistics
      case 35 => __out = org.apache.mesos.v1.mesos.TrafficControlStatistics
      case 42 => __out = org.apache.mesos.v1.mesos.SNMPStatistics
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.ResourceStatistics(
    timestamp = 0.0
  )
  implicit class ResourceStatisticsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ResourceStatistics]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.ResourceStatistics](_l) {
    def timestamp: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def processes: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getProcesses)((c_, f_) => c_.copy(processes = Some(f_)))
    def optionalProcesses: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.processes)((c_, f_) => c_.copy(processes = f_))
    def threads: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getThreads)((c_, f_) => c_.copy(threads = Some(f_)))
    def optionalThreads: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.threads)((c_, f_) => c_.copy(threads = f_))
    def cpusUserTimeSecs: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getCpusUserTimeSecs)((c_, f_) => c_.copy(cpusUserTimeSecs = Some(f_)))
    def optionalCpusUserTimeSecs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.cpusUserTimeSecs)((c_, f_) => c_.copy(cpusUserTimeSecs = f_))
    def cpusSystemTimeSecs: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getCpusSystemTimeSecs)((c_, f_) => c_.copy(cpusSystemTimeSecs = Some(f_)))
    def optionalCpusSystemTimeSecs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.cpusSystemTimeSecs)((c_, f_) => c_.copy(cpusSystemTimeSecs = f_))
    def cpusLimit: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getCpusLimit)((c_, f_) => c_.copy(cpusLimit = Some(f_)))
    def optionalCpusLimit: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.cpusLimit)((c_, f_) => c_.copy(cpusLimit = f_))
    def cpusNrPeriods: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getCpusNrPeriods)((c_, f_) => c_.copy(cpusNrPeriods = Some(f_)))
    def optionalCpusNrPeriods: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.cpusNrPeriods)((c_, f_) => c_.copy(cpusNrPeriods = f_))
    def cpusNrThrottled: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getCpusNrThrottled)((c_, f_) => c_.copy(cpusNrThrottled = Some(f_)))
    def optionalCpusNrThrottled: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.cpusNrThrottled)((c_, f_) => c_.copy(cpusNrThrottled = f_))
    def cpusThrottledTimeSecs: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getCpusThrottledTimeSecs)((c_, f_) => c_.copy(cpusThrottledTimeSecs = Some(f_)))
    def optionalCpusThrottledTimeSecs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.cpusThrottledTimeSecs)((c_, f_) => c_.copy(cpusThrottledTimeSecs = f_))
    def memTotalBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemTotalBytes)((c_, f_) => c_.copy(memTotalBytes = Some(f_)))
    def optionalMemTotalBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memTotalBytes)((c_, f_) => c_.copy(memTotalBytes = f_))
    def memTotalMemswBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemTotalMemswBytes)((c_, f_) => c_.copy(memTotalMemswBytes = Some(f_)))
    def optionalMemTotalMemswBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memTotalMemswBytes)((c_, f_) => c_.copy(memTotalMemswBytes = f_))
    def memLimitBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemLimitBytes)((c_, f_) => c_.copy(memLimitBytes = Some(f_)))
    def optionalMemLimitBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memLimitBytes)((c_, f_) => c_.copy(memLimitBytes = f_))
    def memSoftLimitBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemSoftLimitBytes)((c_, f_) => c_.copy(memSoftLimitBytes = Some(f_)))
    def optionalMemSoftLimitBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memSoftLimitBytes)((c_, f_) => c_.copy(memSoftLimitBytes = f_))
    def memFileBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemFileBytes)((c_, f_) => c_.copy(memFileBytes = Some(f_)))
    def optionalMemFileBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memFileBytes)((c_, f_) => c_.copy(memFileBytes = f_))
    def memAnonBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemAnonBytes)((c_, f_) => c_.copy(memAnonBytes = Some(f_)))
    def optionalMemAnonBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memAnonBytes)((c_, f_) => c_.copy(memAnonBytes = f_))
    def memCacheBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemCacheBytes)((c_, f_) => c_.copy(memCacheBytes = Some(f_)))
    def optionalMemCacheBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memCacheBytes)((c_, f_) => c_.copy(memCacheBytes = f_))
    def memRssBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemRssBytes)((c_, f_) => c_.copy(memRssBytes = Some(f_)))
    def optionalMemRssBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memRssBytes)((c_, f_) => c_.copy(memRssBytes = f_))
    def memMappedFileBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemMappedFileBytes)((c_, f_) => c_.copy(memMappedFileBytes = Some(f_)))
    def optionalMemMappedFileBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memMappedFileBytes)((c_, f_) => c_.copy(memMappedFileBytes = f_))
    def memSwapBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemSwapBytes)((c_, f_) => c_.copy(memSwapBytes = Some(f_)))
    def optionalMemSwapBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memSwapBytes)((c_, f_) => c_.copy(memSwapBytes = f_))
    def memUnevictableBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemUnevictableBytes)((c_, f_) => c_.copy(memUnevictableBytes = Some(f_)))
    def optionalMemUnevictableBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memUnevictableBytes)((c_, f_) => c_.copy(memUnevictableBytes = f_))
    def memLowPressureCounter: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemLowPressureCounter)((c_, f_) => c_.copy(memLowPressureCounter = Some(f_)))
    def optionalMemLowPressureCounter: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memLowPressureCounter)((c_, f_) => c_.copy(memLowPressureCounter = f_))
    def memMediumPressureCounter: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemMediumPressureCounter)((c_, f_) => c_.copy(memMediumPressureCounter = Some(f_)))
    def optionalMemMediumPressureCounter: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memMediumPressureCounter)((c_, f_) => c_.copy(memMediumPressureCounter = f_))
    def memCriticalPressureCounter: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMemCriticalPressureCounter)((c_, f_) => c_.copy(memCriticalPressureCounter = Some(f_)))
    def optionalMemCriticalPressureCounter: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.memCriticalPressureCounter)((c_, f_) => c_.copy(memCriticalPressureCounter = f_))
    def diskLimitBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDiskLimitBytes)((c_, f_) => c_.copy(diskLimitBytes = Some(f_)))
    def optionalDiskLimitBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.diskLimitBytes)((c_, f_) => c_.copy(diskLimitBytes = f_))
    def diskUsedBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDiskUsedBytes)((c_, f_) => c_.copy(diskUsedBytes = Some(f_)))
    def optionalDiskUsedBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.diskUsedBytes)((c_, f_) => c_.copy(diskUsedBytes = f_))
    def diskStatistics: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.DiskStatistics]] = field(_.diskStatistics)((c_, f_) => c_.copy(diskStatistics = f_))
    def perf: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.PerfStatistics] = field(_.getPerf)((c_, f_) => c_.copy(perf = Some(f_)))
    def optionalPerf: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.PerfStatistics]] = field(_.perf)((c_, f_) => c_.copy(perf = f_))
    def netRxPackets: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNetRxPackets)((c_, f_) => c_.copy(netRxPackets = Some(f_)))
    def optionalNetRxPackets: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.netRxPackets)((c_, f_) => c_.copy(netRxPackets = f_))
    def netRxBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNetRxBytes)((c_, f_) => c_.copy(netRxBytes = Some(f_)))
    def optionalNetRxBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.netRxBytes)((c_, f_) => c_.copy(netRxBytes = f_))
    def netRxErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNetRxErrors)((c_, f_) => c_.copy(netRxErrors = Some(f_)))
    def optionalNetRxErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.netRxErrors)((c_, f_) => c_.copy(netRxErrors = f_))
    def netRxDropped: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNetRxDropped)((c_, f_) => c_.copy(netRxDropped = Some(f_)))
    def optionalNetRxDropped: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.netRxDropped)((c_, f_) => c_.copy(netRxDropped = f_))
    def netTxPackets: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNetTxPackets)((c_, f_) => c_.copy(netTxPackets = Some(f_)))
    def optionalNetTxPackets: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.netTxPackets)((c_, f_) => c_.copy(netTxPackets = f_))
    def netTxBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNetTxBytes)((c_, f_) => c_.copy(netTxBytes = Some(f_)))
    def optionalNetTxBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.netTxBytes)((c_, f_) => c_.copy(netTxBytes = f_))
    def netTxErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNetTxErrors)((c_, f_) => c_.copy(netTxErrors = Some(f_)))
    def optionalNetTxErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.netTxErrors)((c_, f_) => c_.copy(netTxErrors = f_))
    def netTxDropped: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNetTxDropped)((c_, f_) => c_.copy(netTxDropped = Some(f_)))
    def optionalNetTxDropped: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.netTxDropped)((c_, f_) => c_.copy(netTxDropped = f_))
    def netTcpRttMicrosecsP50: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getNetTcpRttMicrosecsP50)((c_, f_) => c_.copy(netTcpRttMicrosecsP50 = Some(f_)))
    def optionalNetTcpRttMicrosecsP50: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.netTcpRttMicrosecsP50)((c_, f_) => c_.copy(netTcpRttMicrosecsP50 = f_))
    def netTcpRttMicrosecsP90: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getNetTcpRttMicrosecsP90)((c_, f_) => c_.copy(netTcpRttMicrosecsP90 = Some(f_)))
    def optionalNetTcpRttMicrosecsP90: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.netTcpRttMicrosecsP90)((c_, f_) => c_.copy(netTcpRttMicrosecsP90 = f_))
    def netTcpRttMicrosecsP95: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getNetTcpRttMicrosecsP95)((c_, f_) => c_.copy(netTcpRttMicrosecsP95 = Some(f_)))
    def optionalNetTcpRttMicrosecsP95: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.netTcpRttMicrosecsP95)((c_, f_) => c_.copy(netTcpRttMicrosecsP95 = f_))
    def netTcpRttMicrosecsP99: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getNetTcpRttMicrosecsP99)((c_, f_) => c_.copy(netTcpRttMicrosecsP99 = Some(f_)))
    def optionalNetTcpRttMicrosecsP99: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.netTcpRttMicrosecsP99)((c_, f_) => c_.copy(netTcpRttMicrosecsP99 = f_))
    def netTcpActiveConnections: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getNetTcpActiveConnections)((c_, f_) => c_.copy(netTcpActiveConnections = Some(f_)))
    def optionalNetTcpActiveConnections: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.netTcpActiveConnections)((c_, f_) => c_.copy(netTcpActiveConnections = f_))
    def netTcpTimeWaitConnections: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getNetTcpTimeWaitConnections)((c_, f_) => c_.copy(netTcpTimeWaitConnections = Some(f_)))
    def optionalNetTcpTimeWaitConnections: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.netTcpTimeWaitConnections)((c_, f_) => c_.copy(netTcpTimeWaitConnections = f_))
    def netTrafficControlStatistics: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.TrafficControlStatistics]] = field(_.netTrafficControlStatistics)((c_, f_) => c_.copy(netTrafficControlStatistics = f_))
    def netSnmpStatistics: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.SNMPStatistics] = field(_.getNetSnmpStatistics)((c_, f_) => c_.copy(netSnmpStatistics = Some(f_)))
    def optionalNetSnmpStatistics: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.SNMPStatistics]] = field(_.netSnmpStatistics)((c_, f_) => c_.copy(netSnmpStatistics = f_))
  }
  final val TIMESTAMP_FIELD_NUMBER = 1
  final val PROCESSES_FIELD_NUMBER = 30
  final val THREADS_FIELD_NUMBER = 31
  final val CPUS_USER_TIME_SECS_FIELD_NUMBER = 2
  final val CPUS_SYSTEM_TIME_SECS_FIELD_NUMBER = 3
  final val CPUS_LIMIT_FIELD_NUMBER = 4
  final val CPUS_NR_PERIODS_FIELD_NUMBER = 7
  final val CPUS_NR_THROTTLED_FIELD_NUMBER = 8
  final val CPUS_THROTTLED_TIME_SECS_FIELD_NUMBER = 9
  final val MEM_TOTAL_BYTES_FIELD_NUMBER = 36
  final val MEM_TOTAL_MEMSW_BYTES_FIELD_NUMBER = 37
  final val MEM_LIMIT_BYTES_FIELD_NUMBER = 6
  final val MEM_SOFT_LIMIT_BYTES_FIELD_NUMBER = 38
  final val MEM_FILE_BYTES_FIELD_NUMBER = 10
  final val MEM_ANON_BYTES_FIELD_NUMBER = 11
  final val MEM_CACHE_BYTES_FIELD_NUMBER = 39
  final val MEM_RSS_BYTES_FIELD_NUMBER = 5
  final val MEM_MAPPED_FILE_BYTES_FIELD_NUMBER = 12
  final val MEM_SWAP_BYTES_FIELD_NUMBER = 40
  final val MEM_UNEVICTABLE_BYTES_FIELD_NUMBER = 41
  final val MEM_LOW_PRESSURE_COUNTER_FIELD_NUMBER = 32
  final val MEM_MEDIUM_PRESSURE_COUNTER_FIELD_NUMBER = 33
  final val MEM_CRITICAL_PRESSURE_COUNTER_FIELD_NUMBER = 34
  final val DISK_LIMIT_BYTES_FIELD_NUMBER = 26
  final val DISK_USED_BYTES_FIELD_NUMBER = 27
  final val DISK_STATISTICS_FIELD_NUMBER = 43
  final val PERF_FIELD_NUMBER = 13
  final val NET_RX_PACKETS_FIELD_NUMBER = 14
  final val NET_RX_BYTES_FIELD_NUMBER = 15
  final val NET_RX_ERRORS_FIELD_NUMBER = 16
  final val NET_RX_DROPPED_FIELD_NUMBER = 17
  final val NET_TX_PACKETS_FIELD_NUMBER = 18
  final val NET_TX_BYTES_FIELD_NUMBER = 19
  final val NET_TX_ERRORS_FIELD_NUMBER = 20
  final val NET_TX_DROPPED_FIELD_NUMBER = 21
  final val NET_TCP_RTT_MICROSECS_P50_FIELD_NUMBER = 22
  final val NET_TCP_RTT_MICROSECS_P90_FIELD_NUMBER = 23
  final val NET_TCP_RTT_MICROSECS_P95_FIELD_NUMBER = 24
  final val NET_TCP_RTT_MICROSECS_P99_FIELD_NUMBER = 25
  final val NET_TCP_ACTIVE_CONNECTIONS_FIELD_NUMBER = 28
  final val NET_TCP_TIME_WAIT_CONNECTIONS_FIELD_NUMBER = 29
  final val NET_TRAFFIC_CONTROL_STATISTICS_FIELD_NUMBER = 35
  final val NET_SNMP_STATISTICS_FIELD_NUMBER = 42
}
