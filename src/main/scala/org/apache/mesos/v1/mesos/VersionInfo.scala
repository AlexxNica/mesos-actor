// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Version information of a component.
  */
@SerialVersionUID(0L)
final case class VersionInfo(
    version: String,
    buildDate: scala.Option[String] = None,
    buildTime: scala.Option[Double] = None,
    buildUser: scala.Option[String] = None,
    gitSha: scala.Option[String] = None,
    gitBranch: scala.Option[String] = None,
    gitTag: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[VersionInfo] with com.trueaccord.lenses.Updatable[VersionInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, version)
      if (buildDate.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, buildDate.get) }
      if (buildTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(3, buildTime.get) }
      if (buildUser.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, buildUser.get) }
      if (gitSha.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, gitSha.get) }
      if (gitBranch.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, gitBranch.get) }
      if (gitTag.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, gitTag.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, version)
      buildDate.foreach { __v =>
        _output__.writeString(2, __v)
      };
      buildTime.foreach { __v =>
        _output__.writeDouble(3, __v)
      };
      buildUser.foreach { __v =>
        _output__.writeString(4, __v)
      };
      gitSha.foreach { __v =>
        _output__.writeString(5, __v)
      };
      gitBranch.foreach { __v =>
        _output__.writeString(6, __v)
      };
      gitTag.foreach { __v =>
        _output__.writeString(7, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.VersionInfo = {
      var __version = this.version
      var __buildDate = this.buildDate
      var __buildTime = this.buildTime
      var __buildUser = this.buildUser
      var __gitSha = this.gitSha
      var __gitBranch = this.gitBranch
      var __gitTag = this.gitTag
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __version = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __buildDate = Some(_input__.readString())
          case 25 =>
            __buildTime = Some(_input__.readDouble())
          case 34 =>
            __buildUser = Some(_input__.readString())
          case 42 =>
            __gitSha = Some(_input__.readString())
          case 50 =>
            __gitBranch = Some(_input__.readString())
          case 58 =>
            __gitTag = Some(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.VersionInfo(
          version = __version,
          buildDate = __buildDate,
          buildTime = __buildTime,
          buildUser = __buildUser,
          gitSha = __gitSha,
          gitBranch = __gitBranch,
          gitTag = __gitTag
      )
    }
    def withVersion(__v: String): VersionInfo = copy(version = __v)
    def getBuildDate: String = buildDate.getOrElse("")
    def clearBuildDate: VersionInfo = copy(buildDate = None)
    def withBuildDate(__v: String): VersionInfo = copy(buildDate = Some(__v))
    def getBuildTime: Double = buildTime.getOrElse(0.0)
    def clearBuildTime: VersionInfo = copy(buildTime = None)
    def withBuildTime(__v: Double): VersionInfo = copy(buildTime = Some(__v))
    def getBuildUser: String = buildUser.getOrElse("")
    def clearBuildUser: VersionInfo = copy(buildUser = None)
    def withBuildUser(__v: String): VersionInfo = copy(buildUser = Some(__v))
    def getGitSha: String = gitSha.getOrElse("")
    def clearGitSha: VersionInfo = copy(gitSha = None)
    def withGitSha(__v: String): VersionInfo = copy(gitSha = Some(__v))
    def getGitBranch: String = gitBranch.getOrElse("")
    def clearGitBranch: VersionInfo = copy(gitBranch = None)
    def withGitBranch(__v: String): VersionInfo = copy(gitBranch = Some(__v))
    def getGitTag: String = gitTag.getOrElse("")
    def clearGitTag: VersionInfo = copy(gitTag = None)
    def withGitTag(__v: String): VersionInfo = copy(gitTag = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => version
        case 2 => buildDate.orNull
        case 3 => buildTime.orNull
        case 4 => buildUser.orNull
        case 5 => gitSha.orNull
        case 6 => gitBranch.orNull
        case 7 => gitTag.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(version)
        case 2 => buildDate.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => buildTime.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => buildUser.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => gitSha.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => gitBranch.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => gitTag.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.VersionInfo
}

object VersionInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.VersionInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.VersionInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.VersionInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.VersionInfo(
      __fieldsMap(__fields.get(0)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.VersionInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.VersionInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(69)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(69)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.VersionInfo(
    version = ""
  )
  implicit class VersionInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.VersionInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.VersionInfo](_l) {
    def version: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def buildDate: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getBuildDate)((c_, f_) => c_.copy(buildDate = Some(f_)))
    def optionalBuildDate: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.buildDate)((c_, f_) => c_.copy(buildDate = f_))
    def buildTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getBuildTime)((c_, f_) => c_.copy(buildTime = Some(f_)))
    def optionalBuildTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.buildTime)((c_, f_) => c_.copy(buildTime = f_))
    def buildUser: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getBuildUser)((c_, f_) => c_.copy(buildUser = Some(f_)))
    def optionalBuildUser: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.buildUser)((c_, f_) => c_.copy(buildUser = f_))
    def gitSha: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getGitSha)((c_, f_) => c_.copy(gitSha = Some(f_)))
    def optionalGitSha: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.gitSha)((c_, f_) => c_.copy(gitSha = f_))
    def gitBranch: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getGitBranch)((c_, f_) => c_.copy(gitBranch = Some(f_)))
    def optionalGitBranch: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.gitBranch)((c_, f_) => c_.copy(gitBranch = f_))
    def gitTag: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getGitTag)((c_, f_) => c_.copy(gitTag = Some(f_)))
    def optionalGitTag: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.gitTag)((c_, f_) => c_.copy(gitTag = f_))
  }
  final val VERSION_FIELD_NUMBER = 1
  final val BUILD_DATE_FIELD_NUMBER = 2
  final val BUILD_TIME_FIELD_NUMBER = 3
  final val BUILD_USER_FIELD_NUMBER = 4
  final val GIT_SHA_FIELD_NUMBER = 5
  final val GIT_BRANCH_FIELD_NUMBER = 6
  final val GIT_TAG_FIELD_NUMBER = 7
}
