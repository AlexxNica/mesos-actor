// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Collection of RateLimit.
  * Frameworks without rate limits defined here are not throttled unless
  * 'aggregate_default_qps' is specified.
  *
  * @param limits
  *   Items should have unique principals.
  * @param aggregateDefaultQps
  *   All the frameworks not specified in 'limits' get this default rate.
  *   This rate is an aggregate rate for all of them, i.e., their combined
  *   traffic is throttled together at this rate.
  * @param aggregateDefaultCapacity
  *   All the frameworks not specified in 'limits' get this default capacity.
  *   This is an aggregate value similar to 'aggregate_default_qps'.
  */
@SerialVersionUID(0L)
final case class RateLimits(
    limits: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.RateLimit] = _root_.scala.collection.Seq.empty,
    aggregateDefaultQps: scala.Option[Double] = None,
    aggregateDefaultCapacity: scala.Option[Long] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[RateLimits] with com.trueaccord.lenses.Updatable[RateLimits] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      limits.foreach(limits => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(limits.serializedSize) + limits.serializedSize)
      if (aggregateDefaultQps.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(2, aggregateDefaultQps.get) }
      if (aggregateDefaultCapacity.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, aggregateDefaultCapacity.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      limits.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      aggregateDefaultQps.foreach { __v =>
        _output__.writeDouble(2, __v)
      };
      aggregateDefaultCapacity.foreach { __v =>
        _output__.writeUInt64(3, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.RateLimits = {
      val __limits = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.RateLimit] ++= this.limits)
      var __aggregateDefaultQps = this.aggregateDefaultQps
      var __aggregateDefaultCapacity = this.aggregateDefaultCapacity
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __limits += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.RateLimit.defaultInstance)
          case 17 =>
            __aggregateDefaultQps = Some(_input__.readDouble())
          case 24 =>
            __aggregateDefaultCapacity = Some(_input__.readUInt64())
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.RateLimits(
          limits = __limits.result(),
          aggregateDefaultQps = __aggregateDefaultQps,
          aggregateDefaultCapacity = __aggregateDefaultCapacity
      )
    }
    def clearLimits = copy(limits = _root_.scala.collection.Seq.empty)
    def addLimits(__vs: org.apache.mesos.v1.mesos.RateLimit*): RateLimits = addAllLimits(__vs)
    def addAllLimits(__vs: TraversableOnce[org.apache.mesos.v1.mesos.RateLimit]): RateLimits = copy(limits = limits ++ __vs)
    def withLimits(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.RateLimit]): RateLimits = copy(limits = __v)
    def getAggregateDefaultQps: Double = aggregateDefaultQps.getOrElse(0.0)
    def clearAggregateDefaultQps: RateLimits = copy(aggregateDefaultQps = None)
    def withAggregateDefaultQps(__v: Double): RateLimits = copy(aggregateDefaultQps = Some(__v))
    def getAggregateDefaultCapacity: Long = aggregateDefaultCapacity.getOrElse(0L)
    def clearAggregateDefaultCapacity: RateLimits = copy(aggregateDefaultCapacity = None)
    def withAggregateDefaultCapacity(__v: Long): RateLimits = copy(aggregateDefaultCapacity = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => limits
        case 2 => aggregateDefaultQps.orNull
        case 3 => aggregateDefaultCapacity.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(limits.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 2 => aggregateDefaultQps.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => aggregateDefaultCapacity.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.RateLimits
}

object RateLimits extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.RateLimits] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.RateLimits] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.RateLimits = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.RateLimits(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.RateLimit]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.RateLimits] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.RateLimits(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.RateLimit]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(52)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(52)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = org.apache.mesos.v1.mesos.RateLimit
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.RateLimits(
  )
  implicit class RateLimitsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.RateLimits]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.RateLimits](_l) {
    def limits: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.RateLimit]] = field(_.limits)((c_, f_) => c_.copy(limits = f_))
    def aggregateDefaultQps: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getAggregateDefaultQps)((c_, f_) => c_.copy(aggregateDefaultQps = Some(f_)))
    def optionalAggregateDefaultQps: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.aggregateDefaultQps)((c_, f_) => c_.copy(aggregateDefaultQps = f_))
    def aggregateDefaultCapacity: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getAggregateDefaultCapacity)((c_, f_) => c_.copy(aggregateDefaultCapacity = Some(f_)))
    def optionalAggregateDefaultCapacity: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.aggregateDefaultCapacity)((c_, f_) => c_.copy(aggregateDefaultCapacity = f_))
  }
  final val LIMITS_FIELD_NUMBER = 1
  final val AGGREGATE_DEFAULT_QPS_FIELD_NUMBER = 2
  final val AGGREGATE_DEFAULT_CAPACITY_FIELD_NUMBER = 3
}
