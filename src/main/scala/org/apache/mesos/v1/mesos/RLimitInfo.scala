// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Encapsulation for POSIX rlimits, see
  * http://pubs.opengroup.org/onlinepubs/009695399/functions/getrlimit.html.
  * Note that some types might only be defined for Linux.
  * We use a custom prefix to avoid conflict with existing system macros
  * (e.g., `RLIMIT_CPU` or `NOFILE`).
  */
@SerialVersionUID(0L)
final case class RLimitInfo(
    rlimits: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.RLimitInfo.RLimit] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[RLimitInfo] with com.trueaccord.lenses.Updatable[RLimitInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      rlimits.foreach(rlimits => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(rlimits.serializedSize) + rlimits.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      rlimits.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.RLimitInfo = {
      val __rlimits = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.RLimitInfo.RLimit] ++= this.rlimits)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __rlimits += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.RLimitInfo.RLimit.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.RLimitInfo(
          rlimits = __rlimits.result()
      )
    }
    def clearRlimits = copy(rlimits = _root_.scala.collection.Seq.empty)
    def addRlimits(__vs: org.apache.mesos.v1.mesos.RLimitInfo.RLimit*): RLimitInfo = addAllRlimits(__vs)
    def addAllRlimits(__vs: TraversableOnce[org.apache.mesos.v1.mesos.RLimitInfo.RLimit]): RLimitInfo = copy(rlimits = rlimits ++ __vs)
    def withRlimits(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.RLimitInfo.RLimit]): RLimitInfo = copy(rlimits = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => rlimits
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(rlimits.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.RLimitInfo
}

object RLimitInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.RLimitInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.RLimitInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.RLimitInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.RLimitInfo(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.RLimitInfo.RLimit]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.RLimitInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.RLimitInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.RLimitInfo.RLimit]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(58)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(58)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = org.apache.mesos.v1.mesos.RLimitInfo.RLimit
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.RLimitInfo(
  )
  /** @param hard
    *   Either both are set or both are not set.
    *   If both are not set, it represents unlimited.
    *   If both are set, we require `soft` &lt;= `hard`.
    */
  @SerialVersionUID(0L)
  final case class RLimit(
      `type`: scala.Option[org.apache.mesos.v1.mesos.RLimitInfo.RLimit.Type] = None,
      hard: scala.Option[Long] = None,
      soft: scala.Option[Long] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[RLimit] with com.trueaccord.lenses.Updatable[RLimit] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
        if (hard.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, hard.get) }
        if (soft.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, soft.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        `type`.foreach { __v =>
          _output__.writeEnum(1, __v.value)
        };
        hard.foreach { __v =>
          _output__.writeUInt64(2, __v)
        };
        soft.foreach { __v =>
          _output__.writeUInt64(3, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.RLimitInfo.RLimit = {
        var __type = this.`type`
        var __hard = this.hard
        var __soft = this.soft
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __type = Some(org.apache.mesos.v1.mesos.RLimitInfo.RLimit.Type.fromValue(_input__.readEnum()))
            case 16 =>
              __hard = Some(_input__.readUInt64())
            case 24 =>
              __soft = Some(_input__.readUInt64())
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.RLimitInfo.RLimit(
            `type` = __type,
            hard = __hard,
            soft = __soft
        )
      }
      def getType: org.apache.mesos.v1.mesos.RLimitInfo.RLimit.Type = `type`.getOrElse(org.apache.mesos.v1.mesos.RLimitInfo.RLimit.Type.UNKNOWN)
      def clearType: RLimit = copy(`type` = None)
      def withType(__v: org.apache.mesos.v1.mesos.RLimitInfo.RLimit.Type): RLimit = copy(`type` = Some(__v))
      def getHard: Long = hard.getOrElse(0L)
      def clearHard: RLimit = copy(hard = None)
      def withHard(__v: Long): RLimit = copy(hard = Some(__v))
      def getSoft: Long = soft.getOrElse(0L)
      def clearSoft: RLimit = copy(soft = None)
      def withSoft(__v: Long): RLimit = copy(soft = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => `type`.map(_.javaValueDescriptor).orNull
          case 2 => hard.orNull
          case 3 => soft.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => hard.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => soft.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.RLimitInfo.RLimit
  }
  
  object RLimit extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.RLimitInfo.RLimit] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.RLimitInfo.RLimit] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.RLimitInfo.RLimit = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.RLimitInfo.RLimit(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.RLimitInfo.RLimit.Type.fromValue(__e.getNumber)),
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Long]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.RLimitInfo.RLimit] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.RLimitInfo.RLimit(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.RLimitInfo.RLimit.Type.fromValue(__e.number)),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Long]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.RLimitInfo.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.RLimitInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => org.apache.mesos.v1.mesos.RLimitInfo.RLimit.Type
      }
    }
    lazy val defaultInstance = org.apache.mesos.v1.mesos.RLimitInfo.RLimit(
    )
    sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
      type EnumType = Type
      def isUnknown: Boolean = false
      def isRlmtAs: Boolean = false
      def isRlmtCore: Boolean = false
      def isRlmtCpu: Boolean = false
      def isRlmtData: Boolean = false
      def isRlmtFsize: Boolean = false
      def isRlmtLocks: Boolean = false
      def isRlmtMemlock: Boolean = false
      def isRlmtMsgqueue: Boolean = false
      def isRlmtNice: Boolean = false
      def isRlmtNofile: Boolean = false
      def isRlmtNproc: Boolean = false
      def isRlmtRss: Boolean = false
      def isRlmtRtprio: Boolean = false
      def isRlmtRttime: Boolean = false
      def isRlmtSigpending: Boolean = false
      def isRlmtStack: Boolean = false
      def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = org.apache.mesos.v1.mesos.RLimitInfo.RLimit.Type
    }
    
    object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
      implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
      @SerialVersionUID(0L)
      case object UNKNOWN extends Type {
        val value = 0
        val index = 0
        val name = "UNKNOWN"
        override def isUnknown: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_AS extends Type {
        val value = 1
        val index = 1
        val name = "RLMT_AS"
        override def isRlmtAs: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_CORE extends Type {
        val value = 2
        val index = 2
        val name = "RLMT_CORE"
        override def isRlmtCore: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_CPU extends Type {
        val value = 3
        val index = 3
        val name = "RLMT_CPU"
        override def isRlmtCpu: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_DATA extends Type {
        val value = 4
        val index = 4
        val name = "RLMT_DATA"
        override def isRlmtData: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_FSIZE extends Type {
        val value = 5
        val index = 5
        val name = "RLMT_FSIZE"
        override def isRlmtFsize: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_LOCKS extends Type {
        val value = 6
        val index = 6
        val name = "RLMT_LOCKS"
        override def isRlmtLocks: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_MEMLOCK extends Type {
        val value = 7
        val index = 7
        val name = "RLMT_MEMLOCK"
        override def isRlmtMemlock: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_MSGQUEUE extends Type {
        val value = 8
        val index = 8
        val name = "RLMT_MSGQUEUE"
        override def isRlmtMsgqueue: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_NICE extends Type {
        val value = 9
        val index = 9
        val name = "RLMT_NICE"
        override def isRlmtNice: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_NOFILE extends Type {
        val value = 10
        val index = 10
        val name = "RLMT_NOFILE"
        override def isRlmtNofile: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_NPROC extends Type {
        val value = 11
        val index = 11
        val name = "RLMT_NPROC"
        override def isRlmtNproc: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_RSS extends Type {
        val value = 12
        val index = 12
        val name = "RLMT_RSS"
        override def isRlmtRss: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_RTPRIO extends Type {
        val value = 13
        val index = 13
        val name = "RLMT_RTPRIO"
        override def isRlmtRtprio: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_RTTIME extends Type {
        val value = 14
        val index = 14
        val name = "RLMT_RTTIME"
        override def isRlmtRttime: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_SIGPENDING extends Type {
        val value = 15
        val index = 15
        val name = "RLMT_SIGPENDING"
        override def isRlmtSigpending: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RLMT_STACK extends Type {
        val value = 16
        val index = 16
        val name = "RLMT_STACK"
        override def isRlmtStack: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
      
      lazy val values = scala.collection.Seq(UNKNOWN, RLMT_AS, RLMT_CORE, RLMT_CPU, RLMT_DATA, RLMT_FSIZE, RLMT_LOCKS, RLMT_MEMLOCK, RLMT_MSGQUEUE, RLMT_NICE, RLMT_NOFILE, RLMT_NPROC, RLMT_RSS, RLMT_RTPRIO, RLMT_RTTIME, RLMT_SIGPENDING, RLMT_STACK)
      def fromValue(value: Int): Type = value match {
        case 0 => UNKNOWN
        case 1 => RLMT_AS
        case 2 => RLMT_CORE
        case 3 => RLMT_CPU
        case 4 => RLMT_DATA
        case 5 => RLMT_FSIZE
        case 6 => RLMT_LOCKS
        case 7 => RLMT_MEMLOCK
        case 8 => RLMT_MSGQUEUE
        case 9 => RLMT_NICE
        case 10 => RLMT_NOFILE
        case 11 => RLMT_NPROC
        case 12 => RLMT_RSS
        case 13 => RLMT_RTPRIO
        case 14 => RLMT_RTTIME
        case 15 => RLMT_SIGPENDING
        case 16 => RLMT_STACK
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.RLimitInfo.RLimit.javaDescriptor.getEnumTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.RLimitInfo.RLimit.scalaDescriptor.enums(0)
    }
    implicit class RLimitLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.RLimitInfo.RLimit]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.RLimitInfo.RLimit](_l) {
      def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.RLimitInfo.RLimit.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
      def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.RLimitInfo.RLimit.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def hard: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getHard)((c_, f_) => c_.copy(hard = Some(f_)))
      def optionalHard: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.hard)((c_, f_) => c_.copy(hard = f_))
      def soft: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getSoft)((c_, f_) => c_.copy(soft = Some(f_)))
      def optionalSoft: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.soft)((c_, f_) => c_.copy(soft = f_))
    }
    final val TYPE_FIELD_NUMBER = 1
    final val HARD_FIELD_NUMBER = 2
    final val SOFT_FIELD_NUMBER = 3
  }
  
  implicit class RLimitInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.RLimitInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.RLimitInfo](_l) {
    def rlimits: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.RLimitInfo.RLimit]] = field(_.rlimits)((c_, f_) => c_.copy(rlimits = f_))
  }
  final val RLIMITS_FIELD_NUMBER = 1
}
