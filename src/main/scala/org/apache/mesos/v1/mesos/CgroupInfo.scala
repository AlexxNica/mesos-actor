// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Linux control group (cgroup) information.
  */
@SerialVersionUID(0L)
final case class CgroupInfo(
    netCls: scala.Option[org.apache.mesos.v1.mesos.CgroupInfo.NetCls] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CgroupInfo] with com.trueaccord.lenses.Updatable[CgroupInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (netCls.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(netCls.get.serializedSize) + netCls.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      netCls.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.CgroupInfo = {
      var __netCls = this.netCls
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __netCls = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __netCls.getOrElse(org.apache.mesos.v1.mesos.CgroupInfo.NetCls.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.CgroupInfo(
          netCls = __netCls
      )
    }
    def getNetCls: org.apache.mesos.v1.mesos.CgroupInfo.NetCls = netCls.getOrElse(org.apache.mesos.v1.mesos.CgroupInfo.NetCls.defaultInstance)
    def clearNetCls: CgroupInfo = copy(netCls = None)
    def withNetCls(__v: org.apache.mesos.v1.mesos.CgroupInfo.NetCls): CgroupInfo = copy(netCls = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => netCls.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => netCls.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.CgroupInfo
}

object CgroupInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CgroupInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CgroupInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.CgroupInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.CgroupInfo(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CgroupInfo.NetCls]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.CgroupInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.CgroupInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CgroupInfo.NetCls]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(62)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(62)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = org.apache.mesos.v1.mesos.CgroupInfo.NetCls
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.CgroupInfo(
  )
  /** Configuration of a net_cls cgroup subsystem.
    *
    * @param classid
    *   The 32-bit classid consists of two parts, a 16 bit major handle
    *   and a 16-bit minor handle. The major and minor handle are
    *   represented using the format 0xAAAABBBB, where 0xAAAA is the
    *   16-bit major handle and 0xBBBB is the 16-bit minor handle.
    */
  @SerialVersionUID(0L)
  final case class NetCls(
      classid: scala.Option[Int] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[NetCls] with com.trueaccord.lenses.Updatable[NetCls] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (classid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, classid.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        classid.foreach { __v =>
          _output__.writeUInt32(1, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.CgroupInfo.NetCls = {
        var __classid = this.classid
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __classid = Some(_input__.readUInt32())
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.CgroupInfo.NetCls(
            classid = __classid
        )
      }
      def getClassid: Int = classid.getOrElse(0)
      def clearClassid: NetCls = copy(classid = None)
      def withClassid(__v: Int): NetCls = copy(classid = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => classid.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => classid.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.CgroupInfo.NetCls
  }
  
  object NetCls extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CgroupInfo.NetCls] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CgroupInfo.NetCls] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.CgroupInfo.NetCls = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.CgroupInfo.NetCls(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.CgroupInfo.NetCls] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.CgroupInfo.NetCls(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.CgroupInfo.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.CgroupInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.CgroupInfo.NetCls(
    )
    implicit class NetClsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CgroupInfo.NetCls]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.CgroupInfo.NetCls](_l) {
      def classid: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getClassid)((c_, f_) => c_.copy(classid = Some(f_)))
      def optionalClassid: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.classid)((c_, f_) => c_.copy(classid = f_))
    }
    final val CLASSID_FIELD_NUMBER = 1
  }
  
  implicit class CgroupInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CgroupInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.CgroupInfo](_l) {
    def netCls: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CgroupInfo.NetCls] = field(_.getNetCls)((c_, f_) => c_.copy(netCls = Some(f_)))
    def optionalNetCls: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CgroupInfo.NetCls]] = field(_.netCls)((c_, f_) => c_.copy(netCls = f_))
  }
  final val NET_CLS_FIELD_NUMBER = 1
}
