// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes a task. Passed from the scheduler all the way to an
  * executor (see SchedulerDriver::launchTasks and
  * Executor::launchTask). Either ExecutorInfo or CommandInfo should be set.
  * A different executor can be used to launch this task, and subsequent tasks
  * meant for the same executor can reuse the same ExecutorInfo struct.
  *
  * @param container
  *   Task provided with a container will launch the container as part
  *   of this task paired with the task's CommandInfo.
  * @param healthCheck
  *   A health check for the task. Implemented for executor-less
  *   command-based tasks. For tasks that specify an executor, it is
  *   the executor's responsibility to implement the health checking.
  * @param check
  *   A general check for the task. Implemented for all built-in executors.
  *   For tasks that specify an executor, it is the executor's responsibility
  *   to implement checking support. Executors should (all built-in executors
  *   will) neither interpret nor act on the check's result.
  *  
  *   NOTE: Check support in built-in executors is experimental.
  *  
  *   TODO(alexr): Consider supporting multiple checks per task.
  * @param killPolicy
  *   A kill policy for the task. Implemented for executor-less
  *   command-based and docker tasks. For tasks that specify an
  *   executor, it is the executor's responsibility to implement
  *   the kill policy.
  * @param labels
  *   Labels are free-form key value pairs which are exposed through
  *   master and agent endpoints. Labels will not be interpreted or
  *   acted upon by Mesos itself. As opposed to the data field, labels
  *   will be kept in memory on master and agent processes. Therefore,
  *   labels should be used to tag tasks with light-weight meta-data.
  *   Labels should not contain duplicate key-value pairs.
  * @param discovery
  *   Service discovery information for the task. It is not interpreted
  *   or acted upon by Mesos. It is up to a service discovery system
  *   to use this information as needed and to handle tasks without
  *   service discovery information.
  */
@SerialVersionUID(0L)
final case class TaskInfo(
    name: String,
    taskId: org.apache.mesos.v1.mesos.TaskID,
    agentId: org.apache.mesos.v1.mesos.AgentID,
    resources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty,
    executor: scala.Option[org.apache.mesos.v1.mesos.ExecutorInfo] = None,
    command: scala.Option[org.apache.mesos.v1.mesos.CommandInfo] = None,
    container: scala.Option[org.apache.mesos.v1.mesos.ContainerInfo] = None,
    healthCheck: scala.Option[org.apache.mesos.v1.mesos.HealthCheck] = None,
    check: scala.Option[org.apache.mesos.v1.mesos.CheckInfo] = None,
    killPolicy: scala.Option[org.apache.mesos.v1.mesos.KillPolicy] = None,
    data: scala.Option[_root_.com.google.protobuf.ByteString] = None,
    labels: scala.Option[org.apache.mesos.v1.mesos.Labels] = None,
    discovery: scala.Option[org.apache.mesos.v1.mesos.DiscoveryInfo] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TaskInfo] with com.trueaccord.lenses.Updatable[TaskInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, name)
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(taskId.serializedSize) + taskId.serializedSize
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agentId.serializedSize) + agentId.serializedSize
      resources.foreach(resources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(resources.serializedSize) + resources.serializedSize)
      if (executor.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(executor.get.serializedSize) + executor.get.serializedSize }
      if (command.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.get.serializedSize) + command.get.serializedSize }
      if (container.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(container.get.serializedSize) + container.get.serializedSize }
      if (healthCheck.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(healthCheck.get.serializedSize) + healthCheck.get.serializedSize }
      if (check.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(check.get.serializedSize) + check.get.serializedSize }
      if (killPolicy.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(killPolicy.get.serializedSize) + killPolicy.get.serializedSize }
      if (data.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(6, data.get) }
      if (labels.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(labels.get.serializedSize) + labels.get.serializedSize }
      if (discovery.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(discovery.get.serializedSize) + discovery.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, name)
      _output__.writeTag(2, 2)
      _output__.writeUInt32NoTag(taskId.serializedSize)
      taskId.writeTo(_output__)
      _output__.writeTag(3, 2)
      _output__.writeUInt32NoTag(agentId.serializedSize)
      agentId.writeTo(_output__)
      resources.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      executor.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      data.foreach { __v =>
        _output__.writeBytes(6, __v)
      };
      command.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      healthCheck.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      container.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      labels.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      discovery.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      killPolicy.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      check.foreach { __v =>
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.TaskInfo = {
      var __name = this.name
      var __taskId = this.taskId
      var __agentId = this.agentId
      val __resources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.resources)
      var __executor = this.executor
      var __command = this.command
      var __container = this.container
      var __healthCheck = this.healthCheck
      var __check = this.check
      var __killPolicy = this.killPolicy
      var __data = this.data
      var __labels = this.labels
      var __discovery = this.discovery
      var __requiredFields0: Long = 0x7L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __taskId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __taskId)
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __agentId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __agentId)
            __requiredFields0 &= 0xfffffffffffffffbL
          case 34 =>
            __resources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
          case 42 =>
            __executor = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __executor.getOrElse(org.apache.mesos.v1.mesos.ExecutorInfo.defaultInstance)))
          case 58 =>
            __command = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __command.getOrElse(org.apache.mesos.v1.mesos.CommandInfo.defaultInstance)))
          case 74 =>
            __container = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __container.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.defaultInstance)))
          case 66 =>
            __healthCheck = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __healthCheck.getOrElse(org.apache.mesos.v1.mesos.HealthCheck.defaultInstance)))
          case 106 =>
            __check = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __check.getOrElse(org.apache.mesos.v1.mesos.CheckInfo.defaultInstance)))
          case 98 =>
            __killPolicy = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __killPolicy.getOrElse(org.apache.mesos.v1.mesos.KillPolicy.defaultInstance)))
          case 50 =>
            __data = Some(_input__.readBytes())
          case 82 =>
            __labels = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)))
          case 90 =>
            __discovery = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __discovery.getOrElse(org.apache.mesos.v1.mesos.DiscoveryInfo.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.TaskInfo(
          name = __name,
          taskId = __taskId,
          agentId = __agentId,
          resources = __resources.result(),
          executor = __executor,
          command = __command,
          container = __container,
          healthCheck = __healthCheck,
          check = __check,
          killPolicy = __killPolicy,
          data = __data,
          labels = __labels,
          discovery = __discovery
      )
    }
    def withName(__v: String): TaskInfo = copy(name = __v)
    def withTaskId(__v: org.apache.mesos.v1.mesos.TaskID): TaskInfo = copy(taskId = __v)
    def withAgentId(__v: org.apache.mesos.v1.mesos.AgentID): TaskInfo = copy(agentId = __v)
    def clearResources = copy(resources = _root_.scala.collection.Seq.empty)
    def addResources(__vs: org.apache.mesos.v1.mesos.Resource*): TaskInfo = addAllResources(__vs)
    def addAllResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): TaskInfo = copy(resources = resources ++ __vs)
    def withResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): TaskInfo = copy(resources = __v)
    def getExecutor: org.apache.mesos.v1.mesos.ExecutorInfo = executor.getOrElse(org.apache.mesos.v1.mesos.ExecutorInfo.defaultInstance)
    def clearExecutor: TaskInfo = copy(executor = None)
    def withExecutor(__v: org.apache.mesos.v1.mesos.ExecutorInfo): TaskInfo = copy(executor = Some(__v))
    def getCommand: org.apache.mesos.v1.mesos.CommandInfo = command.getOrElse(org.apache.mesos.v1.mesos.CommandInfo.defaultInstance)
    def clearCommand: TaskInfo = copy(command = None)
    def withCommand(__v: org.apache.mesos.v1.mesos.CommandInfo): TaskInfo = copy(command = Some(__v))
    def getContainer: org.apache.mesos.v1.mesos.ContainerInfo = container.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.defaultInstance)
    def clearContainer: TaskInfo = copy(container = None)
    def withContainer(__v: org.apache.mesos.v1.mesos.ContainerInfo): TaskInfo = copy(container = Some(__v))
    def getHealthCheck: org.apache.mesos.v1.mesos.HealthCheck = healthCheck.getOrElse(org.apache.mesos.v1.mesos.HealthCheck.defaultInstance)
    def clearHealthCheck: TaskInfo = copy(healthCheck = None)
    def withHealthCheck(__v: org.apache.mesos.v1.mesos.HealthCheck): TaskInfo = copy(healthCheck = Some(__v))
    def getCheck: org.apache.mesos.v1.mesos.CheckInfo = check.getOrElse(org.apache.mesos.v1.mesos.CheckInfo.defaultInstance)
    def clearCheck: TaskInfo = copy(check = None)
    def withCheck(__v: org.apache.mesos.v1.mesos.CheckInfo): TaskInfo = copy(check = Some(__v))
    def getKillPolicy: org.apache.mesos.v1.mesos.KillPolicy = killPolicy.getOrElse(org.apache.mesos.v1.mesos.KillPolicy.defaultInstance)
    def clearKillPolicy: TaskInfo = copy(killPolicy = None)
    def withKillPolicy(__v: org.apache.mesos.v1.mesos.KillPolicy): TaskInfo = copy(killPolicy = Some(__v))
    def getData: _root_.com.google.protobuf.ByteString = data.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def clearData: TaskInfo = copy(data = None)
    def withData(__v: _root_.com.google.protobuf.ByteString): TaskInfo = copy(data = Some(__v))
    def getLabels: org.apache.mesos.v1.mesos.Labels = labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)
    def clearLabels: TaskInfo = copy(labels = None)
    def withLabels(__v: org.apache.mesos.v1.mesos.Labels): TaskInfo = copy(labels = Some(__v))
    def getDiscovery: org.apache.mesos.v1.mesos.DiscoveryInfo = discovery.getOrElse(org.apache.mesos.v1.mesos.DiscoveryInfo.defaultInstance)
    def clearDiscovery: TaskInfo = copy(discovery = None)
    def withDiscovery(__v: org.apache.mesos.v1.mesos.DiscoveryInfo): TaskInfo = copy(discovery = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => name
        case 2 => taskId
        case 3 => agentId
        case 4 => resources
        case 5 => executor.orNull
        case 7 => command.orNull
        case 9 => container.orNull
        case 8 => healthCheck.orNull
        case 13 => check.orNull
        case 12 => killPolicy.orNull
        case 6 => data.orNull
        case 10 => labels.orNull
        case 11 => discovery.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => taskId.toPMessage
        case 3 => agentId.toPMessage
        case 4 => _root_.scalapb.descriptors.PRepeated(resources.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 5 => executor.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => command.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => container.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => healthCheck.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => check.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => killPolicy.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => data.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => labels.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => discovery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.TaskInfo
}

object TaskInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.TaskInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.TaskInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.TaskInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.TaskInfo(
      __fieldsMap(__fields.get(0)).asInstanceOf[String],
      __fieldsMap(__fields.get(1)).asInstanceOf[org.apache.mesos.v1.mesos.TaskID],
      __fieldsMap(__fields.get(2)).asInstanceOf[org.apache.mesos.v1.mesos.AgentID],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ExecutorInfo]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CommandInfo]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ContainerInfo]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.HealthCheck]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CheckInfo]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.KillPolicy]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.com.google.protobuf.ByteString]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Labels]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.DiscoveryInfo]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.TaskInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.TaskInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[org.apache.mesos.v1.mesos.TaskID],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[org.apache.mesos.v1.mesos.AgentID],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ExecutorInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CommandInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ContainerInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.HealthCheck]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CheckInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.KillPolicy]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.com.google.protobuf.ByteString]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Labels]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.DiscoveryInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(39)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(39)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = org.apache.mesos.v1.mesos.TaskID
      case 3 => __out = org.apache.mesos.v1.mesos.AgentID
      case 4 => __out = org.apache.mesos.v1.mesos.Resource
      case 5 => __out = org.apache.mesos.v1.mesos.ExecutorInfo
      case 7 => __out = org.apache.mesos.v1.mesos.CommandInfo
      case 9 => __out = org.apache.mesos.v1.mesos.ContainerInfo
      case 8 => __out = org.apache.mesos.v1.mesos.HealthCheck
      case 13 => __out = org.apache.mesos.v1.mesos.CheckInfo
      case 12 => __out = org.apache.mesos.v1.mesos.KillPolicy
      case 10 => __out = org.apache.mesos.v1.mesos.Labels
      case 11 => __out = org.apache.mesos.v1.mesos.DiscoveryInfo
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.TaskInfo(
    name = "",
    taskId = org.apache.mesos.v1.mesos.TaskID.defaultInstance,
    agentId = org.apache.mesos.v1.mesos.AgentID.defaultInstance
  )
  implicit class TaskInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TaskInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.TaskInfo](_l) {
    def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def taskId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TaskID] = field(_.taskId)((c_, f_) => c_.copy(taskId = f_))
    def agentId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.AgentID] = field(_.agentId)((c_, f_) => c_.copy(agentId = f_))
    def resources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.resources)((c_, f_) => c_.copy(resources = f_))
    def executor: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ExecutorInfo] = field(_.getExecutor)((c_, f_) => c_.copy(executor = Some(f_)))
    def optionalExecutor: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ExecutorInfo]] = field(_.executor)((c_, f_) => c_.copy(executor = f_))
    def command: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CommandInfo] = field(_.getCommand)((c_, f_) => c_.copy(command = Some(f_)))
    def optionalCommand: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CommandInfo]] = field(_.command)((c_, f_) => c_.copy(command = f_))
    def container: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo] = field(_.getContainer)((c_, f_) => c_.copy(container = Some(f_)))
    def optionalContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ContainerInfo]] = field(_.container)((c_, f_) => c_.copy(container = f_))
    def healthCheck: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.HealthCheck] = field(_.getHealthCheck)((c_, f_) => c_.copy(healthCheck = Some(f_)))
    def optionalHealthCheck: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.HealthCheck]] = field(_.healthCheck)((c_, f_) => c_.copy(healthCheck = f_))
    def check: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo] = field(_.getCheck)((c_, f_) => c_.copy(check = Some(f_)))
    def optionalCheck: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CheckInfo]] = field(_.check)((c_, f_) => c_.copy(check = f_))
    def killPolicy: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.KillPolicy] = field(_.getKillPolicy)((c_, f_) => c_.copy(killPolicy = Some(f_)))
    def optionalKillPolicy: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.KillPolicy]] = field(_.killPolicy)((c_, f_) => c_.copy(killPolicy = f_))
    def data: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getData)((c_, f_) => c_.copy(data = Some(f_)))
    def optionalData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[_root_.com.google.protobuf.ByteString]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def labels: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Labels] = field(_.getLabels)((c_, f_) => c_.copy(labels = Some(f_)))
    def optionalLabels: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Labels]] = field(_.labels)((c_, f_) => c_.copy(labels = f_))
    def discovery: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.DiscoveryInfo] = field(_.getDiscovery)((c_, f_) => c_.copy(discovery = Some(f_)))
    def optionalDiscovery: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.DiscoveryInfo]] = field(_.discovery)((c_, f_) => c_.copy(discovery = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val TASK_ID_FIELD_NUMBER = 2
  final val AGENT_ID_FIELD_NUMBER = 3
  final val RESOURCES_FIELD_NUMBER = 4
  final val EXECUTOR_FIELD_NUMBER = 5
  final val COMMAND_FIELD_NUMBER = 7
  final val CONTAINER_FIELD_NUMBER = 9
  final val HEALTH_CHECK_FIELD_NUMBER = 8
  final val CHECK_FIELD_NUMBER = 13
  final val KILL_POLICY_FIELD_NUMBER = 12
  final val DATA_FIELD_NUMBER = 6
  final val LABELS_FIELD_NUMBER = 10
  final val DISCOVERY_FIELD_NUMBER = 11
}
