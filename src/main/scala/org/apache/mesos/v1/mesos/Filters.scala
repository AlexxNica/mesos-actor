// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes possible filters that can be applied to unused resources
  * (see SchedulerDriver::launchTasks) to influence the allocator.
  *
  * @param refuseSeconds
  *   Time to consider unused resources refused. Note that all unused
  *   resources will be considered refused and use the default value
  *   (below) regardless of whether Filters was passed to
  *   SchedulerDriver::launchTasks. You MUST pass Filters with this
  *   field set to change this behavior (i.e., get another offer which
  *   includes unused resources sooner or later than the default).
  */
@SerialVersionUID(0L)
final case class Filters(
    refuseSeconds: scala.Option[Double] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Filters] with com.trueaccord.lenses.Updatable[Filters] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (refuseSeconds.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, refuseSeconds.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      refuseSeconds.foreach { __v =>
        _output__.writeDouble(1, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Filters = {
      var __refuseSeconds = this.refuseSeconds
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __refuseSeconds = Some(_input__.readDouble())
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.Filters(
          refuseSeconds = __refuseSeconds
      )
    }
    def getRefuseSeconds: Double = refuseSeconds.getOrElse(5.0)
    def clearRefuseSeconds: Filters = copy(refuseSeconds = None)
    def withRefuseSeconds(__v: Double): Filters = copy(refuseSeconds = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => refuseSeconds.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => refuseSeconds.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.Filters
}

object Filters extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Filters] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Filters] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Filters = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.Filters(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Double]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Filters] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.Filters(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Double]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(44)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(44)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.Filters(
  )
  implicit class FiltersLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Filters]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Filters](_l) {
    def refuseSeconds: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getRefuseSeconds)((c_, f_) => c_.copy(refuseSeconds = Some(f_)))
    def optionalRefuseSeconds: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.refuseSeconds)((c_, f_) => c_.copy(refuseSeconds = f_))
  }
  final val REFUSE_SECONDS_FIELD_NUMBER = 1
}
