// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

@SerialVersionUID(0L)
final case class IcmpStatistics(
    inMsgs: scala.Option[Long] = None,
    inErrors: scala.Option[Long] = None,
    inCsumErrors: scala.Option[Long] = None,
    inDestUnreachs: scala.Option[Long] = None,
    inTimeExcds: scala.Option[Long] = None,
    inParmProbs: scala.Option[Long] = None,
    inSrcQuenchs: scala.Option[Long] = None,
    inRedirects: scala.Option[Long] = None,
    inEchos: scala.Option[Long] = None,
    inEchoReps: scala.Option[Long] = None,
    inTimestamps: scala.Option[Long] = None,
    inTimestampReps: scala.Option[Long] = None,
    inAddrMasks: scala.Option[Long] = None,
    inAddrMaskReps: scala.Option[Long] = None,
    outMsgs: scala.Option[Long] = None,
    outErrors: scala.Option[Long] = None,
    outDestUnreachs: scala.Option[Long] = None,
    outTimeExcds: scala.Option[Long] = None,
    outParmProbs: scala.Option[Long] = None,
    outSrcQuenchs: scala.Option[Long] = None,
    outRedirects: scala.Option[Long] = None,
    outEchos: scala.Option[Long] = None,
    outEchoReps: scala.Option[Long] = None,
    outTimestamps: scala.Option[Long] = None,
    outTimestampReps: scala.Option[Long] = None,
    outAddrMasks: scala.Option[Long] = None,
    outAddrMaskReps: scala.Option[Long] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[IcmpStatistics] with com.trueaccord.lenses.Updatable[IcmpStatistics] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (inMsgs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, inMsgs.get) }
      if (inErrors.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, inErrors.get) }
      if (inCsumErrors.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, inCsumErrors.get) }
      if (inDestUnreachs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, inDestUnreachs.get) }
      if (inTimeExcds.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, inTimeExcds.get) }
      if (inParmProbs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, inParmProbs.get) }
      if (inSrcQuenchs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, inSrcQuenchs.get) }
      if (inRedirects.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, inRedirects.get) }
      if (inEchos.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, inEchos.get) }
      if (inEchoReps.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, inEchoReps.get) }
      if (inTimestamps.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, inTimestamps.get) }
      if (inTimestampReps.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(12, inTimestampReps.get) }
      if (inAddrMasks.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(13, inAddrMasks.get) }
      if (inAddrMaskReps.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(14, inAddrMaskReps.get) }
      if (outMsgs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(15, outMsgs.get) }
      if (outErrors.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(16, outErrors.get) }
      if (outDestUnreachs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(17, outDestUnreachs.get) }
      if (outTimeExcds.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(18, outTimeExcds.get) }
      if (outParmProbs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(19, outParmProbs.get) }
      if (outSrcQuenchs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(20, outSrcQuenchs.get) }
      if (outRedirects.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(21, outRedirects.get) }
      if (outEchos.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(22, outEchos.get) }
      if (outEchoReps.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(23, outEchoReps.get) }
      if (outTimestamps.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(24, outTimestamps.get) }
      if (outTimestampReps.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(25, outTimestampReps.get) }
      if (outAddrMasks.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(26, outAddrMasks.get) }
      if (outAddrMaskReps.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(27, outAddrMaskReps.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      inMsgs.foreach { __v =>
        _output__.writeInt64(1, __v)
      };
      inErrors.foreach { __v =>
        _output__.writeInt64(2, __v)
      };
      inCsumErrors.foreach { __v =>
        _output__.writeInt64(3, __v)
      };
      inDestUnreachs.foreach { __v =>
        _output__.writeInt64(4, __v)
      };
      inTimeExcds.foreach { __v =>
        _output__.writeInt64(5, __v)
      };
      inParmProbs.foreach { __v =>
        _output__.writeInt64(6, __v)
      };
      inSrcQuenchs.foreach { __v =>
        _output__.writeInt64(7, __v)
      };
      inRedirects.foreach { __v =>
        _output__.writeInt64(8, __v)
      };
      inEchos.foreach { __v =>
        _output__.writeInt64(9, __v)
      };
      inEchoReps.foreach { __v =>
        _output__.writeInt64(10, __v)
      };
      inTimestamps.foreach { __v =>
        _output__.writeInt64(11, __v)
      };
      inTimestampReps.foreach { __v =>
        _output__.writeInt64(12, __v)
      };
      inAddrMasks.foreach { __v =>
        _output__.writeInt64(13, __v)
      };
      inAddrMaskReps.foreach { __v =>
        _output__.writeInt64(14, __v)
      };
      outMsgs.foreach { __v =>
        _output__.writeInt64(15, __v)
      };
      outErrors.foreach { __v =>
        _output__.writeInt64(16, __v)
      };
      outDestUnreachs.foreach { __v =>
        _output__.writeInt64(17, __v)
      };
      outTimeExcds.foreach { __v =>
        _output__.writeInt64(18, __v)
      };
      outParmProbs.foreach { __v =>
        _output__.writeInt64(19, __v)
      };
      outSrcQuenchs.foreach { __v =>
        _output__.writeInt64(20, __v)
      };
      outRedirects.foreach { __v =>
        _output__.writeInt64(21, __v)
      };
      outEchos.foreach { __v =>
        _output__.writeInt64(22, __v)
      };
      outEchoReps.foreach { __v =>
        _output__.writeInt64(23, __v)
      };
      outTimestamps.foreach { __v =>
        _output__.writeInt64(24, __v)
      };
      outTimestampReps.foreach { __v =>
        _output__.writeInt64(25, __v)
      };
      outAddrMasks.foreach { __v =>
        _output__.writeInt64(26, __v)
      };
      outAddrMaskReps.foreach { __v =>
        _output__.writeInt64(27, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.IcmpStatistics = {
      var __inMsgs = this.inMsgs
      var __inErrors = this.inErrors
      var __inCsumErrors = this.inCsumErrors
      var __inDestUnreachs = this.inDestUnreachs
      var __inTimeExcds = this.inTimeExcds
      var __inParmProbs = this.inParmProbs
      var __inSrcQuenchs = this.inSrcQuenchs
      var __inRedirects = this.inRedirects
      var __inEchos = this.inEchos
      var __inEchoReps = this.inEchoReps
      var __inTimestamps = this.inTimestamps
      var __inTimestampReps = this.inTimestampReps
      var __inAddrMasks = this.inAddrMasks
      var __inAddrMaskReps = this.inAddrMaskReps
      var __outMsgs = this.outMsgs
      var __outErrors = this.outErrors
      var __outDestUnreachs = this.outDestUnreachs
      var __outTimeExcds = this.outTimeExcds
      var __outParmProbs = this.outParmProbs
      var __outSrcQuenchs = this.outSrcQuenchs
      var __outRedirects = this.outRedirects
      var __outEchos = this.outEchos
      var __outEchoReps = this.outEchoReps
      var __outTimestamps = this.outTimestamps
      var __outTimestampReps = this.outTimestampReps
      var __outAddrMasks = this.outAddrMasks
      var __outAddrMaskReps = this.outAddrMaskReps
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __inMsgs = Some(_input__.readInt64())
          case 16 =>
            __inErrors = Some(_input__.readInt64())
          case 24 =>
            __inCsumErrors = Some(_input__.readInt64())
          case 32 =>
            __inDestUnreachs = Some(_input__.readInt64())
          case 40 =>
            __inTimeExcds = Some(_input__.readInt64())
          case 48 =>
            __inParmProbs = Some(_input__.readInt64())
          case 56 =>
            __inSrcQuenchs = Some(_input__.readInt64())
          case 64 =>
            __inRedirects = Some(_input__.readInt64())
          case 72 =>
            __inEchos = Some(_input__.readInt64())
          case 80 =>
            __inEchoReps = Some(_input__.readInt64())
          case 88 =>
            __inTimestamps = Some(_input__.readInt64())
          case 96 =>
            __inTimestampReps = Some(_input__.readInt64())
          case 104 =>
            __inAddrMasks = Some(_input__.readInt64())
          case 112 =>
            __inAddrMaskReps = Some(_input__.readInt64())
          case 120 =>
            __outMsgs = Some(_input__.readInt64())
          case 128 =>
            __outErrors = Some(_input__.readInt64())
          case 136 =>
            __outDestUnreachs = Some(_input__.readInt64())
          case 144 =>
            __outTimeExcds = Some(_input__.readInt64())
          case 152 =>
            __outParmProbs = Some(_input__.readInt64())
          case 160 =>
            __outSrcQuenchs = Some(_input__.readInt64())
          case 168 =>
            __outRedirects = Some(_input__.readInt64())
          case 176 =>
            __outEchos = Some(_input__.readInt64())
          case 184 =>
            __outEchoReps = Some(_input__.readInt64())
          case 192 =>
            __outTimestamps = Some(_input__.readInt64())
          case 200 =>
            __outTimestampReps = Some(_input__.readInt64())
          case 208 =>
            __outAddrMasks = Some(_input__.readInt64())
          case 216 =>
            __outAddrMaskReps = Some(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.IcmpStatistics(
          inMsgs = __inMsgs,
          inErrors = __inErrors,
          inCsumErrors = __inCsumErrors,
          inDestUnreachs = __inDestUnreachs,
          inTimeExcds = __inTimeExcds,
          inParmProbs = __inParmProbs,
          inSrcQuenchs = __inSrcQuenchs,
          inRedirects = __inRedirects,
          inEchos = __inEchos,
          inEchoReps = __inEchoReps,
          inTimestamps = __inTimestamps,
          inTimestampReps = __inTimestampReps,
          inAddrMasks = __inAddrMasks,
          inAddrMaskReps = __inAddrMaskReps,
          outMsgs = __outMsgs,
          outErrors = __outErrors,
          outDestUnreachs = __outDestUnreachs,
          outTimeExcds = __outTimeExcds,
          outParmProbs = __outParmProbs,
          outSrcQuenchs = __outSrcQuenchs,
          outRedirects = __outRedirects,
          outEchos = __outEchos,
          outEchoReps = __outEchoReps,
          outTimestamps = __outTimestamps,
          outTimestampReps = __outTimestampReps,
          outAddrMasks = __outAddrMasks,
          outAddrMaskReps = __outAddrMaskReps
      )
    }
    def getInMsgs: Long = inMsgs.getOrElse(0L)
    def clearInMsgs: IcmpStatistics = copy(inMsgs = None)
    def withInMsgs(__v: Long): IcmpStatistics = copy(inMsgs = Some(__v))
    def getInErrors: Long = inErrors.getOrElse(0L)
    def clearInErrors: IcmpStatistics = copy(inErrors = None)
    def withInErrors(__v: Long): IcmpStatistics = copy(inErrors = Some(__v))
    def getInCsumErrors: Long = inCsumErrors.getOrElse(0L)
    def clearInCsumErrors: IcmpStatistics = copy(inCsumErrors = None)
    def withInCsumErrors(__v: Long): IcmpStatistics = copy(inCsumErrors = Some(__v))
    def getInDestUnreachs: Long = inDestUnreachs.getOrElse(0L)
    def clearInDestUnreachs: IcmpStatistics = copy(inDestUnreachs = None)
    def withInDestUnreachs(__v: Long): IcmpStatistics = copy(inDestUnreachs = Some(__v))
    def getInTimeExcds: Long = inTimeExcds.getOrElse(0L)
    def clearInTimeExcds: IcmpStatistics = copy(inTimeExcds = None)
    def withInTimeExcds(__v: Long): IcmpStatistics = copy(inTimeExcds = Some(__v))
    def getInParmProbs: Long = inParmProbs.getOrElse(0L)
    def clearInParmProbs: IcmpStatistics = copy(inParmProbs = None)
    def withInParmProbs(__v: Long): IcmpStatistics = copy(inParmProbs = Some(__v))
    def getInSrcQuenchs: Long = inSrcQuenchs.getOrElse(0L)
    def clearInSrcQuenchs: IcmpStatistics = copy(inSrcQuenchs = None)
    def withInSrcQuenchs(__v: Long): IcmpStatistics = copy(inSrcQuenchs = Some(__v))
    def getInRedirects: Long = inRedirects.getOrElse(0L)
    def clearInRedirects: IcmpStatistics = copy(inRedirects = None)
    def withInRedirects(__v: Long): IcmpStatistics = copy(inRedirects = Some(__v))
    def getInEchos: Long = inEchos.getOrElse(0L)
    def clearInEchos: IcmpStatistics = copy(inEchos = None)
    def withInEchos(__v: Long): IcmpStatistics = copy(inEchos = Some(__v))
    def getInEchoReps: Long = inEchoReps.getOrElse(0L)
    def clearInEchoReps: IcmpStatistics = copy(inEchoReps = None)
    def withInEchoReps(__v: Long): IcmpStatistics = copy(inEchoReps = Some(__v))
    def getInTimestamps: Long = inTimestamps.getOrElse(0L)
    def clearInTimestamps: IcmpStatistics = copy(inTimestamps = None)
    def withInTimestamps(__v: Long): IcmpStatistics = copy(inTimestamps = Some(__v))
    def getInTimestampReps: Long = inTimestampReps.getOrElse(0L)
    def clearInTimestampReps: IcmpStatistics = copy(inTimestampReps = None)
    def withInTimestampReps(__v: Long): IcmpStatistics = copy(inTimestampReps = Some(__v))
    def getInAddrMasks: Long = inAddrMasks.getOrElse(0L)
    def clearInAddrMasks: IcmpStatistics = copy(inAddrMasks = None)
    def withInAddrMasks(__v: Long): IcmpStatistics = copy(inAddrMasks = Some(__v))
    def getInAddrMaskReps: Long = inAddrMaskReps.getOrElse(0L)
    def clearInAddrMaskReps: IcmpStatistics = copy(inAddrMaskReps = None)
    def withInAddrMaskReps(__v: Long): IcmpStatistics = copy(inAddrMaskReps = Some(__v))
    def getOutMsgs: Long = outMsgs.getOrElse(0L)
    def clearOutMsgs: IcmpStatistics = copy(outMsgs = None)
    def withOutMsgs(__v: Long): IcmpStatistics = copy(outMsgs = Some(__v))
    def getOutErrors: Long = outErrors.getOrElse(0L)
    def clearOutErrors: IcmpStatistics = copy(outErrors = None)
    def withOutErrors(__v: Long): IcmpStatistics = copy(outErrors = Some(__v))
    def getOutDestUnreachs: Long = outDestUnreachs.getOrElse(0L)
    def clearOutDestUnreachs: IcmpStatistics = copy(outDestUnreachs = None)
    def withOutDestUnreachs(__v: Long): IcmpStatistics = copy(outDestUnreachs = Some(__v))
    def getOutTimeExcds: Long = outTimeExcds.getOrElse(0L)
    def clearOutTimeExcds: IcmpStatistics = copy(outTimeExcds = None)
    def withOutTimeExcds(__v: Long): IcmpStatistics = copy(outTimeExcds = Some(__v))
    def getOutParmProbs: Long = outParmProbs.getOrElse(0L)
    def clearOutParmProbs: IcmpStatistics = copy(outParmProbs = None)
    def withOutParmProbs(__v: Long): IcmpStatistics = copy(outParmProbs = Some(__v))
    def getOutSrcQuenchs: Long = outSrcQuenchs.getOrElse(0L)
    def clearOutSrcQuenchs: IcmpStatistics = copy(outSrcQuenchs = None)
    def withOutSrcQuenchs(__v: Long): IcmpStatistics = copy(outSrcQuenchs = Some(__v))
    def getOutRedirects: Long = outRedirects.getOrElse(0L)
    def clearOutRedirects: IcmpStatistics = copy(outRedirects = None)
    def withOutRedirects(__v: Long): IcmpStatistics = copy(outRedirects = Some(__v))
    def getOutEchos: Long = outEchos.getOrElse(0L)
    def clearOutEchos: IcmpStatistics = copy(outEchos = None)
    def withOutEchos(__v: Long): IcmpStatistics = copy(outEchos = Some(__v))
    def getOutEchoReps: Long = outEchoReps.getOrElse(0L)
    def clearOutEchoReps: IcmpStatistics = copy(outEchoReps = None)
    def withOutEchoReps(__v: Long): IcmpStatistics = copy(outEchoReps = Some(__v))
    def getOutTimestamps: Long = outTimestamps.getOrElse(0L)
    def clearOutTimestamps: IcmpStatistics = copy(outTimestamps = None)
    def withOutTimestamps(__v: Long): IcmpStatistics = copy(outTimestamps = Some(__v))
    def getOutTimestampReps: Long = outTimestampReps.getOrElse(0L)
    def clearOutTimestampReps: IcmpStatistics = copy(outTimestampReps = None)
    def withOutTimestampReps(__v: Long): IcmpStatistics = copy(outTimestampReps = Some(__v))
    def getOutAddrMasks: Long = outAddrMasks.getOrElse(0L)
    def clearOutAddrMasks: IcmpStatistics = copy(outAddrMasks = None)
    def withOutAddrMasks(__v: Long): IcmpStatistics = copy(outAddrMasks = Some(__v))
    def getOutAddrMaskReps: Long = outAddrMaskReps.getOrElse(0L)
    def clearOutAddrMaskReps: IcmpStatistics = copy(outAddrMaskReps = None)
    def withOutAddrMaskReps(__v: Long): IcmpStatistics = copy(outAddrMaskReps = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => inMsgs.orNull
        case 2 => inErrors.orNull
        case 3 => inCsumErrors.orNull
        case 4 => inDestUnreachs.orNull
        case 5 => inTimeExcds.orNull
        case 6 => inParmProbs.orNull
        case 7 => inSrcQuenchs.orNull
        case 8 => inRedirects.orNull
        case 9 => inEchos.orNull
        case 10 => inEchoReps.orNull
        case 11 => inTimestamps.orNull
        case 12 => inTimestampReps.orNull
        case 13 => inAddrMasks.orNull
        case 14 => inAddrMaskReps.orNull
        case 15 => outMsgs.orNull
        case 16 => outErrors.orNull
        case 17 => outDestUnreachs.orNull
        case 18 => outTimeExcds.orNull
        case 19 => outParmProbs.orNull
        case 20 => outSrcQuenchs.orNull
        case 21 => outRedirects.orNull
        case 22 => outEchos.orNull
        case 23 => outEchoReps.orNull
        case 24 => outTimestamps.orNull
        case 25 => outTimestampReps.orNull
        case 26 => outAddrMasks.orNull
        case 27 => outAddrMaskReps.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => inMsgs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => inErrors.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => inCsumErrors.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => inDestUnreachs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => inTimeExcds.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => inParmProbs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => inSrcQuenchs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => inRedirects.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => inEchos.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => inEchoReps.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => inTimestamps.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => inTimestampReps.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => inAddrMasks.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => inAddrMaskReps.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => outMsgs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => outErrors.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => outDestUnreachs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => outTimeExcds.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => outParmProbs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => outSrcQuenchs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => outRedirects.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => outEchos.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => outEchoReps.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 24 => outTimestamps.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 25 => outTimestampReps.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 26 => outAddrMasks.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 27 => outAddrMaskReps.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.IcmpStatistics
}

object IcmpStatistics extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.IcmpStatistics] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.IcmpStatistics] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.IcmpStatistics = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.IcmpStatistics(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(19)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(20)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(21)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(22)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(23)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(24)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(25)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(26)).asInstanceOf[scala.Option[Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.IcmpStatistics] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.IcmpStatistics(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(26).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(27).get).flatMap(_.as[scala.Option[Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(28)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(28)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.IcmpStatistics(
  )
  implicit class IcmpStatisticsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.IcmpStatistics]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.IcmpStatistics](_l) {
    def inMsgs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInMsgs)((c_, f_) => c_.copy(inMsgs = Some(f_)))
    def optionalInMsgs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inMsgs)((c_, f_) => c_.copy(inMsgs = f_))
    def inErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInErrors)((c_, f_) => c_.copy(inErrors = Some(f_)))
    def optionalInErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inErrors)((c_, f_) => c_.copy(inErrors = f_))
    def inCsumErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInCsumErrors)((c_, f_) => c_.copy(inCsumErrors = Some(f_)))
    def optionalInCsumErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inCsumErrors)((c_, f_) => c_.copy(inCsumErrors = f_))
    def inDestUnreachs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInDestUnreachs)((c_, f_) => c_.copy(inDestUnreachs = Some(f_)))
    def optionalInDestUnreachs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inDestUnreachs)((c_, f_) => c_.copy(inDestUnreachs = f_))
    def inTimeExcds: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInTimeExcds)((c_, f_) => c_.copy(inTimeExcds = Some(f_)))
    def optionalInTimeExcds: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inTimeExcds)((c_, f_) => c_.copy(inTimeExcds = f_))
    def inParmProbs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInParmProbs)((c_, f_) => c_.copy(inParmProbs = Some(f_)))
    def optionalInParmProbs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inParmProbs)((c_, f_) => c_.copy(inParmProbs = f_))
    def inSrcQuenchs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInSrcQuenchs)((c_, f_) => c_.copy(inSrcQuenchs = Some(f_)))
    def optionalInSrcQuenchs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inSrcQuenchs)((c_, f_) => c_.copy(inSrcQuenchs = f_))
    def inRedirects: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInRedirects)((c_, f_) => c_.copy(inRedirects = Some(f_)))
    def optionalInRedirects: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inRedirects)((c_, f_) => c_.copy(inRedirects = f_))
    def inEchos: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInEchos)((c_, f_) => c_.copy(inEchos = Some(f_)))
    def optionalInEchos: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inEchos)((c_, f_) => c_.copy(inEchos = f_))
    def inEchoReps: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInEchoReps)((c_, f_) => c_.copy(inEchoReps = Some(f_)))
    def optionalInEchoReps: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inEchoReps)((c_, f_) => c_.copy(inEchoReps = f_))
    def inTimestamps: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInTimestamps)((c_, f_) => c_.copy(inTimestamps = Some(f_)))
    def optionalInTimestamps: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inTimestamps)((c_, f_) => c_.copy(inTimestamps = f_))
    def inTimestampReps: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInTimestampReps)((c_, f_) => c_.copy(inTimestampReps = Some(f_)))
    def optionalInTimestampReps: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inTimestampReps)((c_, f_) => c_.copy(inTimestampReps = f_))
    def inAddrMasks: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInAddrMasks)((c_, f_) => c_.copy(inAddrMasks = Some(f_)))
    def optionalInAddrMasks: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inAddrMasks)((c_, f_) => c_.copy(inAddrMasks = f_))
    def inAddrMaskReps: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInAddrMaskReps)((c_, f_) => c_.copy(inAddrMaskReps = Some(f_)))
    def optionalInAddrMaskReps: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inAddrMaskReps)((c_, f_) => c_.copy(inAddrMaskReps = f_))
    def outMsgs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutMsgs)((c_, f_) => c_.copy(outMsgs = Some(f_)))
    def optionalOutMsgs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outMsgs)((c_, f_) => c_.copy(outMsgs = f_))
    def outErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutErrors)((c_, f_) => c_.copy(outErrors = Some(f_)))
    def optionalOutErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outErrors)((c_, f_) => c_.copy(outErrors = f_))
    def outDestUnreachs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutDestUnreachs)((c_, f_) => c_.copy(outDestUnreachs = Some(f_)))
    def optionalOutDestUnreachs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outDestUnreachs)((c_, f_) => c_.copy(outDestUnreachs = f_))
    def outTimeExcds: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutTimeExcds)((c_, f_) => c_.copy(outTimeExcds = Some(f_)))
    def optionalOutTimeExcds: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outTimeExcds)((c_, f_) => c_.copy(outTimeExcds = f_))
    def outParmProbs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutParmProbs)((c_, f_) => c_.copy(outParmProbs = Some(f_)))
    def optionalOutParmProbs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outParmProbs)((c_, f_) => c_.copy(outParmProbs = f_))
    def outSrcQuenchs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutSrcQuenchs)((c_, f_) => c_.copy(outSrcQuenchs = Some(f_)))
    def optionalOutSrcQuenchs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outSrcQuenchs)((c_, f_) => c_.copy(outSrcQuenchs = f_))
    def outRedirects: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutRedirects)((c_, f_) => c_.copy(outRedirects = Some(f_)))
    def optionalOutRedirects: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outRedirects)((c_, f_) => c_.copy(outRedirects = f_))
    def outEchos: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutEchos)((c_, f_) => c_.copy(outEchos = Some(f_)))
    def optionalOutEchos: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outEchos)((c_, f_) => c_.copy(outEchos = f_))
    def outEchoReps: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutEchoReps)((c_, f_) => c_.copy(outEchoReps = Some(f_)))
    def optionalOutEchoReps: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outEchoReps)((c_, f_) => c_.copy(outEchoReps = f_))
    def outTimestamps: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutTimestamps)((c_, f_) => c_.copy(outTimestamps = Some(f_)))
    def optionalOutTimestamps: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outTimestamps)((c_, f_) => c_.copy(outTimestamps = f_))
    def outTimestampReps: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutTimestampReps)((c_, f_) => c_.copy(outTimestampReps = Some(f_)))
    def optionalOutTimestampReps: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outTimestampReps)((c_, f_) => c_.copy(outTimestampReps = f_))
    def outAddrMasks: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutAddrMasks)((c_, f_) => c_.copy(outAddrMasks = Some(f_)))
    def optionalOutAddrMasks: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outAddrMasks)((c_, f_) => c_.copy(outAddrMasks = f_))
    def outAddrMaskReps: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutAddrMaskReps)((c_, f_) => c_.copy(outAddrMaskReps = Some(f_)))
    def optionalOutAddrMaskReps: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outAddrMaskReps)((c_, f_) => c_.copy(outAddrMaskReps = f_))
  }
  final val INMSGS_FIELD_NUMBER = 1
  final val INERRORS_FIELD_NUMBER = 2
  final val INCSUMERRORS_FIELD_NUMBER = 3
  final val INDESTUNREACHS_FIELD_NUMBER = 4
  final val INTIMEEXCDS_FIELD_NUMBER = 5
  final val INPARMPROBS_FIELD_NUMBER = 6
  final val INSRCQUENCHS_FIELD_NUMBER = 7
  final val INREDIRECTS_FIELD_NUMBER = 8
  final val INECHOS_FIELD_NUMBER = 9
  final val INECHOREPS_FIELD_NUMBER = 10
  final val INTIMESTAMPS_FIELD_NUMBER = 11
  final val INTIMESTAMPREPS_FIELD_NUMBER = 12
  final val INADDRMASKS_FIELD_NUMBER = 13
  final val INADDRMASKREPS_FIELD_NUMBER = 14
  final val OUTMSGS_FIELD_NUMBER = 15
  final val OUTERRORS_FIELD_NUMBER = 16
  final val OUTDESTUNREACHS_FIELD_NUMBER = 17
  final val OUTTIMEEXCDS_FIELD_NUMBER = 18
  final val OUTPARMPROBS_FIELD_NUMBER = 19
  final val OUTSRCQUENCHS_FIELD_NUMBER = 20
  final val OUTREDIRECTS_FIELD_NUMBER = 21
  final val OUTECHOS_FIELD_NUMBER = 22
  final val OUTECHOREPS_FIELD_NUMBER = 23
  final val OUTTIMESTAMPS_FIELD_NUMBER = 24
  final val OUTTIMESTAMPREPS_FIELD_NUMBER = 25
  final val OUTADDRMASKS_FIELD_NUMBER = 26
  final val OUTADDRMASKREPS_FIELD_NUMBER = 27
}
