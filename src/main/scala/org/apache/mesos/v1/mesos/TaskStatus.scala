// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes the current status of a task.
  *
  * @param message
  *   Possible message explaining state.
  * @param executorId
  *   TODO(benh): Use in master/agent.
  * @param uuid
  *   Statuses that are delivered reliably to the scheduler will
  *   include a 'uuid'. The status is considered delivered once
  *   it is acknowledged by the scheduler. Schedulers can choose
  *   to either explicitly acknowledge statuses or let the scheduler
  *   driver implicitly acknowledge (default).
  *  
  *   TODO(bmahler): This is currently overwritten in the scheduler
  *   driver and executor driver, but executors will need to set this
  *   to a valid RFC-4122 UUID if using the HTTP API.
  * @param healthy
  *   Describes whether the task has been determined to be healthy (true) or
  *   unhealthy (false) according to the `health_check` field in `TaskInfo`.
  * @param checkStatus
  *   Contains check status for the check specified in the corresponding
  *   `TaskInfo`. If no check has been specified, this field must be
  *   absent, otherwise it must be present even if the check status is
  *   not available yet. If the status update is triggered for a different
  *   reason than `REASON_TASK_CHECK_STATUS_UPDATED`, this field will contain
  *   the last known value.
  *  
  *   NOTE: A check-related task status update is triggered if and only if
  *   the value or presence of any field in `CheckStatusInfo` changes.
  *  
  *   NOTE: Check support in built-in executors is experimental.
  * @param labels
  *   Labels are free-form key value pairs which are exposed through
  *   master and agent endpoints. Labels will not be interpreted or
  *   acted upon by Mesos itself. As opposed to the data field, labels
  *   will be kept in memory on master and agent processes. Therefore,
  *   labels should be used to tag TaskStatus message with light-weight
  *   meta-data.  Labels should not contain duplicate key-value pairs.
  * @param containerStatus
  *   Container related information that is resolved dynamically such as
  *   network address.
  * @param unreachableTime
  *   The time (according to the master's clock) when the agent where
  *   this task was running became unreachable. This is only set on
  *   status updates for tasks running on agents that are unreachable
  *   (e.g., partitioned away from the master).
  */
@SerialVersionUID(0L)
final case class TaskStatus(
    taskId: org.apache.mesos.v1.mesos.TaskID,
    state: org.apache.mesos.v1.mesos.TaskState,
    message: scala.Option[String] = None,
    source: scala.Option[org.apache.mesos.v1.mesos.TaskStatus.Source] = None,
    reason: scala.Option[org.apache.mesos.v1.mesos.TaskStatus.Reason] = None,
    data: scala.Option[_root_.com.google.protobuf.ByteString] = None,
    agentId: scala.Option[org.apache.mesos.v1.mesos.AgentID] = None,
    executorId: scala.Option[org.apache.mesos.v1.mesos.ExecutorID] = None,
    timestamp: scala.Option[Double] = None,
    uuid: scala.Option[_root_.com.google.protobuf.ByteString] = None,
    healthy: scala.Option[Boolean] = None,
    checkStatus: scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo] = None,
    labels: scala.Option[org.apache.mesos.v1.mesos.Labels] = None,
    containerStatus: scala.Option[org.apache.mesos.v1.mesos.ContainerStatus] = None,
    unreachableTime: scala.Option[org.apache.mesos.v1.mesos.TimeInfo] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TaskStatus] with com.trueaccord.lenses.Updatable[TaskStatus] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(taskId.serializedSize) + taskId.serializedSize
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, state.value)
      if (message.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, message.get) }
      if (source.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(9, source.get.value) }
      if (reason.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(10, reason.get.value) }
      if (data.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(3, data.get) }
      if (agentId.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agentId.get.serializedSize) + agentId.get.serializedSize }
      if (executorId.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(executorId.get.serializedSize) + executorId.get.serializedSize }
      if (timestamp.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(6, timestamp.get) }
      if (uuid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(11, uuid.get) }
      if (healthy.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, healthy.get) }
      if (checkStatus.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(checkStatus.get.serializedSize) + checkStatus.get.serializedSize }
      if (labels.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(labels.get.serializedSize) + labels.get.serializedSize }
      if (containerStatus.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containerStatus.get.serializedSize) + containerStatus.get.serializedSize }
      if (unreachableTime.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(unreachableTime.get.serializedSize) + unreachableTime.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeTag(1, 2)
      _output__.writeUInt32NoTag(taskId.serializedSize)
      taskId.writeTo(_output__)
      _output__.writeEnum(2, state.value)
      data.foreach { __v =>
        _output__.writeBytes(3, __v)
      };
      message.foreach { __v =>
        _output__.writeString(4, __v)
      };
      agentId.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      timestamp.foreach { __v =>
        _output__.writeDouble(6, __v)
      };
      executorId.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      healthy.foreach { __v =>
        _output__.writeBool(8, __v)
      };
      source.foreach { __v =>
        _output__.writeEnum(9, __v.value)
      };
      reason.foreach { __v =>
        _output__.writeEnum(10, __v.value)
      };
      uuid.foreach { __v =>
        _output__.writeBytes(11, __v)
      };
      labels.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      containerStatus.foreach { __v =>
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      unreachableTime.foreach { __v =>
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      checkStatus.foreach { __v =>
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.TaskStatus = {
      var __taskId = this.taskId
      var __state = this.state
      var __message = this.message
      var __source = this.source
      var __reason = this.reason
      var __data = this.data
      var __agentId = this.agentId
      var __executorId = this.executorId
      var __timestamp = this.timestamp
      var __uuid = this.uuid
      var __healthy = this.healthy
      var __checkStatus = this.checkStatus
      var __labels = this.labels
      var __containerStatus = this.containerStatus
      var __unreachableTime = this.unreachableTime
      var __requiredFields0: Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __taskId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __taskId)
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __state = org.apache.mesos.v1.mesos.TaskState.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffdL
          case 34 =>
            __message = Some(_input__.readString())
          case 72 =>
            __source = Some(org.apache.mesos.v1.mesos.TaskStatus.Source.fromValue(_input__.readEnum()))
          case 80 =>
            __reason = Some(org.apache.mesos.v1.mesos.TaskStatus.Reason.fromValue(_input__.readEnum()))
          case 26 =>
            __data = Some(_input__.readBytes())
          case 42 =>
            __agentId = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __agentId.getOrElse(org.apache.mesos.v1.mesos.AgentID.defaultInstance)))
          case 58 =>
            __executorId = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __executorId.getOrElse(org.apache.mesos.v1.mesos.ExecutorID.defaultInstance)))
          case 49 =>
            __timestamp = Some(_input__.readDouble())
          case 90 =>
            __uuid = Some(_input__.readBytes())
          case 64 =>
            __healthy = Some(_input__.readBool())
          case 122 =>
            __checkStatus = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __checkStatus.getOrElse(org.apache.mesos.v1.mesos.CheckStatusInfo.defaultInstance)))
          case 98 =>
            __labels = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)))
          case 106 =>
            __containerStatus = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __containerStatus.getOrElse(org.apache.mesos.v1.mesos.ContainerStatus.defaultInstance)))
          case 114 =>
            __unreachableTime = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __unreachableTime.getOrElse(org.apache.mesos.v1.mesos.TimeInfo.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.TaskStatus(
          taskId = __taskId,
          state = __state,
          message = __message,
          source = __source,
          reason = __reason,
          data = __data,
          agentId = __agentId,
          executorId = __executorId,
          timestamp = __timestamp,
          uuid = __uuid,
          healthy = __healthy,
          checkStatus = __checkStatus,
          labels = __labels,
          containerStatus = __containerStatus,
          unreachableTime = __unreachableTime
      )
    }
    def withTaskId(__v: org.apache.mesos.v1.mesos.TaskID): TaskStatus = copy(taskId = __v)
    def withState(__v: org.apache.mesos.v1.mesos.TaskState): TaskStatus = copy(state = __v)
    def getMessage: String = message.getOrElse("")
    def clearMessage: TaskStatus = copy(message = None)
    def withMessage(__v: String): TaskStatus = copy(message = Some(__v))
    def getSource: org.apache.mesos.v1.mesos.TaskStatus.Source = source.getOrElse(org.apache.mesos.v1.mesos.TaskStatus.Source.SOURCE_MASTER)
    def clearSource: TaskStatus = copy(source = None)
    def withSource(__v: org.apache.mesos.v1.mesos.TaskStatus.Source): TaskStatus = copy(source = Some(__v))
    def getReason: org.apache.mesos.v1.mesos.TaskStatus.Reason = reason.getOrElse(org.apache.mesos.v1.mesos.TaskStatus.Reason.REASON_COMMAND_EXECUTOR_FAILED)
    def clearReason: TaskStatus = copy(reason = None)
    def withReason(__v: org.apache.mesos.v1.mesos.TaskStatus.Reason): TaskStatus = copy(reason = Some(__v))
    def getData: _root_.com.google.protobuf.ByteString = data.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def clearData: TaskStatus = copy(data = None)
    def withData(__v: _root_.com.google.protobuf.ByteString): TaskStatus = copy(data = Some(__v))
    def getAgentId: org.apache.mesos.v1.mesos.AgentID = agentId.getOrElse(org.apache.mesos.v1.mesos.AgentID.defaultInstance)
    def clearAgentId: TaskStatus = copy(agentId = None)
    def withAgentId(__v: org.apache.mesos.v1.mesos.AgentID): TaskStatus = copy(agentId = Some(__v))
    def getExecutorId: org.apache.mesos.v1.mesos.ExecutorID = executorId.getOrElse(org.apache.mesos.v1.mesos.ExecutorID.defaultInstance)
    def clearExecutorId: TaskStatus = copy(executorId = None)
    def withExecutorId(__v: org.apache.mesos.v1.mesos.ExecutorID): TaskStatus = copy(executorId = Some(__v))
    def getTimestamp: Double = timestamp.getOrElse(0.0)
    def clearTimestamp: TaskStatus = copy(timestamp = None)
    def withTimestamp(__v: Double): TaskStatus = copy(timestamp = Some(__v))
    def getUuid: _root_.com.google.protobuf.ByteString = uuid.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def clearUuid: TaskStatus = copy(uuid = None)
    def withUuid(__v: _root_.com.google.protobuf.ByteString): TaskStatus = copy(uuid = Some(__v))
    def getHealthy: Boolean = healthy.getOrElse(false)
    def clearHealthy: TaskStatus = copy(healthy = None)
    def withHealthy(__v: Boolean): TaskStatus = copy(healthy = Some(__v))
    def getCheckStatus: org.apache.mesos.v1.mesos.CheckStatusInfo = checkStatus.getOrElse(org.apache.mesos.v1.mesos.CheckStatusInfo.defaultInstance)
    def clearCheckStatus: TaskStatus = copy(checkStatus = None)
    def withCheckStatus(__v: org.apache.mesos.v1.mesos.CheckStatusInfo): TaskStatus = copy(checkStatus = Some(__v))
    def getLabels: org.apache.mesos.v1.mesos.Labels = labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)
    def clearLabels: TaskStatus = copy(labels = None)
    def withLabels(__v: org.apache.mesos.v1.mesos.Labels): TaskStatus = copy(labels = Some(__v))
    def getContainerStatus: org.apache.mesos.v1.mesos.ContainerStatus = containerStatus.getOrElse(org.apache.mesos.v1.mesos.ContainerStatus.defaultInstance)
    def clearContainerStatus: TaskStatus = copy(containerStatus = None)
    def withContainerStatus(__v: org.apache.mesos.v1.mesos.ContainerStatus): TaskStatus = copy(containerStatus = Some(__v))
    def getUnreachableTime: org.apache.mesos.v1.mesos.TimeInfo = unreachableTime.getOrElse(org.apache.mesos.v1.mesos.TimeInfo.defaultInstance)
    def clearUnreachableTime: TaskStatus = copy(unreachableTime = None)
    def withUnreachableTime(__v: org.apache.mesos.v1.mesos.TimeInfo): TaskStatus = copy(unreachableTime = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => taskId
        case 2 => state.javaValueDescriptor
        case 4 => message.orNull
        case 9 => source.map(_.javaValueDescriptor).orNull
        case 10 => reason.map(_.javaValueDescriptor).orNull
        case 3 => data.orNull
        case 5 => agentId.orNull
        case 7 => executorId.orNull
        case 6 => timestamp.orNull
        case 11 => uuid.orNull
        case 8 => healthy.orNull
        case 15 => checkStatus.orNull
        case 12 => labels.orNull
        case 13 => containerStatus.orNull
        case 14 => unreachableTime.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => taskId.toPMessage
        case 2 => _root_.scalapb.descriptors.PEnum(state.scalaValueDescriptor)
        case 4 => message.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => source.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => reason.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => data.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => agentId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => executorId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => timestamp.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => uuid.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => healthy.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => checkStatus.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => labels.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => containerStatus.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => unreachableTime.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.TaskStatus
}

object TaskStatus extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.TaskStatus] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.TaskStatus] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.TaskStatus = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.TaskStatus(
      __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.TaskID],
      org.apache.mesos.v1.mesos.TaskState.fromValue(__fieldsMap(__fields.get(1)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.TaskStatus.Source.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.TaskStatus.Reason.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.com.google.protobuf.ByteString]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.AgentID]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ExecutorID]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.com.google.protobuf.ByteString]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Boolean]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Labels]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ContainerStatus]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.TimeInfo]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.TaskStatus] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.TaskStatus(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.TaskID],
        org.apache.mesos.v1.mesos.TaskState.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.TaskStatus.Source.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.TaskStatus.Reason.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.com.google.protobuf.ByteString]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.AgentID]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ExecutorID]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.com.google.protobuf.ByteString]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Labels]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ContainerStatus]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.TimeInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(43)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(43)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = org.apache.mesos.v1.mesos.TaskID
      case 5 => __out = org.apache.mesos.v1.mesos.AgentID
      case 7 => __out = org.apache.mesos.v1.mesos.ExecutorID
      case 15 => __out = org.apache.mesos.v1.mesos.CheckStatusInfo
      case 12 => __out = org.apache.mesos.v1.mesos.Labels
      case 13 => __out = org.apache.mesos.v1.mesos.ContainerStatus
      case 14 => __out = org.apache.mesos.v1.mesos.TimeInfo
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => org.apache.mesos.v1.mesos.TaskState
      case 9 => org.apache.mesos.v1.mesos.TaskStatus.Source
      case 10 => org.apache.mesos.v1.mesos.TaskStatus.Reason
    }
  }
  lazy val defaultInstance = org.apache.mesos.v1.mesos.TaskStatus(
    taskId = org.apache.mesos.v1.mesos.TaskID.defaultInstance,
    state = org.apache.mesos.v1.mesos.TaskState.TASK_STAGING
  )
  sealed trait Source extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Source
    def isSourceMaster: Boolean = false
    def isSourceAgent: Boolean = false
    def isSourceExecutor: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Source] = org.apache.mesos.v1.mesos.TaskStatus.Source
  }
  
  object Source extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Source] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Source] = this
    @SerialVersionUID(0L)
    case object SOURCE_MASTER extends Source {
      val value = 0
      val index = 0
      val name = "SOURCE_MASTER"
      override def isSourceMaster: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SOURCE_AGENT extends Source {
      val value = 1
      val index = 1
      val name = "SOURCE_AGENT"
      override def isSourceAgent: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SOURCE_EXECUTOR extends Source {
      val value = 2
      val index = 2
      val name = "SOURCE_EXECUTOR"
      override def isSourceExecutor: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Source with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(SOURCE_MASTER, SOURCE_AGENT, SOURCE_EXECUTOR)
    def fromValue(value: Int): Source = value match {
      case 0 => SOURCE_MASTER
      case 1 => SOURCE_AGENT
      case 2 => SOURCE_EXECUTOR
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.TaskStatus.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.TaskStatus.scalaDescriptor.enums(0)
  }
  sealed trait Reason extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Reason
    def isReasonCommandExecutorFailed: Boolean = false
    def isReasonContainerLaunchFailed: Boolean = false
    def isReasonContainerLimitation: Boolean = false
    def isReasonContainerLimitationDisk: Boolean = false
    def isReasonContainerLimitationMemory: Boolean = false
    def isReasonContainerPreempted: Boolean = false
    def isReasonContainerUpdateFailed: Boolean = false
    def isReasonExecutorRegistrationTimeout: Boolean = false
    def isReasonExecutorReregistrationTimeout: Boolean = false
    def isReasonExecutorTerminated: Boolean = false
    def isReasonExecutorUnregistered: Boolean = false
    def isReasonFrameworkRemoved: Boolean = false
    def isReasonGcError: Boolean = false
    def isReasonInvalidFrameworkid: Boolean = false
    def isReasonInvalidOffers: Boolean = false
    def isReasonIoSwitchboardExited: Boolean = false
    def isReasonMasterDisconnected: Boolean = false
    def isReasonReconciliation: Boolean = false
    def isReasonResourcesUnknown: Boolean = false
    def isReasonAgentDisconnected: Boolean = false
    def isReasonAgentRemoved: Boolean = false
    def isReasonAgentRestarted: Boolean = false
    def isReasonAgentUnknown: Boolean = false
    def isReasonTaskCheckStatusUpdated: Boolean = false
    def isReasonTaskHealthCheckStatusUpdated: Boolean = false
    def isReasonTaskGroupInvalid: Boolean = false
    def isReasonTaskGroupUnauthorized: Boolean = false
    def isReasonTaskInvalid: Boolean = false
    def isReasonTaskUnauthorized: Boolean = false
    def isReasonTaskUnknown: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Reason] = org.apache.mesos.v1.mesos.TaskStatus.Reason
  }
  
  object Reason extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Reason] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Reason] = this
    @SerialVersionUID(0L)
    case object REASON_COMMAND_EXECUTOR_FAILED extends Reason {
      val value = 0
      val index = 0
      val name = "REASON_COMMAND_EXECUTOR_FAILED"
      override def isReasonCommandExecutorFailed: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_CONTAINER_LAUNCH_FAILED extends Reason {
      val value = 21
      val index = 1
      val name = "REASON_CONTAINER_LAUNCH_FAILED"
      override def isReasonContainerLaunchFailed: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_CONTAINER_LIMITATION extends Reason {
      val value = 19
      val index = 2
      val name = "REASON_CONTAINER_LIMITATION"
      override def isReasonContainerLimitation: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_CONTAINER_LIMITATION_DISK extends Reason {
      val value = 20
      val index = 3
      val name = "REASON_CONTAINER_LIMITATION_DISK"
      override def isReasonContainerLimitationDisk: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_CONTAINER_LIMITATION_MEMORY extends Reason {
      val value = 8
      val index = 4
      val name = "REASON_CONTAINER_LIMITATION_MEMORY"
      override def isReasonContainerLimitationMemory: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_CONTAINER_PREEMPTED extends Reason {
      val value = 17
      val index = 5
      val name = "REASON_CONTAINER_PREEMPTED"
      override def isReasonContainerPreempted: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_CONTAINER_UPDATE_FAILED extends Reason {
      val value = 22
      val index = 6
      val name = "REASON_CONTAINER_UPDATE_FAILED"
      override def isReasonContainerUpdateFailed: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_EXECUTOR_REGISTRATION_TIMEOUT extends Reason {
      val value = 23
      val index = 7
      val name = "REASON_EXECUTOR_REGISTRATION_TIMEOUT"
      override def isReasonExecutorRegistrationTimeout: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_EXECUTOR_REREGISTRATION_TIMEOUT extends Reason {
      val value = 24
      val index = 8
      val name = "REASON_EXECUTOR_REREGISTRATION_TIMEOUT"
      override def isReasonExecutorReregistrationTimeout: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_EXECUTOR_TERMINATED extends Reason {
      val value = 1
      val index = 9
      val name = "REASON_EXECUTOR_TERMINATED"
      override def isReasonExecutorTerminated: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_EXECUTOR_UNREGISTERED extends Reason {
      val value = 2
      val index = 10
      val name = "REASON_EXECUTOR_UNREGISTERED"
      override def isReasonExecutorUnregistered: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_FRAMEWORK_REMOVED extends Reason {
      val value = 3
      val index = 11
      val name = "REASON_FRAMEWORK_REMOVED"
      override def isReasonFrameworkRemoved: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_GC_ERROR extends Reason {
      val value = 4
      val index = 12
      val name = "REASON_GC_ERROR"
      override def isReasonGcError: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_INVALID_FRAMEWORKID extends Reason {
      val value = 5
      val index = 13
      val name = "REASON_INVALID_FRAMEWORKID"
      override def isReasonInvalidFrameworkid: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_INVALID_OFFERS extends Reason {
      val value = 6
      val index = 14
      val name = "REASON_INVALID_OFFERS"
      override def isReasonInvalidOffers: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_IO_SWITCHBOARD_EXITED extends Reason {
      val value = 27
      val index = 15
      val name = "REASON_IO_SWITCHBOARD_EXITED"
      override def isReasonIoSwitchboardExited: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_MASTER_DISCONNECTED extends Reason {
      val value = 7
      val index = 16
      val name = "REASON_MASTER_DISCONNECTED"
      override def isReasonMasterDisconnected: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_RECONCILIATION extends Reason {
      val value = 9
      val index = 17
      val name = "REASON_RECONCILIATION"
      override def isReasonReconciliation: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_RESOURCES_UNKNOWN extends Reason {
      val value = 18
      val index = 18
      val name = "REASON_RESOURCES_UNKNOWN"
      override def isReasonResourcesUnknown: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_AGENT_DISCONNECTED extends Reason {
      val value = 10
      val index = 19
      val name = "REASON_AGENT_DISCONNECTED"
      override def isReasonAgentDisconnected: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_AGENT_REMOVED extends Reason {
      val value = 11
      val index = 20
      val name = "REASON_AGENT_REMOVED"
      override def isReasonAgentRemoved: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_AGENT_RESTARTED extends Reason {
      val value = 12
      val index = 21
      val name = "REASON_AGENT_RESTARTED"
      override def isReasonAgentRestarted: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_AGENT_UNKNOWN extends Reason {
      val value = 13
      val index = 22
      val name = "REASON_AGENT_UNKNOWN"
      override def isReasonAgentUnknown: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_TASK_CHECK_STATUS_UPDATED extends Reason {
      val value = 28
      val index = 23
      val name = "REASON_TASK_CHECK_STATUS_UPDATED"
      override def isReasonTaskCheckStatusUpdated: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_TASK_HEALTH_CHECK_STATUS_UPDATED extends Reason {
      val value = 29
      val index = 24
      val name = "REASON_TASK_HEALTH_CHECK_STATUS_UPDATED"
      override def isReasonTaskHealthCheckStatusUpdated: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_TASK_GROUP_INVALID extends Reason {
      val value = 25
      val index = 25
      val name = "REASON_TASK_GROUP_INVALID"
      override def isReasonTaskGroupInvalid: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_TASK_GROUP_UNAUTHORIZED extends Reason {
      val value = 26
      val index = 26
      val name = "REASON_TASK_GROUP_UNAUTHORIZED"
      override def isReasonTaskGroupUnauthorized: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_TASK_INVALID extends Reason {
      val value = 14
      val index = 27
      val name = "REASON_TASK_INVALID"
      override def isReasonTaskInvalid: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_TASK_UNAUTHORIZED extends Reason {
      val value = 15
      val index = 28
      val name = "REASON_TASK_UNAUTHORIZED"
      override def isReasonTaskUnauthorized: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REASON_TASK_UNKNOWN extends Reason {
      val value = 16
      val index = 29
      val name = "REASON_TASK_UNKNOWN"
      override def isReasonTaskUnknown: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Reason with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(REASON_COMMAND_EXECUTOR_FAILED, REASON_CONTAINER_LAUNCH_FAILED, REASON_CONTAINER_LIMITATION, REASON_CONTAINER_LIMITATION_DISK, REASON_CONTAINER_LIMITATION_MEMORY, REASON_CONTAINER_PREEMPTED, REASON_CONTAINER_UPDATE_FAILED, REASON_EXECUTOR_REGISTRATION_TIMEOUT, REASON_EXECUTOR_REREGISTRATION_TIMEOUT, REASON_EXECUTOR_TERMINATED, REASON_EXECUTOR_UNREGISTERED, REASON_FRAMEWORK_REMOVED, REASON_GC_ERROR, REASON_INVALID_FRAMEWORKID, REASON_INVALID_OFFERS, REASON_IO_SWITCHBOARD_EXITED, REASON_MASTER_DISCONNECTED, REASON_RECONCILIATION, REASON_RESOURCES_UNKNOWN, REASON_AGENT_DISCONNECTED, REASON_AGENT_REMOVED, REASON_AGENT_RESTARTED, REASON_AGENT_UNKNOWN, REASON_TASK_CHECK_STATUS_UPDATED, REASON_TASK_HEALTH_CHECK_STATUS_UPDATED, REASON_TASK_GROUP_INVALID, REASON_TASK_GROUP_UNAUTHORIZED, REASON_TASK_INVALID, REASON_TASK_UNAUTHORIZED, REASON_TASK_UNKNOWN)
    def fromValue(value: Int): Reason = value match {
      case 0 => REASON_COMMAND_EXECUTOR_FAILED
      case 1 => REASON_EXECUTOR_TERMINATED
      case 2 => REASON_EXECUTOR_UNREGISTERED
      case 3 => REASON_FRAMEWORK_REMOVED
      case 4 => REASON_GC_ERROR
      case 5 => REASON_INVALID_FRAMEWORKID
      case 6 => REASON_INVALID_OFFERS
      case 7 => REASON_MASTER_DISCONNECTED
      case 8 => REASON_CONTAINER_LIMITATION_MEMORY
      case 9 => REASON_RECONCILIATION
      case 10 => REASON_AGENT_DISCONNECTED
      case 11 => REASON_AGENT_REMOVED
      case 12 => REASON_AGENT_RESTARTED
      case 13 => REASON_AGENT_UNKNOWN
      case 14 => REASON_TASK_INVALID
      case 15 => REASON_TASK_UNAUTHORIZED
      case 16 => REASON_TASK_UNKNOWN
      case 17 => REASON_CONTAINER_PREEMPTED
      case 18 => REASON_RESOURCES_UNKNOWN
      case 19 => REASON_CONTAINER_LIMITATION
      case 20 => REASON_CONTAINER_LIMITATION_DISK
      case 21 => REASON_CONTAINER_LAUNCH_FAILED
      case 22 => REASON_CONTAINER_UPDATE_FAILED
      case 23 => REASON_EXECUTOR_REGISTRATION_TIMEOUT
      case 24 => REASON_EXECUTOR_REREGISTRATION_TIMEOUT
      case 25 => REASON_TASK_GROUP_INVALID
      case 26 => REASON_TASK_GROUP_UNAUTHORIZED
      case 27 => REASON_IO_SWITCHBOARD_EXITED
      case 28 => REASON_TASK_CHECK_STATUS_UPDATED
      case 29 => REASON_TASK_HEALTH_CHECK_STATUS_UPDATED
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.TaskStatus.javaDescriptor.getEnumTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.TaskStatus.scalaDescriptor.enums(1)
  }
  implicit class TaskStatusLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TaskStatus]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.TaskStatus](_l) {
    def taskId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TaskID] = field(_.taskId)((c_, f_) => c_.copy(taskId = f_))
    def state: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TaskState] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def message: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getMessage)((c_, f_) => c_.copy(message = Some(f_)))
    def optionalMessage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.message)((c_, f_) => c_.copy(message = f_))
    def source: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TaskStatus.Source] = field(_.getSource)((c_, f_) => c_.copy(source = Some(f_)))
    def optionalSource: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.TaskStatus.Source]] = field(_.source)((c_, f_) => c_.copy(source = f_))
    def reason: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TaskStatus.Reason] = field(_.getReason)((c_, f_) => c_.copy(reason = Some(f_)))
    def optionalReason: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.TaskStatus.Reason]] = field(_.reason)((c_, f_) => c_.copy(reason = f_))
    def data: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getData)((c_, f_) => c_.copy(data = Some(f_)))
    def optionalData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[_root_.com.google.protobuf.ByteString]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def agentId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.AgentID] = field(_.getAgentId)((c_, f_) => c_.copy(agentId = Some(f_)))
    def optionalAgentId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.AgentID]] = field(_.agentId)((c_, f_) => c_.copy(agentId = f_))
    def executorId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ExecutorID] = field(_.getExecutorId)((c_, f_) => c_.copy(executorId = Some(f_)))
    def optionalExecutorId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ExecutorID]] = field(_.executorId)((c_, f_) => c_.copy(executorId = f_))
    def timestamp: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getTimestamp)((c_, f_) => c_.copy(timestamp = Some(f_)))
    def optionalTimestamp: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def uuid: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getUuid)((c_, f_) => c_.copy(uuid = Some(f_)))
    def optionalUuid: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[_root_.com.google.protobuf.ByteString]] = field(_.uuid)((c_, f_) => c_.copy(uuid = f_))
    def healthy: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getHealthy)((c_, f_) => c_.copy(healthy = Some(f_)))
    def optionalHealthy: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.healthy)((c_, f_) => c_.copy(healthy = f_))
    def checkStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckStatusInfo] = field(_.getCheckStatus)((c_, f_) => c_.copy(checkStatus = Some(f_)))
    def optionalCheckStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo]] = field(_.checkStatus)((c_, f_) => c_.copy(checkStatus = f_))
    def labels: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Labels] = field(_.getLabels)((c_, f_) => c_.copy(labels = Some(f_)))
    def optionalLabels: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Labels]] = field(_.labels)((c_, f_) => c_.copy(labels = f_))
    def containerStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerStatus] = field(_.getContainerStatus)((c_, f_) => c_.copy(containerStatus = Some(f_)))
    def optionalContainerStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ContainerStatus]] = field(_.containerStatus)((c_, f_) => c_.copy(containerStatus = f_))
    def unreachableTime: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TimeInfo] = field(_.getUnreachableTime)((c_, f_) => c_.copy(unreachableTime = Some(f_)))
    def optionalUnreachableTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.TimeInfo]] = field(_.unreachableTime)((c_, f_) => c_.copy(unreachableTime = f_))
  }
  final val TASK_ID_FIELD_NUMBER = 1
  final val STATE_FIELD_NUMBER = 2
  final val MESSAGE_FIELD_NUMBER = 4
  final val SOURCE_FIELD_NUMBER = 9
  final val REASON_FIELD_NUMBER = 10
  final val DATA_FIELD_NUMBER = 3
  final val AGENT_ID_FIELD_NUMBER = 5
  final val EXECUTOR_ID_FIELD_NUMBER = 7
  final val TIMESTAMP_FIELD_NUMBER = 6
  final val UUID_FIELD_NUMBER = 11
  final val HEALTHY_FIELD_NUMBER = 8
  final val CHECK_STATUS_FIELD_NUMBER = 15
  final val LABELS_FIELD_NUMBER = 12
  final val CONTAINER_STATUS_FIELD_NUMBER = 13
  final val UNREACHABLE_TIME_FIELD_NUMBER = 14
}
