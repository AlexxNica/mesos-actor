// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes the status of a check. Type and the corresponding field, i.e.,
  * `command` or `http` must be set. If the result of the check is not available
  * (e.g., the check timed out), these fields must contain empty messages, i.e.,
  * `exit_code` or `status_code` will be unset.
  *
  * NOTE: This API is unstable and the related feature is experimental.
  *
  * @param type
  *   The type of the check this status corresponds to.
  * @param command
  *   Status of a command check.
  * @param http
  *   Status of an HTTP check.
  * @param tcp
  *   Status of a TCP check.
  */
@SerialVersionUID(0L)
final case class CheckStatusInfo(
    `type`: scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Type] = None,
    command: scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo.Command] = None,
    http: scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo.Http] = None,
    tcp: scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CheckStatusInfo] with com.trueaccord.lenses.Updatable[CheckStatusInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
      if (command.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.get.serializedSize) + command.get.serializedSize }
      if (http.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(http.get.serializedSize) + http.get.serializedSize }
      if (tcp.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(tcp.get.serializedSize) + tcp.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      `type`.foreach { __v =>
        _output__.writeEnum(1, __v.value)
      };
      command.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      http.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      tcp.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.CheckStatusInfo = {
      var __type = this.`type`
      var __command = this.command
      var __http = this.http
      var __tcp = this.tcp
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = Some(org.apache.mesos.v1.mesos.CheckInfo.Type.fromValue(_input__.readEnum()))
          case 18 =>
            __command = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __command.getOrElse(org.apache.mesos.v1.mesos.CheckStatusInfo.Command.defaultInstance)))
          case 26 =>
            __http = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __http.getOrElse(org.apache.mesos.v1.mesos.CheckStatusInfo.Http.defaultInstance)))
          case 34 =>
            __tcp = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __tcp.getOrElse(org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.CheckStatusInfo(
          `type` = __type,
          command = __command,
          http = __http,
          tcp = __tcp
      )
    }
    def getType: org.apache.mesos.v1.mesos.CheckInfo.Type = `type`.getOrElse(org.apache.mesos.v1.mesos.CheckInfo.Type.UNKNOWN)
    def clearType: CheckStatusInfo = copy(`type` = None)
    def withType(__v: org.apache.mesos.v1.mesos.CheckInfo.Type): CheckStatusInfo = copy(`type` = Some(__v))
    def getCommand: org.apache.mesos.v1.mesos.CheckStatusInfo.Command = command.getOrElse(org.apache.mesos.v1.mesos.CheckStatusInfo.Command.defaultInstance)
    def clearCommand: CheckStatusInfo = copy(command = None)
    def withCommand(__v: org.apache.mesos.v1.mesos.CheckStatusInfo.Command): CheckStatusInfo = copy(command = Some(__v))
    def getHttp: org.apache.mesos.v1.mesos.CheckStatusInfo.Http = http.getOrElse(org.apache.mesos.v1.mesos.CheckStatusInfo.Http.defaultInstance)
    def clearHttp: CheckStatusInfo = copy(http = None)
    def withHttp(__v: org.apache.mesos.v1.mesos.CheckStatusInfo.Http): CheckStatusInfo = copy(http = Some(__v))
    def getTcp: org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp = tcp.getOrElse(org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp.defaultInstance)
    def clearTcp: CheckStatusInfo = copy(tcp = None)
    def withTcp(__v: org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp): CheckStatusInfo = copy(tcp = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.map(_.javaValueDescriptor).orNull
        case 2 => command.orNull
        case 3 => http.orNull
        case 4 => tcp.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => command.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => http.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => tcp.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.CheckStatusInfo
}

object CheckStatusInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckStatusInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckStatusInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.CheckStatusInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.CheckStatusInfo(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.CheckInfo.Type.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo.Command]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo.Http]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.CheckStatusInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.CheckStatusInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.CheckInfo.Type.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo.Command]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo.Http]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(42)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(42)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = org.apache.mesos.v1.mesos.CheckStatusInfo.Command
      case 3 => __out = org.apache.mesos.v1.mesos.CheckStatusInfo.Http
      case 4 => __out = org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => org.apache.mesos.v1.mesos.CheckInfo.Type
    }
  }
  lazy val defaultInstance = org.apache.mesos.v1.mesos.CheckStatusInfo(
  )
  /** @param exitCode
    *   Exit code of a command check. It is the result of calling
    *   `WEXITSTATUS()` on `waitpid()` termination information on
    *   Posix and calling `GetExitCodeProcess()` on Windows.
    */
  @SerialVersionUID(0L)
  final case class Command(
      exitCode: scala.Option[Int] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Command] with com.trueaccord.lenses.Updatable[Command] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (exitCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, exitCode.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        exitCode.foreach { __v =>
          _output__.writeInt32(1, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.CheckStatusInfo.Command = {
        var __exitCode = this.exitCode
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __exitCode = Some(_input__.readInt32())
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.CheckStatusInfo.Command(
            exitCode = __exitCode
        )
      }
      def getExitCode: Int = exitCode.getOrElse(0)
      def clearExitCode: Command = copy(exitCode = None)
      def withExitCode(__v: Int): Command = copy(exitCode = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => exitCode.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => exitCode.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.CheckStatusInfo.Command
  }
  
  object Command extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckStatusInfo.Command] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckStatusInfo.Command] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.CheckStatusInfo.Command = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.CheckStatusInfo.Command(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.CheckStatusInfo.Command] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.CheckStatusInfo.Command(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.CheckStatusInfo.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.CheckStatusInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.CheckStatusInfo.Command(
    )
    implicit class CommandLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckStatusInfo.Command]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.CheckStatusInfo.Command](_l) {
      def exitCode: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getExitCode)((c_, f_) => c_.copy(exitCode = Some(f_)))
      def optionalExitCode: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.exitCode)((c_, f_) => c_.copy(exitCode = f_))
    }
    final val EXIT_CODE_FIELD_NUMBER = 1
  }
  
  /** @param statusCode
    *   HTTP status code of an HTTP check.
    */
  @SerialVersionUID(0L)
  final case class Http(
      statusCode: scala.Option[Int] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Http] with com.trueaccord.lenses.Updatable[Http] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (statusCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, statusCode.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        statusCode.foreach { __v =>
          _output__.writeUInt32(1, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.CheckStatusInfo.Http = {
        var __statusCode = this.statusCode
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __statusCode = Some(_input__.readUInt32())
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.CheckStatusInfo.Http(
            statusCode = __statusCode
        )
      }
      def getStatusCode: Int = statusCode.getOrElse(0)
      def clearStatusCode: Http = copy(statusCode = None)
      def withStatusCode(__v: Int): Http = copy(statusCode = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => statusCode.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => statusCode.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.CheckStatusInfo.Http
  }
  
  object Http extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckStatusInfo.Http] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckStatusInfo.Http] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.CheckStatusInfo.Http = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.CheckStatusInfo.Http(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.CheckStatusInfo.Http] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.CheckStatusInfo.Http(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.CheckStatusInfo.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.CheckStatusInfo.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.CheckStatusInfo.Http(
    )
    implicit class HttpLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckStatusInfo.Http]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.CheckStatusInfo.Http](_l) {
      def statusCode: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getStatusCode)((c_, f_) => c_.copy(statusCode = Some(f_)))
      def optionalStatusCode: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.statusCode)((c_, f_) => c_.copy(statusCode = f_))
    }
    final val STATUS_CODE_FIELD_NUMBER = 1
  }
  
  /** @param succeeded
    *   Whether a TCP connection succeeded.
    */
  @SerialVersionUID(0L)
  final case class Tcp(
      succeeded: scala.Option[Boolean] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Tcp] with com.trueaccord.lenses.Updatable[Tcp] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (succeeded.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, succeeded.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        succeeded.foreach { __v =>
          _output__.writeBool(1, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp = {
        var __succeeded = this.succeeded
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __succeeded = Some(_input__.readBool())
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp(
            succeeded = __succeeded
        )
      }
      def getSucceeded: Boolean = succeeded.getOrElse(false)
      def clearSucceeded: Tcp = copy(succeeded = None)
      def withSucceeded(__v: Boolean): Tcp = copy(succeeded = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => succeeded.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => succeeded.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp
  }
  
  object Tcp extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Boolean]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Boolean]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.CheckStatusInfo.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.CheckStatusInfo.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp(
    )
    implicit class TcpLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp](_l) {
      def succeeded: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getSucceeded)((c_, f_) => c_.copy(succeeded = Some(f_)))
      def optionalSucceeded: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.succeeded)((c_, f_) => c_.copy(succeeded = f_))
    }
    final val SUCCEEDED_FIELD_NUMBER = 1
  }
  
  implicit class CheckStatusInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckStatusInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.CheckStatusInfo](_l) {
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckInfo.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
    def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CheckInfo.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def command: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckStatusInfo.Command] = field(_.getCommand)((c_, f_) => c_.copy(command = Some(f_)))
    def optionalCommand: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo.Command]] = field(_.command)((c_, f_) => c_.copy(command = f_))
    def http: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckStatusInfo.Http] = field(_.getHttp)((c_, f_) => c_.copy(http = Some(f_)))
    def optionalHttp: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo.Http]] = field(_.http)((c_, f_) => c_.copy(http = f_))
    def tcp: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp] = field(_.getTcp)((c_, f_) => c_.copy(tcp = Some(f_)))
    def optionalTcp: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CheckStatusInfo.Tcp]] = field(_.tcp)((c_, f_) => c_.copy(tcp = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val COMMAND_FIELD_NUMBER = 2
  final val HTTP_FIELD_NUMBER = 3
  final val TCP_FIELD_NUMBER = 4
}
