// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes a resource from a resource provider. The `name` field is
  * a string like "cpus" or "mem" that indicates which kind of resource
  * this is; the rest of the fields describe the properties of the
  * resource. A resource can take on one of three types: scalar
  * (double), a list of finite and discrete ranges (e.g., [1-10,
  * 20-30]), or a set of items. A resource is described using the
  * standard protocol buffer "union" trick.
  *
  * Note that "disk" and "mem" resources are scalar values expressed in
  * megabytes. Fractional "cpus" values are allowed (e.g., "0.5"),
  * which correspond to partial shares of a CPU.
  *
  * @param role
  *   The role that this resource is reserved for. If "*", this indicates
  *   that the resource is unreserved. Otherwise, the resource will only
  *   be offered to frameworks that belong to this role.
  * @param reservation
  *   If this is set, this resource was dynamically reserved by an
  *   operator or a framework. Otherwise, this resource is either unreserved
  *   or statically reserved by an operator via the --resources flag.
  * @param revocable
  *   If this is set, the resources are revocable, i.e., any tasks or
  *   executors launched using these resources could get preempted or
  *   throttled at any time. This could be used by frameworks to run
  *   best effort tasks that do not need strict uptime or performance
  *   guarantees. Note that if this is set, 'disk' or 'reservation'
  *   cannot be set.
  * @param shared
  *   If this is set, the resources are shared, i.e. multiple tasks
  *   can be launched using this resource and all of them shall refer
  *   to the same physical resource on the cluster. Note that only
  *   persistent volumes can be shared currently.
  */
@SerialVersionUID(0L)
final case class Resource(
    providerId: scala.Option[org.apache.mesos.v1.mesos.ResourceProviderID] = None,
    name: String,
    `type`: org.apache.mesos.v1.mesos.Value.Type,
    scalar: scala.Option[org.apache.mesos.v1.mesos.Value.Scalar] = None,
    ranges: scala.Option[org.apache.mesos.v1.mesos.Value.Ranges] = None,
    set: scala.Option[org.apache.mesos.v1.mesos.Value.Set] = None,
    role: scala.Option[String] = None,
    allocationInfo: scala.Option[org.apache.mesos.v1.mesos.Resource.AllocationInfo] = None,
    reservation: scala.Option[org.apache.mesos.v1.mesos.Resource.ReservationInfo] = None,
    disk: scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo] = None,
    revocable: scala.Option[org.apache.mesos.v1.mesos.Resource.RevocableInfo] = None,
    shared: scala.Option[org.apache.mesos.v1.mesos.Resource.SharedInfo] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Resource] with com.trueaccord.lenses.Updatable[Resource] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (providerId.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(providerId.get.serializedSize) + providerId.get.serializedSize }
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, name)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, `type`.value)
      if (scalar.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(scalar.get.serializedSize) + scalar.get.serializedSize }
      if (ranges.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ranges.get.serializedSize) + ranges.get.serializedSize }
      if (set.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(set.get.serializedSize) + set.get.serializedSize }
      if (role.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, role.get) }
      if (allocationInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(allocationInfo.get.serializedSize) + allocationInfo.get.serializedSize }
      if (reservation.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(reservation.get.serializedSize) + reservation.get.serializedSize }
      if (disk.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(disk.get.serializedSize) + disk.get.serializedSize }
      if (revocable.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(revocable.get.serializedSize) + revocable.get.serializedSize }
      if (shared.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(shared.get.serializedSize) + shared.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, name)
      _output__.writeEnum(2, `type`.value)
      scalar.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      ranges.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      set.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      role.foreach { __v =>
        _output__.writeString(6, __v)
      };
      disk.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      reservation.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      revocable.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      shared.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      allocationInfo.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      providerId.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Resource = {
      var __providerId = this.providerId
      var __name = this.name
      var __type = this.`type`
      var __scalar = this.scalar
      var __ranges = this.ranges
      var __set = this.set
      var __role = this.role
      var __allocationInfo = this.allocationInfo
      var __reservation = this.reservation
      var __disk = this.disk
      var __revocable = this.revocable
      var __shared = this.shared
      var __requiredFields0: Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 98 =>
            __providerId = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __providerId.getOrElse(org.apache.mesos.v1.mesos.ResourceProviderID.defaultInstance)))
          case 10 =>
            __name = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __type = org.apache.mesos.v1.mesos.Value.Type.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __scalar = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __scalar.getOrElse(org.apache.mesos.v1.mesos.Value.Scalar.defaultInstance)))
          case 34 =>
            __ranges = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __ranges.getOrElse(org.apache.mesos.v1.mesos.Value.Ranges.defaultInstance)))
          case 42 =>
            __set = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __set.getOrElse(org.apache.mesos.v1.mesos.Value.Set.defaultInstance)))
          case 50 =>
            __role = Some(_input__.readString())
          case 90 =>
            __allocationInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __allocationInfo.getOrElse(org.apache.mesos.v1.mesos.Resource.AllocationInfo.defaultInstance)))
          case 66 =>
            __reservation = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __reservation.getOrElse(org.apache.mesos.v1.mesos.Resource.ReservationInfo.defaultInstance)))
          case 58 =>
            __disk = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __disk.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.defaultInstance)))
          case 74 =>
            __revocable = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __revocable.getOrElse(org.apache.mesos.v1.mesos.Resource.RevocableInfo.defaultInstance)))
          case 82 =>
            __shared = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __shared.getOrElse(org.apache.mesos.v1.mesos.Resource.SharedInfo.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.Resource(
          providerId = __providerId,
          name = __name,
          `type` = __type,
          scalar = __scalar,
          ranges = __ranges,
          set = __set,
          role = __role,
          allocationInfo = __allocationInfo,
          reservation = __reservation,
          disk = __disk,
          revocable = __revocable,
          shared = __shared
      )
    }
    def getProviderId: org.apache.mesos.v1.mesos.ResourceProviderID = providerId.getOrElse(org.apache.mesos.v1.mesos.ResourceProviderID.defaultInstance)
    def clearProviderId: Resource = copy(providerId = None)
    def withProviderId(__v: org.apache.mesos.v1.mesos.ResourceProviderID): Resource = copy(providerId = Some(__v))
    def withName(__v: String): Resource = copy(name = __v)
    def withType(__v: org.apache.mesos.v1.mesos.Value.Type): Resource = copy(`type` = __v)
    def getScalar: org.apache.mesos.v1.mesos.Value.Scalar = scalar.getOrElse(org.apache.mesos.v1.mesos.Value.Scalar.defaultInstance)
    def clearScalar: Resource = copy(scalar = None)
    def withScalar(__v: org.apache.mesos.v1.mesos.Value.Scalar): Resource = copy(scalar = Some(__v))
    def getRanges: org.apache.mesos.v1.mesos.Value.Ranges = ranges.getOrElse(org.apache.mesos.v1.mesos.Value.Ranges.defaultInstance)
    def clearRanges: Resource = copy(ranges = None)
    def withRanges(__v: org.apache.mesos.v1.mesos.Value.Ranges): Resource = copy(ranges = Some(__v))
    def getSet: org.apache.mesos.v1.mesos.Value.Set = set.getOrElse(org.apache.mesos.v1.mesos.Value.Set.defaultInstance)
    def clearSet: Resource = copy(set = None)
    def withSet(__v: org.apache.mesos.v1.mesos.Value.Set): Resource = copy(set = Some(__v))
    def getRole: String = role.getOrElse("*")
    def clearRole: Resource = copy(role = None)
    def withRole(__v: String): Resource = copy(role = Some(__v))
    def getAllocationInfo: org.apache.mesos.v1.mesos.Resource.AllocationInfo = allocationInfo.getOrElse(org.apache.mesos.v1.mesos.Resource.AllocationInfo.defaultInstance)
    def clearAllocationInfo: Resource = copy(allocationInfo = None)
    def withAllocationInfo(__v: org.apache.mesos.v1.mesos.Resource.AllocationInfo): Resource = copy(allocationInfo = Some(__v))
    def getReservation: org.apache.mesos.v1.mesos.Resource.ReservationInfo = reservation.getOrElse(org.apache.mesos.v1.mesos.Resource.ReservationInfo.defaultInstance)
    def clearReservation: Resource = copy(reservation = None)
    def withReservation(__v: org.apache.mesos.v1.mesos.Resource.ReservationInfo): Resource = copy(reservation = Some(__v))
    def getDisk: org.apache.mesos.v1.mesos.Resource.DiskInfo = disk.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.defaultInstance)
    def clearDisk: Resource = copy(disk = None)
    def withDisk(__v: org.apache.mesos.v1.mesos.Resource.DiskInfo): Resource = copy(disk = Some(__v))
    def getRevocable: org.apache.mesos.v1.mesos.Resource.RevocableInfo = revocable.getOrElse(org.apache.mesos.v1.mesos.Resource.RevocableInfo.defaultInstance)
    def clearRevocable: Resource = copy(revocable = None)
    def withRevocable(__v: org.apache.mesos.v1.mesos.Resource.RevocableInfo): Resource = copy(revocable = Some(__v))
    def getShared: org.apache.mesos.v1.mesos.Resource.SharedInfo = shared.getOrElse(org.apache.mesos.v1.mesos.Resource.SharedInfo.defaultInstance)
    def clearShared: Resource = copy(shared = None)
    def withShared(__v: org.apache.mesos.v1.mesos.Resource.SharedInfo): Resource = copy(shared = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 12 => providerId.orNull
        case 1 => name
        case 2 => `type`.javaValueDescriptor
        case 3 => scalar.orNull
        case 4 => ranges.orNull
        case 5 => set.orNull
        case 6 => role.orNull
        case 11 => allocationInfo.orNull
        case 8 => reservation.orNull
        case 7 => disk.orNull
        case 9 => revocable.orNull
        case 10 => shared.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 12 => providerId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
        case 3 => scalar.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => ranges.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => set.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => role.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => allocationInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => reservation.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => disk.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => revocable.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => shared.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.Resource
}

object Resource extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Resource = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.Resource(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ResourceProviderID]],
      __fieldsMap(__fields.get(1)).asInstanceOf[String],
      org.apache.mesos.v1.mesos.Value.Type.fromValue(__fieldsMap(__fields.get(2)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Value.Scalar]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Value.Ranges]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Value.Set]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Resource.AllocationInfo]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Resource.ReservationInfo]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Resource.RevocableInfo]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Resource.SharedInfo]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Resource] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.Resource(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ResourceProviderID]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        org.apache.mesos.v1.mesos.Value.Type.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Value.Scalar]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Value.Ranges]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Value.Set]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Resource.AllocationInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Resource.ReservationInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Resource.RevocableInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Resource.SharedInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(25)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(25)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 12 => __out = org.apache.mesos.v1.mesos.ResourceProviderID
      case 3 => __out = org.apache.mesos.v1.mesos.Value.Scalar
      case 4 => __out = org.apache.mesos.v1.mesos.Value.Ranges
      case 5 => __out = org.apache.mesos.v1.mesos.Value.Set
      case 11 => __out = org.apache.mesos.v1.mesos.Resource.AllocationInfo
      case 8 => __out = org.apache.mesos.v1.mesos.Resource.ReservationInfo
      case 7 => __out = org.apache.mesos.v1.mesos.Resource.DiskInfo
      case 9 => __out = org.apache.mesos.v1.mesos.Resource.RevocableInfo
      case 10 => __out = org.apache.mesos.v1.mesos.Resource.SharedInfo
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => org.apache.mesos.v1.mesos.Value.Type
    }
  }
  lazy val defaultInstance = org.apache.mesos.v1.mesos.Resource(
    name = "",
    `type` = org.apache.mesos.v1.mesos.Value.Type.SCALAR
  )
  /** This was initially introduced to support MULTI_ROLE capable
    * frameworks. Frameworks that are not MULTI_ROLE capable can
    * continue to assume that the offered resources are allocated
    * to their role.
    *
    * @param role
    *   If set, this resource is allocated to a role. Note that in the
    *   future, this may be unset and the scheduler may be responsible
    *   for allocating to one of its roles.
    */
  @SerialVersionUID(0L)
  final case class AllocationInfo(
      role: scala.Option[String] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[AllocationInfo] with com.trueaccord.lenses.Updatable[AllocationInfo] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (role.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, role.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        role.foreach { __v =>
          _output__.writeString(1, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Resource.AllocationInfo = {
        var __role = this.role
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __role = Some(_input__.readString())
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.Resource.AllocationInfo(
            role = __role
        )
      }
      def getRole: String = role.getOrElse("")
      def clearRole: AllocationInfo = copy(role = None)
      def withRole(__v: String): AllocationInfo = copy(role = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => role.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => role.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.Resource.AllocationInfo
  }
  
  object AllocationInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.AllocationInfo] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.AllocationInfo] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Resource.AllocationInfo = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.Resource.AllocationInfo(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Resource.AllocationInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.Resource.AllocationInfo(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.Resource.AllocationInfo(
    )
    implicit class AllocationInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.AllocationInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Resource.AllocationInfo](_l) {
      def role: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getRole)((c_, f_) => c_.copy(role = Some(f_)))
      def optionalRole: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.role)((c_, f_) => c_.copy(role = f_))
    }
    final val ROLE_FIELD_NUMBER = 1
  }
  
  /** Describes a dynamic reservation. A dynamic reservation is
    * acquired by an operator via the '/reserve' HTTP endpoint or by
    * a framework via the offer cycle by sending back an
    * 'Offer::Operation::Reserve' message.
    * NOTE: We currently do not allow frameworks with role "*" to
    * make dynamic reservations.
    *
    * @param principal
    *   Indicates the principal, if any, of the framework or operator
    *   that reserved this resource. If reserved by a framework, the
    *   field should match the `FrameworkInfo.principal`. It is used in
    *   conjunction with the `UnreserveResources` ACL to determine
    *   whether the entity attempting to unreserve this resource is
    *   permitted to do so.
    * @param labels
    *   Labels are free-form key value pairs that can be used to
    *   associate arbitrary metadata with a reserved resource.  For
    *   example, frameworks can use labels to identify the intended
    *   purpose for a portion of the resources the framework has
    *   reserved at a given agent. Labels should not contain duplicate
    *   key-value pairs.
    */
  @SerialVersionUID(0L)
  final case class ReservationInfo(
      principal: scala.Option[String] = None,
      labels: scala.Option[org.apache.mesos.v1.mesos.Labels] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ReservationInfo] with com.trueaccord.lenses.Updatable[ReservationInfo] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (principal.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, principal.get) }
        if (labels.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(labels.get.serializedSize) + labels.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        principal.foreach { __v =>
          _output__.writeString(1, __v)
        };
        labels.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Resource.ReservationInfo = {
        var __principal = this.principal
        var __labels = this.labels
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __principal = Some(_input__.readString())
            case 18 =>
              __labels = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.Resource.ReservationInfo(
            principal = __principal,
            labels = __labels
        )
      }
      def getPrincipal: String = principal.getOrElse("")
      def clearPrincipal: ReservationInfo = copy(principal = None)
      def withPrincipal(__v: String): ReservationInfo = copy(principal = Some(__v))
      def getLabels: org.apache.mesos.v1.mesos.Labels = labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)
      def clearLabels: ReservationInfo = copy(labels = None)
      def withLabels(__v: org.apache.mesos.v1.mesos.Labels): ReservationInfo = copy(labels = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => principal.orNull
          case 2 => labels.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => principal.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => labels.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.Resource.ReservationInfo
  }
  
  object ReservationInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.ReservationInfo] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.ReservationInfo] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Resource.ReservationInfo = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.Resource.ReservationInfo(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Labels]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Resource.ReservationInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.Resource.ReservationInfo(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Labels]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = org.apache.mesos.v1.mesos.Labels
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.Resource.ReservationInfo(
    )
    implicit class ReservationInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.ReservationInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Resource.ReservationInfo](_l) {
      def principal: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPrincipal)((c_, f_) => c_.copy(principal = Some(f_)))
      def optionalPrincipal: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.principal)((c_, f_) => c_.copy(principal = f_))
      def labels: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Labels] = field(_.getLabels)((c_, f_) => c_.copy(labels = Some(f_)))
      def optionalLabels: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Labels]] = field(_.labels)((c_, f_) => c_.copy(labels = f_))
    }
    final val PRINCIPAL_FIELD_NUMBER = 1
    final val LABELS_FIELD_NUMBER = 2
  }
  
  /** @param volume
    *   Describes how this disk resource will be mounted in the
    *   container. If not set, the disk resource will be used as the
    *   sandbox. Otherwise, it will be mounted according to the
    *   'container_path' inside 'volume'. The 'host_path' inside
    *   'volume' is ignored.
    *   NOTE: If 'volume' is set but 'persistence' is not set, the
    *   volume will be automatically garbage collected after
    *   task/executor terminates. Currently, if 'persistence' is set,
    *   'volume' must be set.
    */
  @SerialVersionUID(0L)
  final case class DiskInfo(
      persistence: scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence] = None,
      volume: scala.Option[org.apache.mesos.v1.mesos.Volume] = None,
      source: scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DiskInfo] with com.trueaccord.lenses.Updatable[DiskInfo] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (persistence.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(persistence.get.serializedSize) + persistence.get.serializedSize }
        if (volume.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(volume.get.serializedSize) + volume.get.serializedSize }
        if (source.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(source.get.serializedSize) + source.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        persistence.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        volume.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        source.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Resource.DiskInfo = {
        var __persistence = this.persistence
        var __volume = this.volume
        var __source = this.source
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __persistence = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __persistence.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence.defaultInstance)))
            case 18 =>
              __volume = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __volume.getOrElse(org.apache.mesos.v1.mesos.Volume.defaultInstance)))
            case 26 =>
              __source = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __source.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.Resource.DiskInfo(
            persistence = __persistence,
            volume = __volume,
            source = __source
        )
      }
      def getPersistence: org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence = persistence.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence.defaultInstance)
      def clearPersistence: DiskInfo = copy(persistence = None)
      def withPersistence(__v: org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence): DiskInfo = copy(persistence = Some(__v))
      def getVolume: org.apache.mesos.v1.mesos.Volume = volume.getOrElse(org.apache.mesos.v1.mesos.Volume.defaultInstance)
      def clearVolume: DiskInfo = copy(volume = None)
      def withVolume(__v: org.apache.mesos.v1.mesos.Volume): DiskInfo = copy(volume = Some(__v))
      def getSource: org.apache.mesos.v1.mesos.Resource.DiskInfo.Source = source.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.defaultInstance)
      def clearSource: DiskInfo = copy(source = None)
      def withSource(__v: org.apache.mesos.v1.mesos.Resource.DiskInfo.Source): DiskInfo = copy(source = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => persistence.orNull
          case 2 => volume.orNull
          case 3 => source.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => persistence.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => volume.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => source.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.Resource.DiskInfo
  }
  
  object DiskInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.DiskInfo] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.DiskInfo] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Resource.DiskInfo = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.Resource.DiskInfo(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Volume]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Resource.DiskInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.Resource.DiskInfo(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Volume]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence
        case 2 => __out = org.apache.mesos.v1.mesos.Volume
        case 3 => __out = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.Resource.DiskInfo(
    )
    /** Describes a persistent disk volume.
      *
      * A persistent disk volume will not be automatically garbage
      * collected if the task/executor/agent terminates, but will be
      * re-offered to the framework(s) belonging to the 'role'.
      *
      * NOTE: Currently, we do not allow persistent disk volumes
      * without a reservation (i.e., 'role' cannot be '*').
      *
      * @param id
      *   A unique ID for the persistent disk volume. This ID must be
      *   unique per role on each agent. Although it is possible to use
      *   the same ID on different agents in the cluster and to reuse
      *   IDs after a volume with that ID has been destroyed, both
      *   practices are discouraged.
      * @param principal
      *   This field indicates the principal of the operator or
      *   framework that created this volume. It is used in conjunction
      *   with the "destroy" ACL to determine whether an entity
      *   attempting to destroy the volume is permitted to do so.
      *  
      *   NOTE: This field should match the FrameworkInfo.principal of
      *   the framework that created the volume.
      */
    @SerialVersionUID(0L)
    final case class Persistence(
        id: String,
        principal: scala.Option[String] = None
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Persistence] with com.trueaccord.lenses.Updatable[Persistence] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, id)
          if (principal.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, principal.get) }
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          _output__.writeString(1, id)
          principal.foreach { __v =>
            _output__.writeString(2, __v)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence = {
          var __id = this.id
          var __principal = this.principal
          var __requiredFields0: Long = 0x1L
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __id = _input__.readString()
                __requiredFields0 &= 0xfffffffffffffffeL
              case 18 =>
                __principal = Some(_input__.readString())
              case tag => _input__.skipField(tag)
            }
          }
          if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
          org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence(
              id = __id,
              principal = __principal
          )
        }
        def withId(__v: String): Persistence = copy(id = __v)
        def getPrincipal: String = principal.getOrElse("")
        def clearPrincipal: Persistence = copy(principal = None)
        def withPrincipal(__v: String): Persistence = copy(principal = Some(__v))
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => id
            case 2 => principal.orNull
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(id)
            case 2 => principal.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence
    }
    
    object Persistence extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence(
          __fieldsMap(__fields.get(0)).asInstanceOf[String],
          __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]])
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.DiskInfo.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.DiskInfo.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence(
        id = ""
      )
      implicit class PersistenceLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence](_l) {
        def id: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.id)((c_, f_) => c_.copy(id = f_))
        def principal: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPrincipal)((c_, f_) => c_.copy(principal = Some(f_)))
        def optionalPrincipal: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.principal)((c_, f_) => c_.copy(principal = f_))
      }
      final val ID_FIELD_NUMBER = 1
      final val PRINCIPAL_FIELD_NUMBER = 2
    }
    
    /** Describes where a disk originates from.
      * TODO(jmlvanre): Add support for BLOCK devices.
      */
    @SerialVersionUID(0L)
    final case class Source(
        `type`: org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Type,
        path: scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path] = None,
        mount: scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount] = None
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Source] with com.trueaccord.lenses.Updatable[Source] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.value)
          if (path.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(path.get.serializedSize) + path.get.serializedSize }
          if (mount.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(mount.get.serializedSize) + mount.get.serializedSize }
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          _output__.writeEnum(1, `type`.value)
          path.foreach { __v =>
            _output__.writeTag(2, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          mount.foreach { __v =>
            _output__.writeTag(3, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Resource.DiskInfo.Source = {
          var __type = this.`type`
          var __path = this.path
          var __mount = this.mount
          var __requiredFields0: Long = 0x1L
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 8 =>
                __type = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Type.fromValue(_input__.readEnum())
                __requiredFields0 &= 0xfffffffffffffffeL
              case 18 =>
                __path = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __path.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path.defaultInstance)))
              case 26 =>
                __mount = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __mount.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount.defaultInstance)))
              case tag => _input__.skipField(tag)
            }
          }
          if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
          org.apache.mesos.v1.mesos.Resource.DiskInfo.Source(
              `type` = __type,
              path = __path,
              mount = __mount
          )
        }
        def withType(__v: org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Type): Source = copy(`type` = __v)
        def getPath: org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path = path.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path.defaultInstance)
        def clearPath: Source = copy(path = None)
        def withPath(__v: org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path): Source = copy(path = Some(__v))
        def getMount: org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount = mount.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount.defaultInstance)
        def clearMount: Source = copy(mount = None)
        def withMount(__v: org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount): Source = copy(mount = Some(__v))
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => `type`.javaValueDescriptor
            case 2 => path.orNull
            case 3 => mount.orNull
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
            case 2 => path.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 3 => mount.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source
    }
    
    object Source extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Resource.DiskInfo.Source = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        org.apache.mesos.v1.mesos.Resource.DiskInfo.Source(
          org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Type.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
          __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path]],
          __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          org.apache.mesos.v1.mesos.Resource.DiskInfo.Source(
            org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Type.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount]])
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.DiskInfo.javaDescriptor.getNestedTypes.get(1)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.DiskInfo.scalaDescriptor.nestedMessages(1)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 2 => __out = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path
          case 3 => __out = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Type
        }
      }
      lazy val defaultInstance = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source(
        `type` = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Type.UNKNOWN
      )
      sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
        type EnumType = Type
        def isUnknown: Boolean = false
        def isPath: Boolean = false
        def isMount: Boolean = false
        def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Type
      }
      
      object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
        implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
        @SerialVersionUID(0L)
        case object UNKNOWN extends Type {
          val value = 0
          val index = 0
          val name = "UNKNOWN"
          override def isUnknown: Boolean = true
        }
        
        @SerialVersionUID(0L)
        case object PATH extends Type {
          val value = 1
          val index = 1
          val name = "PATH"
          override def isPath: Boolean = true
        }
        
        @SerialVersionUID(0L)
        case object MOUNT extends Type {
          val value = 2
          val index = 2
          val name = "MOUNT"
          override def isMount: Boolean = true
        }
        
        @SerialVersionUID(0L)
        case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
        
        lazy val values = scala.collection.Seq(UNKNOWN, PATH, MOUNT)
        def fromValue(value: Int): Type = value match {
          case 0 => UNKNOWN
          case 1 => PATH
          case 2 => MOUNT
          case __other => Unrecognized(__other)
        }
        def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.javaDescriptor.getEnumTypes.get(0)
        def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.scalaDescriptor.enums(0)
      }
      /** A folder that can be located on a separate disk device. This
        * can be shared and carved up as necessary between frameworks.
        *
        * @param root
        *   Path to the folder (e.g., /mnt/raid/disk0).
        */
      @SerialVersionUID(0L)
      final case class Path(
          root: scala.Option[String] = None
          ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Path] with com.trueaccord.lenses.Updatable[Path] {
          @transient
          private[this] var __serializedSizeCachedValue: Int = 0
          private[this] def __computeSerializedValue(): Int = {
            var __size = 0
            if (root.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, root.get) }
            __size
          }
          final override def serializedSize: Int = {
            var read = __serializedSizeCachedValue
            if (read == 0) {
              read = __computeSerializedValue()
              __serializedSizeCachedValue = read
            }
            read
          }
          def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
            root.foreach { __v =>
              _output__.writeString(1, __v)
            };
          }
          def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path = {
            var __root = this.root
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __root = Some(_input__.readString())
                case tag => _input__.skipField(tag)
              }
            }
            org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path(
                root = __root
            )
          }
          def getRoot: String = root.getOrElse("")
          def clearRoot: Path = copy(root = None)
          def withRoot(__v: String): Path = copy(root = Some(__v))
          def getFieldByNumber(__fieldNumber: Int): scala.Any = {
            (__fieldNumber: @_root_.scala.unchecked) match {
              case 1 => root.orNull
            }
          }
          def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
            require(__field.containingMessage eq companion.scalaDescriptor)
            (__field.number: @_root_.scala.unchecked) match {
              case 1 => root.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
            }
          }
          override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
          def companion = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path
      }
      
      object Path extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path] {
        implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path] = this
        def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path = {
          require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
          val __fields = javaDescriptor.getFields
          org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path(
            __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]]
          )
        }
        implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path] = _root_.scalapb.descriptors.Reads{
          case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
            require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
            org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path(
              __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]])
            )
          case _ => throw new RuntimeException("Expected PMessage")
        }
        def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.javaDescriptor.getNestedTypes.get(0)
        def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.scalaDescriptor.nestedMessages(0)
        def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
        def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
        lazy val defaultInstance = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path(
        )
        implicit class PathLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path](_l) {
          def root: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getRoot)((c_, f_) => c_.copy(root = Some(f_)))
          def optionalRoot: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.root)((c_, f_) => c_.copy(root = f_))
        }
        final val ROOT_FIELD_NUMBER = 1
      }
      
      /** A mounted file-system set up by the Agent administrator. This
        * can only be used exclusively: a framework cannot accept a
        * partial amount of this disk.
        *
        * @param root
        *   Path to mount point (e.g., /mnt/raid/disk0).
        */
      @SerialVersionUID(0L)
      final case class Mount(
          root: scala.Option[String] = None
          ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Mount] with com.trueaccord.lenses.Updatable[Mount] {
          @transient
          private[this] var __serializedSizeCachedValue: Int = 0
          private[this] def __computeSerializedValue(): Int = {
            var __size = 0
            if (root.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, root.get) }
            __size
          }
          final override def serializedSize: Int = {
            var read = __serializedSizeCachedValue
            if (read == 0) {
              read = __computeSerializedValue()
              __serializedSizeCachedValue = read
            }
            read
          }
          def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
            root.foreach { __v =>
              _output__.writeString(1, __v)
            };
          }
          def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount = {
            var __root = this.root
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __root = Some(_input__.readString())
                case tag => _input__.skipField(tag)
              }
            }
            org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount(
                root = __root
            )
          }
          def getRoot: String = root.getOrElse("")
          def clearRoot: Mount = copy(root = None)
          def withRoot(__v: String): Mount = copy(root = Some(__v))
          def getFieldByNumber(__fieldNumber: Int): scala.Any = {
            (__fieldNumber: @_root_.scala.unchecked) match {
              case 1 => root.orNull
            }
          }
          def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
            require(__field.containingMessage eq companion.scalaDescriptor)
            (__field.number: @_root_.scala.unchecked) match {
              case 1 => root.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
            }
          }
          override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
          def companion = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount
      }
      
      object Mount extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount] {
        implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount] = this
        def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount = {
          require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
          val __fields = javaDescriptor.getFields
          org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount(
            __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]]
          )
        }
        implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount] = _root_.scalapb.descriptors.Reads{
          case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
            require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
            org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount(
              __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]])
            )
          case _ => throw new RuntimeException("Expected PMessage")
        }
        def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.javaDescriptor.getNestedTypes.get(1)
        def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.scalaDescriptor.nestedMessages(1)
        def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
        def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
        lazy val defaultInstance = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount(
        )
        implicit class MountLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount](_l) {
          def root: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getRoot)((c_, f_) => c_.copy(root = Some(f_)))
          def optionalRoot: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.root)((c_, f_) => c_.copy(root = f_))
        }
        final val ROOT_FIELD_NUMBER = 1
      }
      
      implicit class SourceLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Source]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Source](_l) {
        def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
        def path: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path] = field(_.getPath)((c_, f_) => c_.copy(path = Some(f_)))
        def optionalPath: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Path]] = field(_.path)((c_, f_) => c_.copy(path = f_))
        def mount: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount] = field(_.getMount)((c_, f_) => c_.copy(mount = Some(f_)))
        def optionalMount: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.Mount]] = field(_.mount)((c_, f_) => c_.copy(mount = f_))
      }
      final val TYPE_FIELD_NUMBER = 1
      final val PATH_FIELD_NUMBER = 2
      final val MOUNT_FIELD_NUMBER = 3
    }
    
    implicit class DiskInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo](_l) {
      def persistence: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence] = field(_.getPersistence)((c_, f_) => c_.copy(persistence = Some(f_)))
      def optionalPersistence: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence]] = field(_.persistence)((c_, f_) => c_.copy(persistence = f_))
      def volume: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Volume] = field(_.getVolume)((c_, f_) => c_.copy(volume = Some(f_)))
      def optionalVolume: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Volume]] = field(_.volume)((c_, f_) => c_.copy(volume = f_))
      def source: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Source] = field(_.getSource)((c_, f_) => c_.copy(source = Some(f_)))
      def optionalSource: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source]] = field(_.source)((c_, f_) => c_.copy(source = f_))
    }
    final val PERSISTENCE_FIELD_NUMBER = 1
    final val VOLUME_FIELD_NUMBER = 2
    final val SOURCE_FIELD_NUMBER = 3
  }
  
  @SerialVersionUID(0L)
  final case class RevocableInfo(
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[RevocableInfo] with com.trueaccord.lenses.Updatable[RevocableInfo] {
      final override def serializedSize: Int = 0
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Resource.RevocableInfo = {
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.Resource.RevocableInfo(
        )
      }
      def getFieldByNumber(__fieldNumber: Int): scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.Resource.RevocableInfo
  }
  
  object RevocableInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.RevocableInfo] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.RevocableInfo] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Resource.RevocableInfo = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.Resource.RevocableInfo(
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Resource.RevocableInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.Resource.RevocableInfo(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.Resource.RevocableInfo(
    )
    implicit class RevocableInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.RevocableInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Resource.RevocableInfo](_l) {
    }
  }
  
  /** Allow the resource to be shared across tasks.
    */
  @SerialVersionUID(0L)
  final case class SharedInfo(
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[SharedInfo] with com.trueaccord.lenses.Updatable[SharedInfo] {
      final override def serializedSize: Int = 0
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Resource.SharedInfo = {
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.Resource.SharedInfo(
        )
      }
      def getFieldByNumber(__fieldNumber: Int): scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.Resource.SharedInfo
  }
  
  object SharedInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.SharedInfo] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Resource.SharedInfo] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Resource.SharedInfo = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.Resource.SharedInfo(
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Resource.SharedInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.Resource.SharedInfo(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.javaDescriptor.getNestedTypes.get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Resource.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.Resource.SharedInfo(
    )
    implicit class SharedInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.SharedInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Resource.SharedInfo](_l) {
    }
  }
  
  implicit class ResourceLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Resource](_l) {
    def providerId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ResourceProviderID] = field(_.getProviderId)((c_, f_) => c_.copy(providerId = Some(f_)))
    def optionalProviderId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ResourceProviderID]] = field(_.providerId)((c_, f_) => c_.copy(providerId = f_))
    def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Value.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def scalar: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Value.Scalar] = field(_.getScalar)((c_, f_) => c_.copy(scalar = Some(f_)))
    def optionalScalar: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Value.Scalar]] = field(_.scalar)((c_, f_) => c_.copy(scalar = f_))
    def ranges: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Value.Ranges] = field(_.getRanges)((c_, f_) => c_.copy(ranges = Some(f_)))
    def optionalRanges: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Value.Ranges]] = field(_.ranges)((c_, f_) => c_.copy(ranges = f_))
    def set: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Value.Set] = field(_.getSet)((c_, f_) => c_.copy(set = Some(f_)))
    def optionalSet: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Value.Set]] = field(_.set)((c_, f_) => c_.copy(set = f_))
    def role: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getRole)((c_, f_) => c_.copy(role = Some(f_)))
    def optionalRole: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.role)((c_, f_) => c_.copy(role = f_))
    def allocationInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.AllocationInfo] = field(_.getAllocationInfo)((c_, f_) => c_.copy(allocationInfo = Some(f_)))
    def optionalAllocationInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Resource.AllocationInfo]] = field(_.allocationInfo)((c_, f_) => c_.copy(allocationInfo = f_))
    def reservation: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.ReservationInfo] = field(_.getReservation)((c_, f_) => c_.copy(reservation = Some(f_)))
    def optionalReservation: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Resource.ReservationInfo]] = field(_.reservation)((c_, f_) => c_.copy(reservation = f_))
    def disk: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo] = field(_.getDisk)((c_, f_) => c_.copy(disk = Some(f_)))
    def optionalDisk: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo]] = field(_.disk)((c_, f_) => c_.copy(disk = f_))
    def revocable: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.RevocableInfo] = field(_.getRevocable)((c_, f_) => c_.copy(revocable = Some(f_)))
    def optionalRevocable: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Resource.RevocableInfo]] = field(_.revocable)((c_, f_) => c_.copy(revocable = f_))
    def shared: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.SharedInfo] = field(_.getShared)((c_, f_) => c_.copy(shared = Some(f_)))
    def optionalShared: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Resource.SharedInfo]] = field(_.shared)((c_, f_) => c_.copy(shared = f_))
  }
  final val PROVIDER_ID_FIELD_NUMBER = 12
  final val NAME_FIELD_NUMBER = 1
  final val TYPE_FIELD_NUMBER = 2
  final val SCALAR_FIELD_NUMBER = 3
  final val RANGES_FIELD_NUMBER = 4
  final val SET_FIELD_NUMBER = 5
  final val ROLE_FIELD_NUMBER = 6
  final val ALLOCATION_INFO_FIELD_NUMBER = 11
  final val RESERVATION_FIELD_NUMBER = 8
  final val DISK_FIELD_NUMBER = 7
  final val REVOCABLE_FIELD_NUMBER = 9
  final val SHARED_FIELD_NUMBER = 10
}
