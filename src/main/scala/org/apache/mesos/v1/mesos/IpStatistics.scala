// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

@SerialVersionUID(0L)
final case class IpStatistics(
    forwarding: scala.Option[Long] = None,
    defaultTTL: scala.Option[Long] = None,
    inReceives: scala.Option[Long] = None,
    inHdrErrors: scala.Option[Long] = None,
    inAddrErrors: scala.Option[Long] = None,
    forwDatagrams: scala.Option[Long] = None,
    inUnknownProtos: scala.Option[Long] = None,
    inDiscards: scala.Option[Long] = None,
    inDelivers: scala.Option[Long] = None,
    outRequests: scala.Option[Long] = None,
    outDiscards: scala.Option[Long] = None,
    outNoRoutes: scala.Option[Long] = None,
    reasmTimeout: scala.Option[Long] = None,
    reasmReqds: scala.Option[Long] = None,
    reasmOKs: scala.Option[Long] = None,
    reasmFails: scala.Option[Long] = None,
    fragOKs: scala.Option[Long] = None,
    fragFails: scala.Option[Long] = None,
    fragCreates: scala.Option[Long] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[IpStatistics] with com.trueaccord.lenses.Updatable[IpStatistics] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (forwarding.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, forwarding.get) }
      if (defaultTTL.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, defaultTTL.get) }
      if (inReceives.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, inReceives.get) }
      if (inHdrErrors.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, inHdrErrors.get) }
      if (inAddrErrors.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, inAddrErrors.get) }
      if (forwDatagrams.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, forwDatagrams.get) }
      if (inUnknownProtos.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, inUnknownProtos.get) }
      if (inDiscards.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, inDiscards.get) }
      if (inDelivers.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, inDelivers.get) }
      if (outRequests.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, outRequests.get) }
      if (outDiscards.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, outDiscards.get) }
      if (outNoRoutes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(12, outNoRoutes.get) }
      if (reasmTimeout.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(13, reasmTimeout.get) }
      if (reasmReqds.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(14, reasmReqds.get) }
      if (reasmOKs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(15, reasmOKs.get) }
      if (reasmFails.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(16, reasmFails.get) }
      if (fragOKs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(17, fragOKs.get) }
      if (fragFails.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(18, fragFails.get) }
      if (fragCreates.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(19, fragCreates.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      forwarding.foreach { __v =>
        _output__.writeInt64(1, __v)
      };
      defaultTTL.foreach { __v =>
        _output__.writeInt64(2, __v)
      };
      inReceives.foreach { __v =>
        _output__.writeInt64(3, __v)
      };
      inHdrErrors.foreach { __v =>
        _output__.writeInt64(4, __v)
      };
      inAddrErrors.foreach { __v =>
        _output__.writeInt64(5, __v)
      };
      forwDatagrams.foreach { __v =>
        _output__.writeInt64(6, __v)
      };
      inUnknownProtos.foreach { __v =>
        _output__.writeInt64(7, __v)
      };
      inDiscards.foreach { __v =>
        _output__.writeInt64(8, __v)
      };
      inDelivers.foreach { __v =>
        _output__.writeInt64(9, __v)
      };
      outRequests.foreach { __v =>
        _output__.writeInt64(10, __v)
      };
      outDiscards.foreach { __v =>
        _output__.writeInt64(11, __v)
      };
      outNoRoutes.foreach { __v =>
        _output__.writeInt64(12, __v)
      };
      reasmTimeout.foreach { __v =>
        _output__.writeInt64(13, __v)
      };
      reasmReqds.foreach { __v =>
        _output__.writeInt64(14, __v)
      };
      reasmOKs.foreach { __v =>
        _output__.writeInt64(15, __v)
      };
      reasmFails.foreach { __v =>
        _output__.writeInt64(16, __v)
      };
      fragOKs.foreach { __v =>
        _output__.writeInt64(17, __v)
      };
      fragFails.foreach { __v =>
        _output__.writeInt64(18, __v)
      };
      fragCreates.foreach { __v =>
        _output__.writeInt64(19, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.IpStatistics = {
      var __forwarding = this.forwarding
      var __defaultTTL = this.defaultTTL
      var __inReceives = this.inReceives
      var __inHdrErrors = this.inHdrErrors
      var __inAddrErrors = this.inAddrErrors
      var __forwDatagrams = this.forwDatagrams
      var __inUnknownProtos = this.inUnknownProtos
      var __inDiscards = this.inDiscards
      var __inDelivers = this.inDelivers
      var __outRequests = this.outRequests
      var __outDiscards = this.outDiscards
      var __outNoRoutes = this.outNoRoutes
      var __reasmTimeout = this.reasmTimeout
      var __reasmReqds = this.reasmReqds
      var __reasmOKs = this.reasmOKs
      var __reasmFails = this.reasmFails
      var __fragOKs = this.fragOKs
      var __fragFails = this.fragFails
      var __fragCreates = this.fragCreates
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __forwarding = Some(_input__.readInt64())
          case 16 =>
            __defaultTTL = Some(_input__.readInt64())
          case 24 =>
            __inReceives = Some(_input__.readInt64())
          case 32 =>
            __inHdrErrors = Some(_input__.readInt64())
          case 40 =>
            __inAddrErrors = Some(_input__.readInt64())
          case 48 =>
            __forwDatagrams = Some(_input__.readInt64())
          case 56 =>
            __inUnknownProtos = Some(_input__.readInt64())
          case 64 =>
            __inDiscards = Some(_input__.readInt64())
          case 72 =>
            __inDelivers = Some(_input__.readInt64())
          case 80 =>
            __outRequests = Some(_input__.readInt64())
          case 88 =>
            __outDiscards = Some(_input__.readInt64())
          case 96 =>
            __outNoRoutes = Some(_input__.readInt64())
          case 104 =>
            __reasmTimeout = Some(_input__.readInt64())
          case 112 =>
            __reasmReqds = Some(_input__.readInt64())
          case 120 =>
            __reasmOKs = Some(_input__.readInt64())
          case 128 =>
            __reasmFails = Some(_input__.readInt64())
          case 136 =>
            __fragOKs = Some(_input__.readInt64())
          case 144 =>
            __fragFails = Some(_input__.readInt64())
          case 152 =>
            __fragCreates = Some(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.IpStatistics(
          forwarding = __forwarding,
          defaultTTL = __defaultTTL,
          inReceives = __inReceives,
          inHdrErrors = __inHdrErrors,
          inAddrErrors = __inAddrErrors,
          forwDatagrams = __forwDatagrams,
          inUnknownProtos = __inUnknownProtos,
          inDiscards = __inDiscards,
          inDelivers = __inDelivers,
          outRequests = __outRequests,
          outDiscards = __outDiscards,
          outNoRoutes = __outNoRoutes,
          reasmTimeout = __reasmTimeout,
          reasmReqds = __reasmReqds,
          reasmOKs = __reasmOKs,
          reasmFails = __reasmFails,
          fragOKs = __fragOKs,
          fragFails = __fragFails,
          fragCreates = __fragCreates
      )
    }
    def getForwarding: Long = forwarding.getOrElse(0L)
    def clearForwarding: IpStatistics = copy(forwarding = None)
    def withForwarding(__v: Long): IpStatistics = copy(forwarding = Some(__v))
    def getDefaultTTL: Long = defaultTTL.getOrElse(0L)
    def clearDefaultTTL: IpStatistics = copy(defaultTTL = None)
    def withDefaultTTL(__v: Long): IpStatistics = copy(defaultTTL = Some(__v))
    def getInReceives: Long = inReceives.getOrElse(0L)
    def clearInReceives: IpStatistics = copy(inReceives = None)
    def withInReceives(__v: Long): IpStatistics = copy(inReceives = Some(__v))
    def getInHdrErrors: Long = inHdrErrors.getOrElse(0L)
    def clearInHdrErrors: IpStatistics = copy(inHdrErrors = None)
    def withInHdrErrors(__v: Long): IpStatistics = copy(inHdrErrors = Some(__v))
    def getInAddrErrors: Long = inAddrErrors.getOrElse(0L)
    def clearInAddrErrors: IpStatistics = copy(inAddrErrors = None)
    def withInAddrErrors(__v: Long): IpStatistics = copy(inAddrErrors = Some(__v))
    def getForwDatagrams: Long = forwDatagrams.getOrElse(0L)
    def clearForwDatagrams: IpStatistics = copy(forwDatagrams = None)
    def withForwDatagrams(__v: Long): IpStatistics = copy(forwDatagrams = Some(__v))
    def getInUnknownProtos: Long = inUnknownProtos.getOrElse(0L)
    def clearInUnknownProtos: IpStatistics = copy(inUnknownProtos = None)
    def withInUnknownProtos(__v: Long): IpStatistics = copy(inUnknownProtos = Some(__v))
    def getInDiscards: Long = inDiscards.getOrElse(0L)
    def clearInDiscards: IpStatistics = copy(inDiscards = None)
    def withInDiscards(__v: Long): IpStatistics = copy(inDiscards = Some(__v))
    def getInDelivers: Long = inDelivers.getOrElse(0L)
    def clearInDelivers: IpStatistics = copy(inDelivers = None)
    def withInDelivers(__v: Long): IpStatistics = copy(inDelivers = Some(__v))
    def getOutRequests: Long = outRequests.getOrElse(0L)
    def clearOutRequests: IpStatistics = copy(outRequests = None)
    def withOutRequests(__v: Long): IpStatistics = copy(outRequests = Some(__v))
    def getOutDiscards: Long = outDiscards.getOrElse(0L)
    def clearOutDiscards: IpStatistics = copy(outDiscards = None)
    def withOutDiscards(__v: Long): IpStatistics = copy(outDiscards = Some(__v))
    def getOutNoRoutes: Long = outNoRoutes.getOrElse(0L)
    def clearOutNoRoutes: IpStatistics = copy(outNoRoutes = None)
    def withOutNoRoutes(__v: Long): IpStatistics = copy(outNoRoutes = Some(__v))
    def getReasmTimeout: Long = reasmTimeout.getOrElse(0L)
    def clearReasmTimeout: IpStatistics = copy(reasmTimeout = None)
    def withReasmTimeout(__v: Long): IpStatistics = copy(reasmTimeout = Some(__v))
    def getReasmReqds: Long = reasmReqds.getOrElse(0L)
    def clearReasmReqds: IpStatistics = copy(reasmReqds = None)
    def withReasmReqds(__v: Long): IpStatistics = copy(reasmReqds = Some(__v))
    def getReasmOKs: Long = reasmOKs.getOrElse(0L)
    def clearReasmOKs: IpStatistics = copy(reasmOKs = None)
    def withReasmOKs(__v: Long): IpStatistics = copy(reasmOKs = Some(__v))
    def getReasmFails: Long = reasmFails.getOrElse(0L)
    def clearReasmFails: IpStatistics = copy(reasmFails = None)
    def withReasmFails(__v: Long): IpStatistics = copy(reasmFails = Some(__v))
    def getFragOKs: Long = fragOKs.getOrElse(0L)
    def clearFragOKs: IpStatistics = copy(fragOKs = None)
    def withFragOKs(__v: Long): IpStatistics = copy(fragOKs = Some(__v))
    def getFragFails: Long = fragFails.getOrElse(0L)
    def clearFragFails: IpStatistics = copy(fragFails = None)
    def withFragFails(__v: Long): IpStatistics = copy(fragFails = Some(__v))
    def getFragCreates: Long = fragCreates.getOrElse(0L)
    def clearFragCreates: IpStatistics = copy(fragCreates = None)
    def withFragCreates(__v: Long): IpStatistics = copy(fragCreates = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => forwarding.orNull
        case 2 => defaultTTL.orNull
        case 3 => inReceives.orNull
        case 4 => inHdrErrors.orNull
        case 5 => inAddrErrors.orNull
        case 6 => forwDatagrams.orNull
        case 7 => inUnknownProtos.orNull
        case 8 => inDiscards.orNull
        case 9 => inDelivers.orNull
        case 10 => outRequests.orNull
        case 11 => outDiscards.orNull
        case 12 => outNoRoutes.orNull
        case 13 => reasmTimeout.orNull
        case 14 => reasmReqds.orNull
        case 15 => reasmOKs.orNull
        case 16 => reasmFails.orNull
        case 17 => fragOKs.orNull
        case 18 => fragFails.orNull
        case 19 => fragCreates.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => forwarding.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => defaultTTL.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => inReceives.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => inHdrErrors.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => inAddrErrors.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => forwDatagrams.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => inUnknownProtos.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => inDiscards.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => inDelivers.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => outRequests.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => outDiscards.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => outNoRoutes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => reasmTimeout.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => reasmReqds.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => reasmOKs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => reasmFails.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => fragOKs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => fragFails.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => fragCreates.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.IpStatistics
}

object IpStatistics extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.IpStatistics] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.IpStatistics] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.IpStatistics = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.IpStatistics(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.IpStatistics] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.IpStatistics(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[scala.Option[Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(27)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(27)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.IpStatistics(
  )
  implicit class IpStatisticsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.IpStatistics]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.IpStatistics](_l) {
    def forwarding: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getForwarding)((c_, f_) => c_.copy(forwarding = Some(f_)))
    def optionalForwarding: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.forwarding)((c_, f_) => c_.copy(forwarding = f_))
    def defaultTTL: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDefaultTTL)((c_, f_) => c_.copy(defaultTTL = Some(f_)))
    def optionalDefaultTTL: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.defaultTTL)((c_, f_) => c_.copy(defaultTTL = f_))
    def inReceives: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInReceives)((c_, f_) => c_.copy(inReceives = Some(f_)))
    def optionalInReceives: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inReceives)((c_, f_) => c_.copy(inReceives = f_))
    def inHdrErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInHdrErrors)((c_, f_) => c_.copy(inHdrErrors = Some(f_)))
    def optionalInHdrErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inHdrErrors)((c_, f_) => c_.copy(inHdrErrors = f_))
    def inAddrErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInAddrErrors)((c_, f_) => c_.copy(inAddrErrors = Some(f_)))
    def optionalInAddrErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inAddrErrors)((c_, f_) => c_.copy(inAddrErrors = f_))
    def forwDatagrams: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getForwDatagrams)((c_, f_) => c_.copy(forwDatagrams = Some(f_)))
    def optionalForwDatagrams: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.forwDatagrams)((c_, f_) => c_.copy(forwDatagrams = f_))
    def inUnknownProtos: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInUnknownProtos)((c_, f_) => c_.copy(inUnknownProtos = Some(f_)))
    def optionalInUnknownProtos: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inUnknownProtos)((c_, f_) => c_.copy(inUnknownProtos = f_))
    def inDiscards: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInDiscards)((c_, f_) => c_.copy(inDiscards = Some(f_)))
    def optionalInDiscards: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inDiscards)((c_, f_) => c_.copy(inDiscards = f_))
    def inDelivers: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInDelivers)((c_, f_) => c_.copy(inDelivers = Some(f_)))
    def optionalInDelivers: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inDelivers)((c_, f_) => c_.copy(inDelivers = f_))
    def outRequests: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutRequests)((c_, f_) => c_.copy(outRequests = Some(f_)))
    def optionalOutRequests: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outRequests)((c_, f_) => c_.copy(outRequests = f_))
    def outDiscards: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutDiscards)((c_, f_) => c_.copy(outDiscards = Some(f_)))
    def optionalOutDiscards: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outDiscards)((c_, f_) => c_.copy(outDiscards = f_))
    def outNoRoutes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutNoRoutes)((c_, f_) => c_.copy(outNoRoutes = Some(f_)))
    def optionalOutNoRoutes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outNoRoutes)((c_, f_) => c_.copy(outNoRoutes = f_))
    def reasmTimeout: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getReasmTimeout)((c_, f_) => c_.copy(reasmTimeout = Some(f_)))
    def optionalReasmTimeout: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.reasmTimeout)((c_, f_) => c_.copy(reasmTimeout = f_))
    def reasmReqds: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getReasmReqds)((c_, f_) => c_.copy(reasmReqds = Some(f_)))
    def optionalReasmReqds: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.reasmReqds)((c_, f_) => c_.copy(reasmReqds = f_))
    def reasmOKs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getReasmOKs)((c_, f_) => c_.copy(reasmOKs = Some(f_)))
    def optionalReasmOKs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.reasmOKs)((c_, f_) => c_.copy(reasmOKs = f_))
    def reasmFails: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getReasmFails)((c_, f_) => c_.copy(reasmFails = Some(f_)))
    def optionalReasmFails: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.reasmFails)((c_, f_) => c_.copy(reasmFails = f_))
    def fragOKs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getFragOKs)((c_, f_) => c_.copy(fragOKs = Some(f_)))
    def optionalFragOKs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.fragOKs)((c_, f_) => c_.copy(fragOKs = f_))
    def fragFails: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getFragFails)((c_, f_) => c_.copy(fragFails = Some(f_)))
    def optionalFragFails: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.fragFails)((c_, f_) => c_.copy(fragFails = f_))
    def fragCreates: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getFragCreates)((c_, f_) => c_.copy(fragCreates = Some(f_)))
    def optionalFragCreates: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.fragCreates)((c_, f_) => c_.copy(fragCreates = f_))
  }
  final val FORWARDING_FIELD_NUMBER = 1
  final val DEFAULTTTL_FIELD_NUMBER = 2
  final val INRECEIVES_FIELD_NUMBER = 3
  final val INHDRERRORS_FIELD_NUMBER = 4
  final val INADDRERRORS_FIELD_NUMBER = 5
  final val FORWDATAGRAMS_FIELD_NUMBER = 6
  final val INUNKNOWNPROTOS_FIELD_NUMBER = 7
  final val INDISCARDS_FIELD_NUMBER = 8
  final val INDELIVERS_FIELD_NUMBER = 9
  final val OUTREQUESTS_FIELD_NUMBER = 10
  final val OUTDISCARDS_FIELD_NUMBER = 11
  final val OUTNOROUTES_FIELD_NUMBER = 12
  final val REASMTIMEOUT_FIELD_NUMBER = 13
  final val REASMREQDS_FIELD_NUMBER = 14
  final val REASMOKS_FIELD_NUMBER = 15
  final val REASMFAILS_FIELD_NUMBER = 16
  final val FRAGOKS_FIELD_NUMBER = 17
  final val FRAGFAILS_FIELD_NUMBER = 18
  final val FRAGCREATES_FIELD_NUMBER = 19
}
