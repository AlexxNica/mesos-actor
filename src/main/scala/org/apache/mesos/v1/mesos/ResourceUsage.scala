// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes a snapshot of the resource usage for executors.
  *
  * @param total
  *   Agent's total resources including checkpointed dynamic
  *   reservations and persistent volumes.
  */
@SerialVersionUID(0L)
final case class ResourceUsage(
    executors: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ResourceUsage.Executor] = _root_.scala.collection.Seq.empty,
    total: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ResourceUsage] with com.trueaccord.lenses.Updatable[ResourceUsage] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      executors.foreach(executors => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(executors.serializedSize) + executors.serializedSize)
      total.foreach(total => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(total.serializedSize) + total.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      executors.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      total.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.ResourceUsage = {
      val __executors = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.ResourceUsage.Executor] ++= this.executors)
      val __total = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.total)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __executors += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.ResourceUsage.Executor.defaultInstance)
          case 18 =>
            __total += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.ResourceUsage(
          executors = __executors.result(),
          total = __total.result()
      )
    }
    def clearExecutors = copy(executors = _root_.scala.collection.Seq.empty)
    def addExecutors(__vs: org.apache.mesos.v1.mesos.ResourceUsage.Executor*): ResourceUsage = addAllExecutors(__vs)
    def addAllExecutors(__vs: TraversableOnce[org.apache.mesos.v1.mesos.ResourceUsage.Executor]): ResourceUsage = copy(executors = executors ++ __vs)
    def withExecutors(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ResourceUsage.Executor]): ResourceUsage = copy(executors = __v)
    def clearTotal = copy(total = _root_.scala.collection.Seq.empty)
    def addTotal(__vs: org.apache.mesos.v1.mesos.Resource*): ResourceUsage = addAllTotal(__vs)
    def addAllTotal(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): ResourceUsage = copy(total = total ++ __vs)
    def withTotal(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): ResourceUsage = copy(total = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => executors
        case 2 => total
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(executors.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 2 => _root_.scalapb.descriptors.PRepeated(total.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.ResourceUsage
}

object ResourceUsage extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ResourceUsage] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ResourceUsage] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.ResourceUsage = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.ResourceUsage(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ResourceUsage.Executor]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.ResourceUsage] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.ResourceUsage(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ResourceUsage.Executor]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(34)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(34)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = org.apache.mesos.v1.mesos.ResourceUsage.Executor
      case 2 => __out = org.apache.mesos.v1.mesos.Resource
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.ResourceUsage(
  )
  /** @param allocated
    *   This includes resources used by the executor itself
    *   as well as its active tasks.
    * @param statistics
    *   Current resource usage. If absent, the containerizer
    *   cannot provide resource usage.
    * @param containerId
    *   The container id for the executor specified in the executor_info field.
    * @param tasks
    *   Non-terminal tasks.
    */
  @SerialVersionUID(0L)
  final case class Executor(
      executorInfo: org.apache.mesos.v1.mesos.ExecutorInfo,
      allocated: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty,
      statistics: scala.Option[org.apache.mesos.v1.mesos.ResourceStatistics] = None,
      containerId: org.apache.mesos.v1.mesos.ContainerID,
      tasks: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Executor] with com.trueaccord.lenses.Updatable[Executor] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(executorInfo.serializedSize) + executorInfo.serializedSize
        allocated.foreach(allocated => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(allocated.serializedSize) + allocated.serializedSize)
        if (statistics.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(statistics.get.serializedSize) + statistics.get.serializedSize }
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containerId.serializedSize) + containerId.serializedSize
        tasks.foreach(tasks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(tasks.serializedSize) + tasks.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(executorInfo.serializedSize)
        executorInfo.writeTo(_output__)
        allocated.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        statistics.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(containerId.serializedSize)
        containerId.writeTo(_output__)
        tasks.foreach { __v =>
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.ResourceUsage.Executor = {
        var __executorInfo = this.executorInfo
        val __allocated = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.allocated)
        var __statistics = this.statistics
        var __containerId = this.containerId
        val __tasks = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task] ++= this.tasks)
        var __requiredFields0: Long = 0x3L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __executorInfo = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __executorInfo)
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __allocated += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
            case 26 =>
              __statistics = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __statistics.getOrElse(org.apache.mesos.v1.mesos.ResourceStatistics.defaultInstance)))
            case 34 =>
              __containerId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __containerId)
              __requiredFields0 &= 0xfffffffffffffffdL
            case 42 =>
              __tasks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        org.apache.mesos.v1.mesos.ResourceUsage.Executor(
            executorInfo = __executorInfo,
            allocated = __allocated.result(),
            statistics = __statistics,
            containerId = __containerId,
            tasks = __tasks.result()
        )
      }
      def withExecutorInfo(__v: org.apache.mesos.v1.mesos.ExecutorInfo): Executor = copy(executorInfo = __v)
      def clearAllocated = copy(allocated = _root_.scala.collection.Seq.empty)
      def addAllocated(__vs: org.apache.mesos.v1.mesos.Resource*): Executor = addAllAllocated(__vs)
      def addAllAllocated(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Executor = copy(allocated = allocated ++ __vs)
      def withAllocated(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Executor = copy(allocated = __v)
      def getStatistics: org.apache.mesos.v1.mesos.ResourceStatistics = statistics.getOrElse(org.apache.mesos.v1.mesos.ResourceStatistics.defaultInstance)
      def clearStatistics: Executor = copy(statistics = None)
      def withStatistics(__v: org.apache.mesos.v1.mesos.ResourceStatistics): Executor = copy(statistics = Some(__v))
      def withContainerId(__v: org.apache.mesos.v1.mesos.ContainerID): Executor = copy(containerId = __v)
      def clearTasks = copy(tasks = _root_.scala.collection.Seq.empty)
      def addTasks(__vs: org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task*): Executor = addAllTasks(__vs)
      def addAllTasks(__vs: TraversableOnce[org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task]): Executor = copy(tasks = tasks ++ __vs)
      def withTasks(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task]): Executor = copy(tasks = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => executorInfo
          case 2 => allocated
          case 3 => statistics.orNull
          case 4 => containerId
          case 5 => tasks
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => executorInfo.toPMessage
          case 2 => _root_.scalapb.descriptors.PRepeated(allocated.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 3 => statistics.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => containerId.toPMessage
          case 5 => _root_.scalapb.descriptors.PRepeated(tasks.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.ResourceUsage.Executor
  }
  
  object Executor extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ResourceUsage.Executor] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ResourceUsage.Executor] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.ResourceUsage.Executor = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.ResourceUsage.Executor(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.ExecutorInfo],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ResourceStatistics]],
        __fieldsMap(__fields.get(3)).asInstanceOf[org.apache.mesos.v1.mesos.ContainerID],
        __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.ResourceUsage.Executor] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.ResourceUsage.Executor(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ExecutorInfo],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ResourceStatistics]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[org.apache.mesos.v1.mesos.ContainerID],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.ResourceUsage.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.ResourceUsage.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.ExecutorInfo
        case 2 => __out = org.apache.mesos.v1.mesos.Resource
        case 3 => __out = org.apache.mesos.v1.mesos.ResourceStatistics
        case 4 => __out = org.apache.mesos.v1.mesos.ContainerID
        case 5 => __out = org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.ResourceUsage.Executor(
      executorInfo = org.apache.mesos.v1.mesos.ExecutorInfo.defaultInstance,
      containerId = org.apache.mesos.v1.mesos.ContainerID.defaultInstance
    )
    @SerialVersionUID(0L)
    final case class Task(
        name: String,
        id: org.apache.mesos.v1.mesos.TaskID,
        resources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty,
        labels: scala.Option[org.apache.mesos.v1.mesos.Labels] = None
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Task] with com.trueaccord.lenses.Updatable[Task] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, name)
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(id.serializedSize) + id.serializedSize
          resources.foreach(resources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(resources.serializedSize) + resources.serializedSize)
          if (labels.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(labels.get.serializedSize) + labels.get.serializedSize }
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          _output__.writeString(1, name)
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(id.serializedSize)
          id.writeTo(_output__)
          resources.foreach { __v =>
            _output__.writeTag(3, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          labels.foreach { __v =>
            _output__.writeTag(4, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task = {
          var __name = this.name
          var __id = this.id
          val __resources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.resources)
          var __labels = this.labels
          var __requiredFields0: Long = 0x3L
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __name = _input__.readString()
                __requiredFields0 &= 0xfffffffffffffffeL
              case 18 =>
                __id = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __id)
                __requiredFields0 &= 0xfffffffffffffffdL
              case 26 =>
                __resources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
              case 34 =>
                __labels = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)))
              case tag => _input__.skipField(tag)
            }
          }
          if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
          org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task(
              name = __name,
              id = __id,
              resources = __resources.result(),
              labels = __labels
          )
        }
        def withName(__v: String): Task = copy(name = __v)
        def withId(__v: org.apache.mesos.v1.mesos.TaskID): Task = copy(id = __v)
        def clearResources = copy(resources = _root_.scala.collection.Seq.empty)
        def addResources(__vs: org.apache.mesos.v1.mesos.Resource*): Task = addAllResources(__vs)
        def addAllResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Task = copy(resources = resources ++ __vs)
        def withResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Task = copy(resources = __v)
        def getLabels: org.apache.mesos.v1.mesos.Labels = labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)
        def clearLabels: Task = copy(labels = None)
        def withLabels(__v: org.apache.mesos.v1.mesos.Labels): Task = copy(labels = Some(__v))
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => name
            case 2 => id
            case 3 => resources
            case 4 => labels.orNull
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(name)
            case 2 => id.toPMessage
            case 3 => _root_.scalapb.descriptors.PRepeated(resources.map(_.toPMessage)(_root_.scala.collection.breakOut))
            case 4 => labels.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task
    }
    
    object Task extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task(
          __fieldsMap(__fields.get(0)).asInstanceOf[String],
          __fieldsMap(__fields.get(1)).asInstanceOf[org.apache.mesos.v1.mesos.TaskID],
          __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]],
          __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Labels]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[org.apache.mesos.v1.mesos.TaskID],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Labels]])
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.ResourceUsage.Executor.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.ResourceUsage.Executor.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 2 => __out = org.apache.mesos.v1.mesos.TaskID
          case 3 => __out = org.apache.mesos.v1.mesos.Resource
          case 4 => __out = org.apache.mesos.v1.mesos.Labels
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task(
        name = "",
        id = org.apache.mesos.v1.mesos.TaskID.defaultInstance
      )
      implicit class TaskLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task](_l) {
        def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
        def id: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TaskID] = field(_.id)((c_, f_) => c_.copy(id = f_))
        def resources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.resources)((c_, f_) => c_.copy(resources = f_))
        def labels: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Labels] = field(_.getLabels)((c_, f_) => c_.copy(labels = Some(f_)))
        def optionalLabels: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Labels]] = field(_.labels)((c_, f_) => c_.copy(labels = f_))
      }
      final val NAME_FIELD_NUMBER = 1
      final val ID_FIELD_NUMBER = 2
      final val RESOURCES_FIELD_NUMBER = 3
      final val LABELS_FIELD_NUMBER = 4
    }
    
    implicit class ExecutorLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ResourceUsage.Executor]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.ResourceUsage.Executor](_l) {
      def executorInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ExecutorInfo] = field(_.executorInfo)((c_, f_) => c_.copy(executorInfo = f_))
      def allocated: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.allocated)((c_, f_) => c_.copy(allocated = f_))
      def statistics: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ResourceStatistics] = field(_.getStatistics)((c_, f_) => c_.copy(statistics = Some(f_)))
      def optionalStatistics: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ResourceStatistics]] = field(_.statistics)((c_, f_) => c_.copy(statistics = f_))
      def containerId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerID] = field(_.containerId)((c_, f_) => c_.copy(containerId = f_))
      def tasks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ResourceUsage.Executor.Task]] = field(_.tasks)((c_, f_) => c_.copy(tasks = f_))
    }
    final val EXECUTOR_INFO_FIELD_NUMBER = 1
    final val ALLOCATED_FIELD_NUMBER = 2
    final val STATISTICS_FIELD_NUMBER = 3
    final val CONTAINER_ID_FIELD_NUMBER = 4
    final val TASKS_FIELD_NUMBER = 5
  }
  
  implicit class ResourceUsageLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ResourceUsage]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.ResourceUsage](_l) {
    def executors: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ResourceUsage.Executor]] = field(_.executors)((c_, f_) => c_.copy(executors = f_))
    def total: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.total)((c_, f_) => c_.copy(total = f_))
  }
  final val EXECUTORS_FIELD_NUMBER = 1
  final val TOTAL_FIELD_NUMBER = 2
}
