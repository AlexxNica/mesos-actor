// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes a container configuration and allows extensible
  * configurations for different container implementations.
  *
  * NOTE: `ContainerInfo` may be specified, e.g., by a task, even if no
  * container image is provided. In this case neither `MesosInfo` nor
  * `DockerInfo` is set, the required `type` must be `MESOS`. This is to
  * address a case when a task without an image, e.g., a shell script
  * with URIs, wants to use features originally designed for containers,
  * for example custom network isolation via `NetworkInfo`.
  *
  * @param docker
  *   Only one of the following *Info messages should be set to match
  *   the type.
  * @param networkInfos
  *   A list of network requests. A framework can request multiple IP addresses
  *   for the container.
  * @param linuxInfo
  *   Linux specific information for the container.
  * @param rlimitInfo
  *   (POSIX only) rlimits of the container.
  * @param ttyInfo
  *   If specified a tty will be attached to the container entrypoint.
  */
@SerialVersionUID(0L)
final case class ContainerInfo(
    `type`: org.apache.mesos.v1.mesos.ContainerInfo.Type,
    volumes: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Volume] = _root_.scala.collection.Seq.empty,
    hostname: scala.Option[String] = None,
    docker: scala.Option[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo] = None,
    mesos: scala.Option[org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo] = None,
    networkInfos: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo] = _root_.scala.collection.Seq.empty,
    linuxInfo: scala.Option[org.apache.mesos.v1.mesos.LinuxInfo] = None,
    rlimitInfo: scala.Option[org.apache.mesos.v1.mesos.RLimitInfo] = None,
    ttyInfo: scala.Option[org.apache.mesos.v1.mesos.TTYInfo] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ContainerInfo] with com.trueaccord.lenses.Updatable[ContainerInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.value)
      volumes.foreach(volumes => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(volumes.serializedSize) + volumes.serializedSize)
      if (hostname.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, hostname.get) }
      if (docker.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(docker.get.serializedSize) + docker.get.serializedSize }
      if (mesos.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(mesos.get.serializedSize) + mesos.get.serializedSize }
      networkInfos.foreach(networkInfos => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(networkInfos.serializedSize) + networkInfos.serializedSize)
      if (linuxInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(linuxInfo.get.serializedSize) + linuxInfo.get.serializedSize }
      if (rlimitInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(rlimitInfo.get.serializedSize) + rlimitInfo.get.serializedSize }
      if (ttyInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ttyInfo.get.serializedSize) + ttyInfo.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeEnum(1, `type`.value)
      volumes.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      docker.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      hostname.foreach { __v =>
        _output__.writeString(4, __v)
      };
      mesos.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      networkInfos.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      linuxInfo.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      rlimitInfo.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      ttyInfo.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.ContainerInfo = {
      var __type = this.`type`
      val __volumes = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Volume] ++= this.volumes)
      var __hostname = this.hostname
      var __docker = this.docker
      var __mesos = this.mesos
      val __networkInfos = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.NetworkInfo] ++= this.networkInfos)
      var __linuxInfo = this.linuxInfo
      var __rlimitInfo = this.rlimitInfo
      var __ttyInfo = this.ttyInfo
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = org.apache.mesos.v1.mesos.ContainerInfo.Type.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __volumes += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Volume.defaultInstance)
          case 34 =>
            __hostname = Some(_input__.readString())
          case 26 =>
            __docker = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __docker.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.defaultInstance)))
          case 42 =>
            __mesos = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __mesos.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo.defaultInstance)))
          case 58 =>
            __networkInfos += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.NetworkInfo.defaultInstance)
          case 66 =>
            __linuxInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __linuxInfo.getOrElse(org.apache.mesos.v1.mesos.LinuxInfo.defaultInstance)))
          case 74 =>
            __rlimitInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __rlimitInfo.getOrElse(org.apache.mesos.v1.mesos.RLimitInfo.defaultInstance)))
          case 82 =>
            __ttyInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __ttyInfo.getOrElse(org.apache.mesos.v1.mesos.TTYInfo.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.ContainerInfo(
          `type` = __type,
          volumes = __volumes.result(),
          hostname = __hostname,
          docker = __docker,
          mesos = __mesos,
          networkInfos = __networkInfos.result(),
          linuxInfo = __linuxInfo,
          rlimitInfo = __rlimitInfo,
          ttyInfo = __ttyInfo
      )
    }
    def withType(__v: org.apache.mesos.v1.mesos.ContainerInfo.Type): ContainerInfo = copy(`type` = __v)
    def clearVolumes = copy(volumes = _root_.scala.collection.Seq.empty)
    def addVolumes(__vs: org.apache.mesos.v1.mesos.Volume*): ContainerInfo = addAllVolumes(__vs)
    def addAllVolumes(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Volume]): ContainerInfo = copy(volumes = volumes ++ __vs)
    def withVolumes(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Volume]): ContainerInfo = copy(volumes = __v)
    def getHostname: String = hostname.getOrElse("")
    def clearHostname: ContainerInfo = copy(hostname = None)
    def withHostname(__v: String): ContainerInfo = copy(hostname = Some(__v))
    def getDocker: org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo = docker.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.defaultInstance)
    def clearDocker: ContainerInfo = copy(docker = None)
    def withDocker(__v: org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo): ContainerInfo = copy(docker = Some(__v))
    def getMesos: org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo = mesos.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo.defaultInstance)
    def clearMesos: ContainerInfo = copy(mesos = None)
    def withMesos(__v: org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo): ContainerInfo = copy(mesos = Some(__v))
    def clearNetworkInfos = copy(networkInfos = _root_.scala.collection.Seq.empty)
    def addNetworkInfos(__vs: org.apache.mesos.v1.mesos.NetworkInfo*): ContainerInfo = addAllNetworkInfos(__vs)
    def addAllNetworkInfos(__vs: TraversableOnce[org.apache.mesos.v1.mesos.NetworkInfo]): ContainerInfo = copy(networkInfos = networkInfos ++ __vs)
    def withNetworkInfos(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo]): ContainerInfo = copy(networkInfos = __v)
    def getLinuxInfo: org.apache.mesos.v1.mesos.LinuxInfo = linuxInfo.getOrElse(org.apache.mesos.v1.mesos.LinuxInfo.defaultInstance)
    def clearLinuxInfo: ContainerInfo = copy(linuxInfo = None)
    def withLinuxInfo(__v: org.apache.mesos.v1.mesos.LinuxInfo): ContainerInfo = copy(linuxInfo = Some(__v))
    def getRlimitInfo: org.apache.mesos.v1.mesos.RLimitInfo = rlimitInfo.getOrElse(org.apache.mesos.v1.mesos.RLimitInfo.defaultInstance)
    def clearRlimitInfo: ContainerInfo = copy(rlimitInfo = None)
    def withRlimitInfo(__v: org.apache.mesos.v1.mesos.RLimitInfo): ContainerInfo = copy(rlimitInfo = Some(__v))
    def getTtyInfo: org.apache.mesos.v1.mesos.TTYInfo = ttyInfo.getOrElse(org.apache.mesos.v1.mesos.TTYInfo.defaultInstance)
    def clearTtyInfo: ContainerInfo = copy(ttyInfo = None)
    def withTtyInfo(__v: org.apache.mesos.v1.mesos.TTYInfo): ContainerInfo = copy(ttyInfo = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.javaValueDescriptor
        case 2 => volumes
        case 4 => hostname.orNull
        case 3 => docker.orNull
        case 5 => mesos.orNull
        case 7 => networkInfos
        case 8 => linuxInfo.orNull
        case 9 => rlimitInfo.orNull
        case 10 => ttyInfo.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PRepeated(volumes.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 4 => hostname.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => docker.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => mesos.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PRepeated(networkInfos.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 8 => linuxInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => rlimitInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => ttyInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.ContainerInfo
}

object ContainerInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ContainerInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ContainerInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.ContainerInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.ContainerInfo(
      org.apache.mesos.v1.mesos.ContainerInfo.Type.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Volume]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.LinuxInfo]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.RLimitInfo]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.TTYInfo]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.ContainerInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.ContainerInfo(
        org.apache.mesos.v1.mesos.ContainerInfo.Type.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Volume]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.LinuxInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.RLimitInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.TTYInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(60)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(60)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = org.apache.mesos.v1.mesos.Volume
      case 3 => __out = org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo
      case 5 => __out = org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo
      case 7 => __out = org.apache.mesos.v1.mesos.NetworkInfo
      case 8 => __out = org.apache.mesos.v1.mesos.LinuxInfo
      case 9 => __out = org.apache.mesos.v1.mesos.RLimitInfo
      case 10 => __out = org.apache.mesos.v1.mesos.TTYInfo
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => org.apache.mesos.v1.mesos.ContainerInfo.Type
    }
  }
  lazy val defaultInstance = org.apache.mesos.v1.mesos.ContainerInfo(
    `type` = org.apache.mesos.v1.mesos.ContainerInfo.Type.DOCKER
  )
  sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Type
    def isDocker: Boolean = false
    def isMesos: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = org.apache.mesos.v1.mesos.ContainerInfo.Type
  }
  
  object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object DOCKER extends Type {
      val value = 1
      val index = 0
      val name = "DOCKER"
      override def isDocker: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object MESOS extends Type {
      val value = 2
      val index = 1
      val name = "MESOS"
      override def isMesos: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(DOCKER, MESOS)
    def fromValue(value: Int): Type = value match {
      case 1 => DOCKER
      case 2 => MESOS
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.ContainerInfo.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.ContainerInfo.scalaDescriptor.enums(0)
  }
  /** @param image
    *   The docker image that is going to be passed to the registry.
    * @param parameters
    *   Allowing arbitrary parameters to be passed to docker CLI.
    *   Note that anything passed to this field is not guaranteed
    *   to be supported moving forward, as we might move away from
    *   the docker CLI.
    * @param forcePullImage
    *   With this flag set to true, the docker containerizer will
    *   pull the docker image from the registry even if the image
    *   is already downloaded on the agent.
    * @param volumeDriver
    *   The name of volume driver plugin.
    *   Since 1.0
    */
  @SerialVersionUID(0L)
  final case class DockerInfo(
      image: String,
      network: scala.Option[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.Network] = None,
      portMappings: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping] = _root_.scala.collection.Seq.empty,
      privileged: scala.Option[Boolean] = None,
      parameters: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Parameter] = _root_.scala.collection.Seq.empty,
      forcePullImage: scala.Option[Boolean] = None,
      volumeDriver: scala.Option[String] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DockerInfo] with com.trueaccord.lenses.Updatable[DockerInfo] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, image)
        if (network.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, network.get.value) }
        portMappings.foreach(portMappings => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(portMappings.serializedSize) + portMappings.serializedSize)
        if (privileged.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, privileged.get) }
        parameters.foreach(parameters => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(parameters.serializedSize) + parameters.serializedSize)
        if (forcePullImage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, forcePullImage.get) }
        if (volumeDriver.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, volumeDriver.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeString(1, image)
        network.foreach { __v =>
          _output__.writeEnum(2, __v.value)
        };
        portMappings.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        privileged.foreach { __v =>
          _output__.writeBool(4, __v)
        };
        parameters.foreach { __v =>
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        forcePullImage.foreach { __v =>
          _output__.writeBool(6, __v)
        };
        volumeDriver.foreach { __v =>
          _output__.writeString(7, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo = {
        var __image = this.image
        var __network = this.network
        val __portMappings = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping] ++= this.portMappings)
        var __privileged = this.privileged
        val __parameters = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Parameter] ++= this.parameters)
        var __forcePullImage = this.forcePullImage
        var __volumeDriver = this.volumeDriver
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __image = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 16 =>
              __network = Some(org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.Network.fromValue(_input__.readEnum()))
            case 26 =>
              __portMappings += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping.defaultInstance)
            case 32 =>
              __privileged = Some(_input__.readBool())
            case 42 =>
              __parameters += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Parameter.defaultInstance)
            case 48 =>
              __forcePullImage = Some(_input__.readBool())
            case 58 =>
              __volumeDriver = Some(_input__.readString())
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo(
            image = __image,
            network = __network,
            portMappings = __portMappings.result(),
            privileged = __privileged,
            parameters = __parameters.result(),
            forcePullImage = __forcePullImage,
            volumeDriver = __volumeDriver
        )
      }
      def withImage(__v: String): DockerInfo = copy(image = __v)
      def getNetwork: org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.Network = network.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.Network.HOST)
      def clearNetwork: DockerInfo = copy(network = None)
      def withNetwork(__v: org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.Network): DockerInfo = copy(network = Some(__v))
      def clearPortMappings = copy(portMappings = _root_.scala.collection.Seq.empty)
      def addPortMappings(__vs: org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping*): DockerInfo = addAllPortMappings(__vs)
      def addAllPortMappings(__vs: TraversableOnce[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping]): DockerInfo = copy(portMappings = portMappings ++ __vs)
      def withPortMappings(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping]): DockerInfo = copy(portMappings = __v)
      def getPrivileged: Boolean = privileged.getOrElse(false)
      def clearPrivileged: DockerInfo = copy(privileged = None)
      def withPrivileged(__v: Boolean): DockerInfo = copy(privileged = Some(__v))
      def clearParameters = copy(parameters = _root_.scala.collection.Seq.empty)
      def addParameters(__vs: org.apache.mesos.v1.mesos.Parameter*): DockerInfo = addAllParameters(__vs)
      def addAllParameters(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Parameter]): DockerInfo = copy(parameters = parameters ++ __vs)
      def withParameters(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Parameter]): DockerInfo = copy(parameters = __v)
      def getForcePullImage: Boolean = forcePullImage.getOrElse(false)
      def clearForcePullImage: DockerInfo = copy(forcePullImage = None)
      def withForcePullImage(__v: Boolean): DockerInfo = copy(forcePullImage = Some(__v))
      def getVolumeDriver: String = volumeDriver.getOrElse("")
      def clearVolumeDriver: DockerInfo = copy(volumeDriver = None)
      def withVolumeDriver(__v: String): DockerInfo = copy(volumeDriver = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => image
          case 2 => network.map(_.javaValueDescriptor).orNull
          case 3 => portMappings
          case 4 => privileged.orNull
          case 5 => parameters
          case 6 => forcePullImage.orNull
          case 7 => volumeDriver.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(image)
          case 2 => network.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => _root_.scalapb.descriptors.PRepeated(portMappings.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 4 => privileged.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => _root_.scalapb.descriptors.PRepeated(parameters.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 6 => forcePullImage.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 7 => volumeDriver.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo
  }
  
  object DockerInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo(
        __fieldsMap(__fields.get(0)).asInstanceOf[String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.Network.fromValue(__e.getNumber)),
        __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Boolean]],
        __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Parameter]],
        __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Boolean]],
        __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.Network.fromValue(__e.number)),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Boolean]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Parameter]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Boolean]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.ContainerInfo.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.ContainerInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => __out = org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping
        case 5 => __out = org.apache.mesos.v1.mesos.Parameter
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.Network
      }
    }
    lazy val defaultInstance = org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo(
      image = ""
    )
    sealed trait Network extends _root_.com.trueaccord.scalapb.GeneratedEnum {
      type EnumType = Network
      def isHost: Boolean = false
      def isBridge: Boolean = false
      def isNone: Boolean = false
      def isUser: Boolean = false
      def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Network] = org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.Network
    }
    
    object Network extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Network] {
      implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Network] = this
      @SerialVersionUID(0L)
      case object HOST extends Network {
        val value = 1
        val index = 0
        val name = "HOST"
        override def isHost: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object BRIDGE extends Network {
        val value = 2
        val index = 1
        val name = "BRIDGE"
        override def isBridge: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object NONE extends Network {
        val value = 3
        val index = 2
        val name = "NONE"
        override def isNone: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object USER extends Network {
        val value = 4
        val index = 3
        val name = "USER"
        override def isUser: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case class Unrecognized(value: Int) extends Network with _root_.com.trueaccord.scalapb.UnrecognizedEnum
      
      lazy val values = scala.collection.Seq(HOST, BRIDGE, NONE, USER)
      def fromValue(value: Int): Network = value match {
        case 1 => HOST
        case 2 => BRIDGE
        case 3 => NONE
        case 4 => USER
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.javaDescriptor.getEnumTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.scalaDescriptor.enums(0)
    }
    /** @param protocol
      *   Protocol to expose as (ie: tcp, udp).
      */
    @SerialVersionUID(0L)
    final case class PortMapping(
        hostPort: Int,
        containerPort: Int,
        protocol: scala.Option[String] = None
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[PortMapping] with com.trueaccord.lenses.Updatable[PortMapping] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, hostPort)
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, containerPort)
          if (protocol.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, protocol.get) }
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          _output__.writeUInt32(1, hostPort)
          _output__.writeUInt32(2, containerPort)
          protocol.foreach { __v =>
            _output__.writeString(3, __v)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping = {
          var __hostPort = this.hostPort
          var __containerPort = this.containerPort
          var __protocol = this.protocol
          var __requiredFields0: Long = 0x3L
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 8 =>
                __hostPort = _input__.readUInt32()
                __requiredFields0 &= 0xfffffffffffffffeL
              case 16 =>
                __containerPort = _input__.readUInt32()
                __requiredFields0 &= 0xfffffffffffffffdL
              case 26 =>
                __protocol = Some(_input__.readString())
              case tag => _input__.skipField(tag)
            }
          }
          if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
          org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping(
              hostPort = __hostPort,
              containerPort = __containerPort,
              protocol = __protocol
          )
        }
        def withHostPort(__v: Int): PortMapping = copy(hostPort = __v)
        def withContainerPort(__v: Int): PortMapping = copy(containerPort = __v)
        def getProtocol: String = protocol.getOrElse("")
        def clearProtocol: PortMapping = copy(protocol = None)
        def withProtocol(__v: String): PortMapping = copy(protocol = Some(__v))
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => hostPort
            case 2 => containerPort
            case 3 => protocol.orNull
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PInt(hostPort)
            case 2 => _root_.scalapb.descriptors.PInt(containerPort)
            case 3 => protocol.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping
    }
    
    object PortMapping extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping(
          __fieldsMap(__fields.get(0)).asInstanceOf[Int],
          __fieldsMap(__fields.get(1)).asInstanceOf[Int],
          __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Int],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]])
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping(
        hostPort = 0,
        containerPort = 0
      )
      implicit class PortMappingLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping](_l) {
        def hostPort: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.hostPort)((c_, f_) => c_.copy(hostPort = f_))
        def containerPort: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.containerPort)((c_, f_) => c_.copy(containerPort = f_))
        def protocol: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getProtocol)((c_, f_) => c_.copy(protocol = Some(f_)))
        def optionalProtocol: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.protocol)((c_, f_) => c_.copy(protocol = f_))
      }
      final val HOST_PORT_FIELD_NUMBER = 1
      final val CONTAINER_PORT_FIELD_NUMBER = 2
      final val PROTOCOL_FIELD_NUMBER = 3
    }
    
    implicit class DockerInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo](_l) {
      def image: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.image)((c_, f_) => c_.copy(image = f_))
      def network: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.Network] = field(_.getNetwork)((c_, f_) => c_.copy(network = Some(f_)))
      def optionalNetwork: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.Network]] = field(_.network)((c_, f_) => c_.copy(network = f_))
      def portMappings: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo.PortMapping]] = field(_.portMappings)((c_, f_) => c_.copy(portMappings = f_))
      def privileged: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getPrivileged)((c_, f_) => c_.copy(privileged = Some(f_)))
      def optionalPrivileged: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.privileged)((c_, f_) => c_.copy(privileged = f_))
      def parameters: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Parameter]] = field(_.parameters)((c_, f_) => c_.copy(parameters = f_))
      def forcePullImage: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getForcePullImage)((c_, f_) => c_.copy(forcePullImage = Some(f_)))
      def optionalForcePullImage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.forcePullImage)((c_, f_) => c_.copy(forcePullImage = f_))
      def volumeDriver: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getVolumeDriver)((c_, f_) => c_.copy(volumeDriver = Some(f_)))
      def optionalVolumeDriver: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.volumeDriver)((c_, f_) => c_.copy(volumeDriver = f_))
    }
    final val IMAGE_FIELD_NUMBER = 1
    final val NETWORK_FIELD_NUMBER = 2
    final val PORT_MAPPINGS_FIELD_NUMBER = 3
    final val PRIVILEGED_FIELD_NUMBER = 4
    final val PARAMETERS_FIELD_NUMBER = 5
    final val FORCE_PULL_IMAGE_FIELD_NUMBER = 6
    final val VOLUME_DRIVER_FIELD_NUMBER = 7
  }
  
  @SerialVersionUID(0L)
  final case class MesosInfo(
      image: scala.Option[org.apache.mesos.v1.mesos.Image] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[MesosInfo] with com.trueaccord.lenses.Updatable[MesosInfo] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (image.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(image.get.serializedSize) + image.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        image.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo = {
        var __image = this.image
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __image = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __image.getOrElse(org.apache.mesos.v1.mesos.Image.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo(
            image = __image
        )
      }
      def getImage: org.apache.mesos.v1.mesos.Image = image.getOrElse(org.apache.mesos.v1.mesos.Image.defaultInstance)
      def clearImage: MesosInfo = copy(image = None)
      def withImage(__v: org.apache.mesos.v1.mesos.Image): MesosInfo = copy(image = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => image.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => image.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo
  }
  
  object MesosInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Image]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Image]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.ContainerInfo.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.ContainerInfo.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.Image
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo(
    )
    implicit class MesosInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo](_l) {
      def image: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Image] = field(_.getImage)((c_, f_) => c_.copy(image = Some(f_)))
      def optionalImage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Image]] = field(_.image)((c_, f_) => c_.copy(image = f_))
    }
    final val IMAGE_FIELD_NUMBER = 1
  }
  
  implicit class ContainerInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo](_l) {
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def volumes: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Volume]] = field(_.volumes)((c_, f_) => c_.copy(volumes = f_))
    def hostname: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getHostname)((c_, f_) => c_.copy(hostname = Some(f_)))
    def optionalHostname: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.hostname)((c_, f_) => c_.copy(hostname = f_))
    def docker: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo] = field(_.getDocker)((c_, f_) => c_.copy(docker = Some(f_)))
    def optionalDocker: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ContainerInfo.DockerInfo]] = field(_.docker)((c_, f_) => c_.copy(docker = f_))
    def mesos: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo] = field(_.getMesos)((c_, f_) => c_.copy(mesos = Some(f_)))
    def optionalMesos: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ContainerInfo.MesosInfo]] = field(_.mesos)((c_, f_) => c_.copy(mesos = f_))
    def networkInfos: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo]] = field(_.networkInfos)((c_, f_) => c_.copy(networkInfos = f_))
    def linuxInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.LinuxInfo] = field(_.getLinuxInfo)((c_, f_) => c_.copy(linuxInfo = Some(f_)))
    def optionalLinuxInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.LinuxInfo]] = field(_.linuxInfo)((c_, f_) => c_.copy(linuxInfo = f_))
    def rlimitInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.RLimitInfo] = field(_.getRlimitInfo)((c_, f_) => c_.copy(rlimitInfo = Some(f_)))
    def optionalRlimitInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.RLimitInfo]] = field(_.rlimitInfo)((c_, f_) => c_.copy(rlimitInfo = f_))
    def ttyInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TTYInfo] = field(_.getTtyInfo)((c_, f_) => c_.copy(ttyInfo = Some(f_)))
    def optionalTtyInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.TTYInfo]] = field(_.ttyInfo)((c_, f_) => c_.copy(ttyInfo = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val VOLUMES_FIELD_NUMBER = 2
  final val HOSTNAME_FIELD_NUMBER = 4
  final val DOCKER_FIELD_NUMBER = 3
  final val MESOS_FIELD_NUMBER = 5
  final val NETWORK_INFOS_FIELD_NUMBER = 7
  final val LINUX_INFO_FIELD_NUMBER = 8
  final val RLIMIT_INFO_FIELD_NUMBER = 9
  final val TTY_INFO_FIELD_NUMBER = 10
}
