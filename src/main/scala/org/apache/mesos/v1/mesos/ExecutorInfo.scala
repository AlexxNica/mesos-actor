// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes information about an executor.
  *
  * @param type
  *   For backwards compatibility, if this field is not set when using `LAUNCH`
  *   offer operation, Mesos will infer the type by checking if `command` is
  *   set (`CUSTOM`) or unset (`DEFAULT`). `type` must be set when using
  *   `LAUNCH_GROUP` offer operation.
  *  
  *   TODO(vinod): Add support for explicitly setting `type` to `DEFAULT `
  *   in `LAUNCH` offer operation.
  * @param frameworkId
  *   TODO(benh): Make this required.
  * @param container
  *   Executor provided with a container will launch the container
  *   with the executor's CommandInfo and we expect the container to
  *   act as a Mesos executor.
  * @param source
  *   'source' is an identifier style string used by frameworks to
  *   track the source of an executor. This is useful when it's
  *   possible for different executor ids to be related semantically.
  *  
  *   NOTE: 'source' is exposed alongside the resource usage of the
  *   executor via JSON on the agent. This allows users to import usage
  *   information into a time series database for monitoring.
  *  
  *   This field is deprecated since 1.0. Please use labels for
  *   free-form metadata instead.
  *   Since 1.0.
  * @param data
  *   This field can be used to pass arbitrary bytes to an executor.
  * @param discovery
  *   Service discovery information for the executor. It is not
  *   interpreted or acted upon by Mesos. It is up to a service
  *   discovery system to use this information as needed and to handle
  *   executors without service discovery information.
  * @param shutdownGracePeriod
  *   When shutting down an executor the agent will wait in a
  *   best-effort manner for the grace period specified here
  *   before forcibly destroying the container. The executor
  *   must not assume that it will always be allotted the full
  *   grace period, as the agent may decide to allot a shorter
  *   period and failures / forcible terminations may occur.
  * @param labels
  *   Labels are free-form key value pairs which are exposed through
  *   master and agent endpoints. Labels will not be interpreted or
  *   acted upon by Mesos itself. As opposed to the data field, labels
  *   will be kept in memory on master and agent processes. Therefore,
  *   labels should be used to tag executors with lightweight metadata.
  *   Labels should not contain duplicate key-value pairs.
  */
@SerialVersionUID(0L)
final case class ExecutorInfo(
    `type`: scala.Option[org.apache.mesos.v1.mesos.ExecutorInfo.Type] = None,
    executorId: org.apache.mesos.v1.mesos.ExecutorID,
    frameworkId: scala.Option[org.apache.mesos.v1.mesos.FrameworkID] = None,
    command: scala.Option[org.apache.mesos.v1.mesos.CommandInfo] = None,
    container: scala.Option[org.apache.mesos.v1.mesos.ContainerInfo] = None,
    resources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty,
    name: scala.Option[String] = None,
    source: scala.Option[String] = None,
    data: scala.Option[_root_.com.google.protobuf.ByteString] = None,
    discovery: scala.Option[org.apache.mesos.v1.mesos.DiscoveryInfo] = None,
    shutdownGracePeriod: scala.Option[org.apache.mesos.v1.mesos.DurationInfo] = None,
    labels: scala.Option[org.apache.mesos.v1.mesos.Labels] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ExecutorInfo] with com.trueaccord.lenses.Updatable[ExecutorInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(15, `type`.get.value) }
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(executorId.serializedSize) + executorId.serializedSize
      if (frameworkId.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(frameworkId.get.serializedSize) + frameworkId.get.serializedSize }
      if (command.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.get.serializedSize) + command.get.serializedSize }
      if (container.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(container.get.serializedSize) + container.get.serializedSize }
      resources.foreach(resources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(resources.serializedSize) + resources.serializedSize)
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, name.get) }
      if (source.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, source.get) }
      if (data.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, data.get) }
      if (discovery.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(discovery.get.serializedSize) + discovery.get.serializedSize }
      if (shutdownGracePeriod.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(shutdownGracePeriod.get.serializedSize) + shutdownGracePeriod.get.serializedSize }
      if (labels.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(labels.get.serializedSize) + labels.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeTag(1, 2)
      _output__.writeUInt32NoTag(executorId.serializedSize)
      executorId.writeTo(_output__)
      data.foreach { __v =>
        _output__.writeBytes(4, __v)
      };
      resources.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      command.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      frameworkId.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      name.foreach { __v =>
        _output__.writeString(9, __v)
      };
      source.foreach { __v =>
        _output__.writeString(10, __v)
      };
      container.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      discovery.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      shutdownGracePeriod.foreach { __v =>
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      labels.foreach { __v =>
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      `type`.foreach { __v =>
        _output__.writeEnum(15, __v.value)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.ExecutorInfo = {
      var __type = this.`type`
      var __executorId = this.executorId
      var __frameworkId = this.frameworkId
      var __command = this.command
      var __container = this.container
      val __resources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.resources)
      var __name = this.name
      var __source = this.source
      var __data = this.data
      var __discovery = this.discovery
      var __shutdownGracePeriod = this.shutdownGracePeriod
      var __labels = this.labels
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 120 =>
            __type = Some(org.apache.mesos.v1.mesos.ExecutorInfo.Type.fromValue(_input__.readEnum()))
          case 10 =>
            __executorId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __executorId)
            __requiredFields0 &= 0xfffffffffffffffeL
          case 66 =>
            __frameworkId = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __frameworkId.getOrElse(org.apache.mesos.v1.mesos.FrameworkID.defaultInstance)))
          case 58 =>
            __command = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __command.getOrElse(org.apache.mesos.v1.mesos.CommandInfo.defaultInstance)))
          case 90 =>
            __container = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __container.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.defaultInstance)))
          case 42 =>
            __resources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
          case 74 =>
            __name = Some(_input__.readString())
          case 82 =>
            __source = Some(_input__.readString())
          case 34 =>
            __data = Some(_input__.readBytes())
          case 98 =>
            __discovery = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __discovery.getOrElse(org.apache.mesos.v1.mesos.DiscoveryInfo.defaultInstance)))
          case 106 =>
            __shutdownGracePeriod = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __shutdownGracePeriod.getOrElse(org.apache.mesos.v1.mesos.DurationInfo.defaultInstance)))
          case 114 =>
            __labels = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.ExecutorInfo(
          `type` = __type,
          executorId = __executorId,
          frameworkId = __frameworkId,
          command = __command,
          container = __container,
          resources = __resources.result(),
          name = __name,
          source = __source,
          data = __data,
          discovery = __discovery,
          shutdownGracePeriod = __shutdownGracePeriod,
          labels = __labels
      )
    }
    def getType: org.apache.mesos.v1.mesos.ExecutorInfo.Type = `type`.getOrElse(org.apache.mesos.v1.mesos.ExecutorInfo.Type.UNKNOWN)
    def clearType: ExecutorInfo = copy(`type` = None)
    def withType(__v: org.apache.mesos.v1.mesos.ExecutorInfo.Type): ExecutorInfo = copy(`type` = Some(__v))
    def withExecutorId(__v: org.apache.mesos.v1.mesos.ExecutorID): ExecutorInfo = copy(executorId = __v)
    def getFrameworkId: org.apache.mesos.v1.mesos.FrameworkID = frameworkId.getOrElse(org.apache.mesos.v1.mesos.FrameworkID.defaultInstance)
    def clearFrameworkId: ExecutorInfo = copy(frameworkId = None)
    def withFrameworkId(__v: org.apache.mesos.v1.mesos.FrameworkID): ExecutorInfo = copy(frameworkId = Some(__v))
    def getCommand: org.apache.mesos.v1.mesos.CommandInfo = command.getOrElse(org.apache.mesos.v1.mesos.CommandInfo.defaultInstance)
    def clearCommand: ExecutorInfo = copy(command = None)
    def withCommand(__v: org.apache.mesos.v1.mesos.CommandInfo): ExecutorInfo = copy(command = Some(__v))
    def getContainer: org.apache.mesos.v1.mesos.ContainerInfo = container.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.defaultInstance)
    def clearContainer: ExecutorInfo = copy(container = None)
    def withContainer(__v: org.apache.mesos.v1.mesos.ContainerInfo): ExecutorInfo = copy(container = Some(__v))
    def clearResources = copy(resources = _root_.scala.collection.Seq.empty)
    def addResources(__vs: org.apache.mesos.v1.mesos.Resource*): ExecutorInfo = addAllResources(__vs)
    def addAllResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): ExecutorInfo = copy(resources = resources ++ __vs)
    def withResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): ExecutorInfo = copy(resources = __v)
    def getName: String = name.getOrElse("")
    def clearName: ExecutorInfo = copy(name = None)
    def withName(__v: String): ExecutorInfo = copy(name = Some(__v))
    def getSource: String = source.getOrElse("")
    def clearSource: ExecutorInfo = copy(source = None)
    def withSource(__v: String): ExecutorInfo = copy(source = Some(__v))
    def getData: _root_.com.google.protobuf.ByteString = data.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def clearData: ExecutorInfo = copy(data = None)
    def withData(__v: _root_.com.google.protobuf.ByteString): ExecutorInfo = copy(data = Some(__v))
    def getDiscovery: org.apache.mesos.v1.mesos.DiscoveryInfo = discovery.getOrElse(org.apache.mesos.v1.mesos.DiscoveryInfo.defaultInstance)
    def clearDiscovery: ExecutorInfo = copy(discovery = None)
    def withDiscovery(__v: org.apache.mesos.v1.mesos.DiscoveryInfo): ExecutorInfo = copy(discovery = Some(__v))
    def getShutdownGracePeriod: org.apache.mesos.v1.mesos.DurationInfo = shutdownGracePeriod.getOrElse(org.apache.mesos.v1.mesos.DurationInfo.defaultInstance)
    def clearShutdownGracePeriod: ExecutorInfo = copy(shutdownGracePeriod = None)
    def withShutdownGracePeriod(__v: org.apache.mesos.v1.mesos.DurationInfo): ExecutorInfo = copy(shutdownGracePeriod = Some(__v))
    def getLabels: org.apache.mesos.v1.mesos.Labels = labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)
    def clearLabels: ExecutorInfo = copy(labels = None)
    def withLabels(__v: org.apache.mesos.v1.mesos.Labels): ExecutorInfo = copy(labels = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 15 => `type`.map(_.javaValueDescriptor).orNull
        case 1 => executorId
        case 8 => frameworkId.orNull
        case 7 => command.orNull
        case 11 => container.orNull
        case 5 => resources
        case 9 => name.orNull
        case 10 => source.orNull
        case 4 => data.orNull
        case 12 => discovery.orNull
        case 13 => shutdownGracePeriod.orNull
        case 14 => labels.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 15 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 1 => executorId.toPMessage
        case 8 => frameworkId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => command.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => container.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PRepeated(resources.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 9 => name.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => source.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => data.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => discovery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => shutdownGracePeriod.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => labels.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.ExecutorInfo
}

object ExecutorInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ExecutorInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ExecutorInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.ExecutorInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.ExecutorInfo(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.ExecutorInfo.Type.fromValue(__e.getNumber)),
      __fieldsMap(__fields.get(1)).asInstanceOf[org.apache.mesos.v1.mesos.ExecutorID],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.FrameworkID]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CommandInfo]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ContainerInfo]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.com.google.protobuf.ByteString]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.DiscoveryInfo]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.DurationInfo]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Labels]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.ExecutorInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.ExecutorInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.ExecutorInfo.Type.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ExecutorID],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.FrameworkID]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CommandInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ContainerInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.com.google.protobuf.ByteString]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.DiscoveryInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.DurationInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Labels]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(19)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(19)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = org.apache.mesos.v1.mesos.ExecutorID
      case 8 => __out = org.apache.mesos.v1.mesos.FrameworkID
      case 7 => __out = org.apache.mesos.v1.mesos.CommandInfo
      case 11 => __out = org.apache.mesos.v1.mesos.ContainerInfo
      case 5 => __out = org.apache.mesos.v1.mesos.Resource
      case 12 => __out = org.apache.mesos.v1.mesos.DiscoveryInfo
      case 13 => __out = org.apache.mesos.v1.mesos.DurationInfo
      case 14 => __out = org.apache.mesos.v1.mesos.Labels
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 15 => org.apache.mesos.v1.mesos.ExecutorInfo.Type
    }
  }
  lazy val defaultInstance = org.apache.mesos.v1.mesos.ExecutorInfo(
    executorId = org.apache.mesos.v1.mesos.ExecutorID.defaultInstance
  )
  sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Type
    def isUnknown: Boolean = false
    def isDefault: Boolean = false
    def isCustom: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = org.apache.mesos.v1.mesos.ExecutorInfo.Type
  }
  
  object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object UNKNOWN extends Type {
      val value = 0
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object DEFAULT extends Type {
      val value = 1
      val index = 1
      val name = "DEFAULT"
      override def isDefault: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object CUSTOM extends Type {
      val value = 2
      val index = 2
      val name = "CUSTOM"
      override def isCustom: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(UNKNOWN, DEFAULT, CUSTOM)
    def fromValue(value: Int): Type = value match {
      case 0 => UNKNOWN
      case 1 => DEFAULT
      case 2 => CUSTOM
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.ExecutorInfo.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.ExecutorInfo.scalaDescriptor.enums(0)
  }
  implicit class ExecutorInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ExecutorInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.ExecutorInfo](_l) {
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ExecutorInfo.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
    def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ExecutorInfo.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def executorId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ExecutorID] = field(_.executorId)((c_, f_) => c_.copy(executorId = f_))
    def frameworkId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.FrameworkID] = field(_.getFrameworkId)((c_, f_) => c_.copy(frameworkId = Some(f_)))
    def optionalFrameworkId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.FrameworkID]] = field(_.frameworkId)((c_, f_) => c_.copy(frameworkId = f_))
    def command: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CommandInfo] = field(_.getCommand)((c_, f_) => c_.copy(command = Some(f_)))
    def optionalCommand: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CommandInfo]] = field(_.command)((c_, f_) => c_.copy(command = f_))
    def container: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo] = field(_.getContainer)((c_, f_) => c_.copy(container = Some(f_)))
    def optionalContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ContainerInfo]] = field(_.container)((c_, f_) => c_.copy(container = f_))
    def resources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.resources)((c_, f_) => c_.copy(resources = f_))
    def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getName)((c_, f_) => c_.copy(name = Some(f_)))
    def optionalName: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def source: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getSource)((c_, f_) => c_.copy(source = Some(f_)))
    def optionalSource: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.source)((c_, f_) => c_.copy(source = f_))
    def data: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getData)((c_, f_) => c_.copy(data = Some(f_)))
    def optionalData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[_root_.com.google.protobuf.ByteString]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def discovery: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.DiscoveryInfo] = field(_.getDiscovery)((c_, f_) => c_.copy(discovery = Some(f_)))
    def optionalDiscovery: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.DiscoveryInfo]] = field(_.discovery)((c_, f_) => c_.copy(discovery = f_))
    def shutdownGracePeriod: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.DurationInfo] = field(_.getShutdownGracePeriod)((c_, f_) => c_.copy(shutdownGracePeriod = Some(f_)))
    def optionalShutdownGracePeriod: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.DurationInfo]] = field(_.shutdownGracePeriod)((c_, f_) => c_.copy(shutdownGracePeriod = f_))
    def labels: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Labels] = field(_.getLabels)((c_, f_) => c_.copy(labels = Some(f_)))
    def optionalLabels: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Labels]] = field(_.labels)((c_, f_) => c_.copy(labels = f_))
  }
  final val TYPE_FIELD_NUMBER = 15
  final val EXECUTOR_ID_FIELD_NUMBER = 1
  final val FRAMEWORK_ID_FIELD_NUMBER = 8
  final val COMMAND_FIELD_NUMBER = 7
  final val CONTAINER_FIELD_NUMBER = 11
  final val RESOURCES_FIELD_NUMBER = 5
  final val NAME_FIELD_NUMBER = 9
  final val SOURCE_FIELD_NUMBER = 10
  final val DATA_FIELD_NUMBER = 4
  final val DISCOVERY_FIELD_NUMBER = 12
  final val SHUTDOWN_GRACE_PERIOD_FIELD_NUMBER = 13
  final val LABELS_FIELD_NUMBER = 14
}
