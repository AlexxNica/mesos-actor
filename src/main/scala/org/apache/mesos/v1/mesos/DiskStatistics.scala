// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

@SerialVersionUID(0L)
final case class DiskStatistics(
    source: scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source] = None,
    persistence: scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence] = None,
    limitBytes: scala.Option[Long] = None,
    usedBytes: scala.Option[Long] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DiskStatistics] with com.trueaccord.lenses.Updatable[DiskStatistics] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (source.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(source.get.serializedSize) + source.get.serializedSize }
      if (persistence.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(persistence.get.serializedSize) + persistence.get.serializedSize }
      if (limitBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, limitBytes.get) }
      if (usedBytes.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, usedBytes.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      source.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      persistence.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      limitBytes.foreach { __v =>
        _output__.writeUInt64(3, __v)
      };
      usedBytes.foreach { __v =>
        _output__.writeUInt64(4, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.DiskStatistics = {
      var __source = this.source
      var __persistence = this.persistence
      var __limitBytes = this.limitBytes
      var __usedBytes = this.usedBytes
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __source = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __source.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.defaultInstance)))
          case 18 =>
            __persistence = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __persistence.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence.defaultInstance)))
          case 24 =>
            __limitBytes = Some(_input__.readUInt64())
          case 32 =>
            __usedBytes = Some(_input__.readUInt64())
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.DiskStatistics(
          source = __source,
          persistence = __persistence,
          limitBytes = __limitBytes,
          usedBytes = __usedBytes
      )
    }
    def getSource: org.apache.mesos.v1.mesos.Resource.DiskInfo.Source = source.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.Source.defaultInstance)
    def clearSource: DiskStatistics = copy(source = None)
    def withSource(__v: org.apache.mesos.v1.mesos.Resource.DiskInfo.Source): DiskStatistics = copy(source = Some(__v))
    def getPersistence: org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence = persistence.getOrElse(org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence.defaultInstance)
    def clearPersistence: DiskStatistics = copy(persistence = None)
    def withPersistence(__v: org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence): DiskStatistics = copy(persistence = Some(__v))
    def getLimitBytes: Long = limitBytes.getOrElse(0L)
    def clearLimitBytes: DiskStatistics = copy(limitBytes = None)
    def withLimitBytes(__v: Long): DiskStatistics = copy(limitBytes = Some(__v))
    def getUsedBytes: Long = usedBytes.getOrElse(0L)
    def clearUsedBytes: DiskStatistics = copy(usedBytes = None)
    def withUsedBytes(__v: Long): DiskStatistics = copy(usedBytes = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => source.orNull
        case 2 => persistence.orNull
        case 3 => limitBytes.orNull
        case 4 => usedBytes.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => source.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => persistence.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => limitBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => usedBytes.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.DiskStatistics
}

object DiskStatistics extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.DiskStatistics] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.DiskStatistics] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.DiskStatistics = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.DiskStatistics(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.DiskStatistics] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.DiskStatistics(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(32)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(32)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = org.apache.mesos.v1.mesos.Resource.DiskInfo.Source
      case 2 => __out = org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.DiskStatistics(
  )
  implicit class DiskStatisticsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.DiskStatistics]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.DiskStatistics](_l) {
    def source: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Source] = field(_.getSource)((c_, f_) => c_.copy(source = Some(f_)))
    def optionalSource: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Source]] = field(_.source)((c_, f_) => c_.copy(source = f_))
    def persistence: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence] = field(_.getPersistence)((c_, f_) => c_.copy(persistence = Some(f_)))
    def optionalPersistence: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Resource.DiskInfo.Persistence]] = field(_.persistence)((c_, f_) => c_.copy(persistence = f_))
    def limitBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getLimitBytes)((c_, f_) => c_.copy(limitBytes = Some(f_)))
    def optionalLimitBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.limitBytes)((c_, f_) => c_.copy(limitBytes = f_))
    def usedBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getUsedBytes)((c_, f_) => c_.copy(usedBytes = Some(f_)))
    def optionalUsedBytes: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.usedBytes)((c_, f_) => c_.copy(usedBytes = f_))
  }
  final val SOURCE_FIELD_NUMBER = 1
  final val PERSISTENCE_FIELD_NUMBER = 2
  final val LIMIT_BYTES_FIELD_NUMBER = 3
  final val USED_BYTES_FIELD_NUMBER = 4
}
