// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes a collection of environment variables. This is used with
  * CommandInfo in order to set environment variables before running a
  * command. The contents of each variable may be specified as a string
  * or a Secret; only one of `value` and `secret` must be set.
  */
@SerialVersionUID(0L)
final case class Environment(
    variables: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Environment.Variable] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Environment] with com.trueaccord.lenses.Updatable[Environment] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      variables.foreach(variables => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(variables.serializedSize) + variables.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      variables.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Environment = {
      val __variables = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Environment.Variable] ++= this.variables)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __variables += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Environment.Variable.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.Environment(
          variables = __variables.result()
      )
    }
    def clearVariables = copy(variables = _root_.scala.collection.Seq.empty)
    def addVariables(__vs: org.apache.mesos.v1.mesos.Environment.Variable*): Environment = addAllVariables(__vs)
    def addAllVariables(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Environment.Variable]): Environment = copy(variables = variables ++ __vs)
    def withVariables(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Environment.Variable]): Environment = copy(variables = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => variables
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(variables.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.Environment
}

object Environment extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Environment] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Environment] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Environment = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.Environment(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Environment.Variable]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Environment] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.Environment(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Environment.Variable]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(45)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(45)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = org.apache.mesos.v1.mesos.Environment.Variable
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.Environment(
  )
  /** @param type
    *   In Mesos 1.2, the `Environment.variables.value` message was made
    *   optional. The default type for `Environment.variables.type` is now VALUE,
    *   which requires `value` to be set, maintaining backward compatibility.
    *  
    *   TODO(greggomann): The default can be removed in Mesos 2.1 (MESOS-7134).
    * @param value
    *   Only one of `value` and `secret` must be set.
    */
  @SerialVersionUID(0L)
  final case class Variable(
      name: String,
      `type`: scala.Option[org.apache.mesos.v1.mesos.Environment.Variable.Type] = None,
      value: scala.Option[String] = None,
      secret: scala.Option[org.apache.mesos.v1.mesos.Secret] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Variable] with com.trueaccord.lenses.Updatable[Variable] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, name)
        if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, `type`.get.value) }
        if (value.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, value.get) }
        if (secret.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(secret.get.serializedSize) + secret.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeString(1, name)
        value.foreach { __v =>
          _output__.writeString(2, __v)
        };
        `type`.foreach { __v =>
          _output__.writeEnum(3, __v.value)
        };
        secret.foreach { __v =>
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Environment.Variable = {
        var __name = this.name
        var __type = this.`type`
        var __value = this.value
        var __secret = this.secret
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __name = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 24 =>
              __type = Some(org.apache.mesos.v1.mesos.Environment.Variable.Type.fromValue(_input__.readEnum()))
            case 18 =>
              __value = Some(_input__.readString())
            case 34 =>
              __secret = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __secret.getOrElse(org.apache.mesos.v1.mesos.Secret.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        org.apache.mesos.v1.mesos.Environment.Variable(
            name = __name,
            `type` = __type,
            value = __value,
            secret = __secret
        )
      }
      def withName(__v: String): Variable = copy(name = __v)
      def getType: org.apache.mesos.v1.mesos.Environment.Variable.Type = `type`.getOrElse(org.apache.mesos.v1.mesos.Environment.Variable.Type.VALUE)
      def clearType: Variable = copy(`type` = None)
      def withType(__v: org.apache.mesos.v1.mesos.Environment.Variable.Type): Variable = copy(`type` = Some(__v))
      def getValue: String = value.getOrElse("")
      def clearValue: Variable = copy(value = None)
      def withValue(__v: String): Variable = copy(value = Some(__v))
      def getSecret: org.apache.mesos.v1.mesos.Secret = secret.getOrElse(org.apache.mesos.v1.mesos.Secret.defaultInstance)
      def clearSecret: Variable = copy(secret = None)
      def withSecret(__v: org.apache.mesos.v1.mesos.Secret): Variable = copy(secret = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => name
          case 3 => `type`.map(_.javaValueDescriptor).orNull
          case 2 => value.orNull
          case 4 => secret.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(name)
          case 3 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => value.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => secret.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.Environment.Variable
  }
  
  object Variable extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Environment.Variable] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Environment.Variable] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Environment.Variable = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.Environment.Variable(
        __fieldsMap(__fields.get(0)).asInstanceOf[String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.Environment.Variable.Type.fromValue(__e.getNumber)),
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Secret]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Environment.Variable] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.Environment.Variable(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.Environment.Variable.Type.fromValue(__e.number)),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Secret]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Environment.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Environment.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 4 => __out = org.apache.mesos.v1.mesos.Secret
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => org.apache.mesos.v1.mesos.Environment.Variable.Type
      }
    }
    lazy val defaultInstance = org.apache.mesos.v1.mesos.Environment.Variable(
      name = ""
    )
    sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
      type EnumType = Type
      def isUnknown: Boolean = false
      def isValue: Boolean = false
      def isSecret: Boolean = false
      def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = org.apache.mesos.v1.mesos.Environment.Variable.Type
    }
    
    object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
      implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
      @SerialVersionUID(0L)
      case object UNKNOWN extends Type {
        val value = 0
        val index = 0
        val name = "UNKNOWN"
        override def isUnknown: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object VALUE extends Type {
        val value = 1
        val index = 1
        val name = "VALUE"
        override def isValue: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object SECRET extends Type {
        val value = 2
        val index = 2
        val name = "SECRET"
        override def isSecret: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
      
      lazy val values = scala.collection.Seq(UNKNOWN, VALUE, SECRET)
      def fromValue(value: Int): Type = value match {
        case 0 => UNKNOWN
        case 1 => VALUE
        case 2 => SECRET
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.Environment.Variable.javaDescriptor.getEnumTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.Environment.Variable.scalaDescriptor.enums(0)
    }
    implicit class VariableLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Environment.Variable]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Environment.Variable](_l) {
      def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Environment.Variable.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
      def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Environment.Variable.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def value: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
      def optionalValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.value)((c_, f_) => c_.copy(value = f_))
      def secret: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Secret] = field(_.getSecret)((c_, f_) => c_.copy(secret = Some(f_)))
      def optionalSecret: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Secret]] = field(_.secret)((c_, f_) => c_.copy(secret = f_))
    }
    final val NAME_FIELD_NUMBER = 1
    final val TYPE_FIELD_NUMBER = 3
    final val VALUE_FIELD_NUMBER = 2
    final val SECRET_FIELD_NUMBER = 4
  }
  
  implicit class EnvironmentLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Environment]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Environment](_l) {
    def variables: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Environment.Variable]] = field(_.variables)((c_, f_) => c_.copy(variables = f_))
  }
  final val VARIABLES_FIELD_NUMBER = 1
}
