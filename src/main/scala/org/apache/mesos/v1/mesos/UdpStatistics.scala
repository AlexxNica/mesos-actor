// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

@SerialVersionUID(0L)
final case class UdpStatistics(
    inDatagrams: scala.Option[Long] = None,
    noPorts: scala.Option[Long] = None,
    inErrors: scala.Option[Long] = None,
    outDatagrams: scala.Option[Long] = None,
    rcvbufErrors: scala.Option[Long] = None,
    sndbufErrors: scala.Option[Long] = None,
    inCsumErrors: scala.Option[Long] = None,
    ignoredMulti: scala.Option[Long] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[UdpStatistics] with com.trueaccord.lenses.Updatable[UdpStatistics] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (inDatagrams.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, inDatagrams.get) }
      if (noPorts.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, noPorts.get) }
      if (inErrors.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, inErrors.get) }
      if (outDatagrams.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, outDatagrams.get) }
      if (rcvbufErrors.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, rcvbufErrors.get) }
      if (sndbufErrors.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, sndbufErrors.get) }
      if (inCsumErrors.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, inCsumErrors.get) }
      if (ignoredMulti.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, ignoredMulti.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      inDatagrams.foreach { __v =>
        _output__.writeInt64(1, __v)
      };
      noPorts.foreach { __v =>
        _output__.writeInt64(2, __v)
      };
      inErrors.foreach { __v =>
        _output__.writeInt64(3, __v)
      };
      outDatagrams.foreach { __v =>
        _output__.writeInt64(4, __v)
      };
      rcvbufErrors.foreach { __v =>
        _output__.writeInt64(5, __v)
      };
      sndbufErrors.foreach { __v =>
        _output__.writeInt64(6, __v)
      };
      inCsumErrors.foreach { __v =>
        _output__.writeInt64(7, __v)
      };
      ignoredMulti.foreach { __v =>
        _output__.writeInt64(8, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.UdpStatistics = {
      var __inDatagrams = this.inDatagrams
      var __noPorts = this.noPorts
      var __inErrors = this.inErrors
      var __outDatagrams = this.outDatagrams
      var __rcvbufErrors = this.rcvbufErrors
      var __sndbufErrors = this.sndbufErrors
      var __inCsumErrors = this.inCsumErrors
      var __ignoredMulti = this.ignoredMulti
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __inDatagrams = Some(_input__.readInt64())
          case 16 =>
            __noPorts = Some(_input__.readInt64())
          case 24 =>
            __inErrors = Some(_input__.readInt64())
          case 32 =>
            __outDatagrams = Some(_input__.readInt64())
          case 40 =>
            __rcvbufErrors = Some(_input__.readInt64())
          case 48 =>
            __sndbufErrors = Some(_input__.readInt64())
          case 56 =>
            __inCsumErrors = Some(_input__.readInt64())
          case 64 =>
            __ignoredMulti = Some(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.UdpStatistics(
          inDatagrams = __inDatagrams,
          noPorts = __noPorts,
          inErrors = __inErrors,
          outDatagrams = __outDatagrams,
          rcvbufErrors = __rcvbufErrors,
          sndbufErrors = __sndbufErrors,
          inCsumErrors = __inCsumErrors,
          ignoredMulti = __ignoredMulti
      )
    }
    def getInDatagrams: Long = inDatagrams.getOrElse(0L)
    def clearInDatagrams: UdpStatistics = copy(inDatagrams = None)
    def withInDatagrams(__v: Long): UdpStatistics = copy(inDatagrams = Some(__v))
    def getNoPorts: Long = noPorts.getOrElse(0L)
    def clearNoPorts: UdpStatistics = copy(noPorts = None)
    def withNoPorts(__v: Long): UdpStatistics = copy(noPorts = Some(__v))
    def getInErrors: Long = inErrors.getOrElse(0L)
    def clearInErrors: UdpStatistics = copy(inErrors = None)
    def withInErrors(__v: Long): UdpStatistics = copy(inErrors = Some(__v))
    def getOutDatagrams: Long = outDatagrams.getOrElse(0L)
    def clearOutDatagrams: UdpStatistics = copy(outDatagrams = None)
    def withOutDatagrams(__v: Long): UdpStatistics = copy(outDatagrams = Some(__v))
    def getRcvbufErrors: Long = rcvbufErrors.getOrElse(0L)
    def clearRcvbufErrors: UdpStatistics = copy(rcvbufErrors = None)
    def withRcvbufErrors(__v: Long): UdpStatistics = copy(rcvbufErrors = Some(__v))
    def getSndbufErrors: Long = sndbufErrors.getOrElse(0L)
    def clearSndbufErrors: UdpStatistics = copy(sndbufErrors = None)
    def withSndbufErrors(__v: Long): UdpStatistics = copy(sndbufErrors = Some(__v))
    def getInCsumErrors: Long = inCsumErrors.getOrElse(0L)
    def clearInCsumErrors: UdpStatistics = copy(inCsumErrors = None)
    def withInCsumErrors(__v: Long): UdpStatistics = copy(inCsumErrors = Some(__v))
    def getIgnoredMulti: Long = ignoredMulti.getOrElse(0L)
    def clearIgnoredMulti: UdpStatistics = copy(ignoredMulti = None)
    def withIgnoredMulti(__v: Long): UdpStatistics = copy(ignoredMulti = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => inDatagrams.orNull
        case 2 => noPorts.orNull
        case 3 => inErrors.orNull
        case 4 => outDatagrams.orNull
        case 5 => rcvbufErrors.orNull
        case 6 => sndbufErrors.orNull
        case 7 => inCsumErrors.orNull
        case 8 => ignoredMulti.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => inDatagrams.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => noPorts.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => inErrors.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => outDatagrams.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => rcvbufErrors.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => sndbufErrors.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => inCsumErrors.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => ignoredMulti.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.UdpStatistics
}

object UdpStatistics extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.UdpStatistics] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.UdpStatistics] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.UdpStatistics = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.UdpStatistics(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.UdpStatistics] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.UdpStatistics(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(30)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(30)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.UdpStatistics(
  )
  implicit class UdpStatisticsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.UdpStatistics]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.UdpStatistics](_l) {
    def inDatagrams: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInDatagrams)((c_, f_) => c_.copy(inDatagrams = Some(f_)))
    def optionalInDatagrams: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inDatagrams)((c_, f_) => c_.copy(inDatagrams = f_))
    def noPorts: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getNoPorts)((c_, f_) => c_.copy(noPorts = Some(f_)))
    def optionalNoPorts: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.noPorts)((c_, f_) => c_.copy(noPorts = f_))
    def inErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInErrors)((c_, f_) => c_.copy(inErrors = Some(f_)))
    def optionalInErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inErrors)((c_, f_) => c_.copy(inErrors = f_))
    def outDatagrams: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutDatagrams)((c_, f_) => c_.copy(outDatagrams = Some(f_)))
    def optionalOutDatagrams: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outDatagrams)((c_, f_) => c_.copy(outDatagrams = f_))
    def rcvbufErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getRcvbufErrors)((c_, f_) => c_.copy(rcvbufErrors = Some(f_)))
    def optionalRcvbufErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.rcvbufErrors)((c_, f_) => c_.copy(rcvbufErrors = f_))
    def sndbufErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getSndbufErrors)((c_, f_) => c_.copy(sndbufErrors = Some(f_)))
    def optionalSndbufErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.sndbufErrors)((c_, f_) => c_.copy(sndbufErrors = f_))
    def inCsumErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInCsumErrors)((c_, f_) => c_.copy(inCsumErrors = Some(f_)))
    def optionalInCsumErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inCsumErrors)((c_, f_) => c_.copy(inCsumErrors = f_))
    def ignoredMulti: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getIgnoredMulti)((c_, f_) => c_.copy(ignoredMulti = Some(f_)))
    def optionalIgnoredMulti: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.ignoredMulti)((c_, f_) => c_.copy(ignoredMulti = f_))
  }
  final val INDATAGRAMS_FIELD_NUMBER = 1
  final val NOPORTS_FIELD_NUMBER = 2
  final val INERRORS_FIELD_NUMBER = 3
  final val OUTDATAGRAMS_FIELD_NUMBER = 4
  final val RCVBUFERRORS_FIELD_NUMBER = 5
  final val SNDBUFERRORS_FIELD_NUMBER = 6
  final val INCSUMERRORS_FIELD_NUMBER = 7
  final val IGNOREDMULTI_FIELD_NUMBER = 8
}
