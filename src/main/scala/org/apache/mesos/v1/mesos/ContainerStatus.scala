// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Container related information that is resolved during container
  * setup. The information is sent back to the framework as part of the
  * TaskStatus message.
  *
  * @param networkInfos
  *   This field can be reliably used to identify the container IP address.
  * @param cgroupInfo
  *   Information about Linux control group (cgroup).
  * @param executorPid
  *   Information about Executor PID.
  */
@SerialVersionUID(0L)
final case class ContainerStatus(
    containerId: scala.Option[org.apache.mesos.v1.mesos.ContainerID] = None,
    networkInfos: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo] = _root_.scala.collection.Seq.empty,
    cgroupInfo: scala.Option[org.apache.mesos.v1.mesos.CgroupInfo] = None,
    executorPid: scala.Option[Int] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ContainerStatus] with com.trueaccord.lenses.Updatable[ContainerStatus] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (containerId.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containerId.get.serializedSize) + containerId.get.serializedSize }
      networkInfos.foreach(networkInfos => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(networkInfos.serializedSize) + networkInfos.serializedSize)
      if (cgroupInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(cgroupInfo.get.serializedSize) + cgroupInfo.get.serializedSize }
      if (executorPid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, executorPid.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      networkInfos.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      cgroupInfo.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      executorPid.foreach { __v =>
        _output__.writeUInt32(3, __v)
      };
      containerId.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.ContainerStatus = {
      var __containerId = this.containerId
      val __networkInfos = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.NetworkInfo] ++= this.networkInfos)
      var __cgroupInfo = this.cgroupInfo
      var __executorPid = this.executorPid
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 34 =>
            __containerId = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __containerId.getOrElse(org.apache.mesos.v1.mesos.ContainerID.defaultInstance)))
          case 10 =>
            __networkInfos += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.NetworkInfo.defaultInstance)
          case 18 =>
            __cgroupInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __cgroupInfo.getOrElse(org.apache.mesos.v1.mesos.CgroupInfo.defaultInstance)))
          case 24 =>
            __executorPid = Some(_input__.readUInt32())
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.ContainerStatus(
          containerId = __containerId,
          networkInfos = __networkInfos.result(),
          cgroupInfo = __cgroupInfo,
          executorPid = __executorPid
      )
    }
    def getContainerId: org.apache.mesos.v1.mesos.ContainerID = containerId.getOrElse(org.apache.mesos.v1.mesos.ContainerID.defaultInstance)
    def clearContainerId: ContainerStatus = copy(containerId = None)
    def withContainerId(__v: org.apache.mesos.v1.mesos.ContainerID): ContainerStatus = copy(containerId = Some(__v))
    def clearNetworkInfos = copy(networkInfos = _root_.scala.collection.Seq.empty)
    def addNetworkInfos(__vs: org.apache.mesos.v1.mesos.NetworkInfo*): ContainerStatus = addAllNetworkInfos(__vs)
    def addAllNetworkInfos(__vs: TraversableOnce[org.apache.mesos.v1.mesos.NetworkInfo]): ContainerStatus = copy(networkInfos = networkInfos ++ __vs)
    def withNetworkInfos(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo]): ContainerStatus = copy(networkInfos = __v)
    def getCgroupInfo: org.apache.mesos.v1.mesos.CgroupInfo = cgroupInfo.getOrElse(org.apache.mesos.v1.mesos.CgroupInfo.defaultInstance)
    def clearCgroupInfo: ContainerStatus = copy(cgroupInfo = None)
    def withCgroupInfo(__v: org.apache.mesos.v1.mesos.CgroupInfo): ContainerStatus = copy(cgroupInfo = Some(__v))
    def getExecutorPid: Int = executorPid.getOrElse(0)
    def clearExecutorPid: ContainerStatus = copy(executorPid = None)
    def withExecutorPid(__v: Int): ContainerStatus = copy(executorPid = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 4 => containerId.orNull
        case 1 => networkInfos
        case 2 => cgroupInfo.orNull
        case 3 => executorPid.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 4 => containerId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 1 => _root_.scalapb.descriptors.PRepeated(networkInfos.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 2 => cgroupInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => executorPid.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.ContainerStatus
}

object ContainerStatus extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ContainerStatus] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.ContainerStatus] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.ContainerStatus = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.ContainerStatus(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ContainerID]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CgroupInfo]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.ContainerStatus] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.ContainerStatus(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ContainerID]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CgroupInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(61)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(61)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => __out = org.apache.mesos.v1.mesos.ContainerID
      case 1 => __out = org.apache.mesos.v1.mesos.NetworkInfo
      case 2 => __out = org.apache.mesos.v1.mesos.CgroupInfo
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.ContainerStatus(
  )
  implicit class ContainerStatusLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerStatus]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.ContainerStatus](_l) {
    def containerId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerID] = field(_.getContainerId)((c_, f_) => c_.copy(containerId = Some(f_)))
    def optionalContainerId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ContainerID]] = field(_.containerId)((c_, f_) => c_.copy(containerId = f_))
    def networkInfos: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo]] = field(_.networkInfos)((c_, f_) => c_.copy(networkInfos = f_))
    def cgroupInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CgroupInfo] = field(_.getCgroupInfo)((c_, f_) => c_.copy(cgroupInfo = Some(f_)))
    def optionalCgroupInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CgroupInfo]] = field(_.cgroupInfo)((c_, f_) => c_.copy(cgroupInfo = f_))
    def executorPid: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getExecutorPid)((c_, f_) => c_.copy(executorPid = Some(f_)))
    def optionalExecutorPid: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.executorPid)((c_, f_) => c_.copy(executorPid = f_))
  }
  final val CONTAINER_ID_FIELD_NUMBER = 4
  final val NETWORK_INFOS_FIELD_NUMBER = 1
  final val CGROUP_INFO_FIELD_NUMBER = 2
  final val EXECUTOR_PID_FIELD_NUMBER = 3
}
