// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes a network request from a framework as well as network resolution
  * provided by Mesos.
  *
  * A framework may request the network isolator on the Agent to isolate the
  * container in a network namespace and create a virtual network interface.
  * The `NetworkInfo` message describes the properties of that virtual
  * interface, including the IP addresses and network isolation policy
  * (network group membership).
  *
  * The NetworkInfo message is not interpreted by the Master or Agent and is
  * intended to be used by Agent and Master modules implementing network
  * isolation. If the modules are missing, the message is simply ignored. In
  * future, the task launch will fail if there is no module providing the
  * network isolation capabilities (MESOS-3390).
  *
  * An executor, Agent, or an Agent module may append NetworkInfos inside
  * TaskStatus::container_status to provide information such as the container IP
  * address and isolation groups.
  *
  * @param ipAddresses
  *   When included in a ContainerInfo, each of these represent a
  *   request for an IP address. Each request can specify an explicit address
  *   or the IP protocol to use.
  *  
  *   When included in a TaskStatus message, these inform the framework
  *   scheduler about the IP addresses that are bound to the container
  *   interface. When there are no custom network isolator modules installed,
  *   this field is filled in automatically with the Agent IP address.
  * @param name
  *   Name of the network which will be used by network isolator to determine
  *   the network that the container joins. It's up to the network isolator
  *   to decide how to interpret this field.
  * @param groups
  *   A group is the name given to a set of logically-related interfaces that
  *   are allowed to communicate among themselves. Network traffic is allowed
  *   between two container interfaces that share at least one network group.
  *   For example, one might want to create separate groups for isolating dev,
  *   testing, qa and prod deployment environments.
  * @param labels
  *   To tag certain metadata to be used by Isolator/IPAM, e.g., rack, etc.
  */
@SerialVersionUID(0L)
final case class NetworkInfo(
    ipAddresses: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo.IPAddress] = _root_.scala.collection.Seq.empty,
    name: scala.Option[String] = None,
    groups: _root_.scala.collection.Seq[String] = _root_.scala.collection.Seq.empty,
    labels: scala.Option[org.apache.mesos.v1.mesos.Labels] = None,
    portMappings: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo.PortMapping] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[NetworkInfo] with com.trueaccord.lenses.Updatable[NetworkInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      ipAddresses.foreach(ipAddresses => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ipAddresses.serializedSize) + ipAddresses.serializedSize)
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, name.get) }
      groups.foreach(groups => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, groups))
      if (labels.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(labels.get.serializedSize) + labels.get.serializedSize }
      portMappings.foreach(portMappings => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(portMappings.serializedSize) + portMappings.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      groups.foreach { __v =>
        _output__.writeString(3, __v)
      };
      labels.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      ipAddresses.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      name.foreach { __v =>
        _output__.writeString(6, __v)
      };
      portMappings.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.NetworkInfo = {
      val __ipAddresses = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.NetworkInfo.IPAddress] ++= this.ipAddresses)
      var __name = this.name
      val __groups = (_root_.scala.collection.immutable.Vector.newBuilder[String] ++= this.groups)
      var __labels = this.labels
      val __portMappings = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.NetworkInfo.PortMapping] ++= this.portMappings)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 42 =>
            __ipAddresses += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.NetworkInfo.IPAddress.defaultInstance)
          case 50 =>
            __name = Some(_input__.readString())
          case 26 =>
            __groups += _input__.readString()
          case 34 =>
            __labels = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)))
          case 58 =>
            __portMappings += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.NetworkInfo.PortMapping.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.NetworkInfo(
          ipAddresses = __ipAddresses.result(),
          name = __name,
          groups = __groups.result(),
          labels = __labels,
          portMappings = __portMappings.result()
      )
    }
    def clearIpAddresses = copy(ipAddresses = _root_.scala.collection.Seq.empty)
    def addIpAddresses(__vs: org.apache.mesos.v1.mesos.NetworkInfo.IPAddress*): NetworkInfo = addAllIpAddresses(__vs)
    def addAllIpAddresses(__vs: TraversableOnce[org.apache.mesos.v1.mesos.NetworkInfo.IPAddress]): NetworkInfo = copy(ipAddresses = ipAddresses ++ __vs)
    def withIpAddresses(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo.IPAddress]): NetworkInfo = copy(ipAddresses = __v)
    def getName: String = name.getOrElse("")
    def clearName: NetworkInfo = copy(name = None)
    def withName(__v: String): NetworkInfo = copy(name = Some(__v))
    def clearGroups = copy(groups = _root_.scala.collection.Seq.empty)
    def addGroups(__vs: String*): NetworkInfo = addAllGroups(__vs)
    def addAllGroups(__vs: TraversableOnce[String]): NetworkInfo = copy(groups = groups ++ __vs)
    def withGroups(__v: _root_.scala.collection.Seq[String]): NetworkInfo = copy(groups = __v)
    def getLabels: org.apache.mesos.v1.mesos.Labels = labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)
    def clearLabels: NetworkInfo = copy(labels = None)
    def withLabels(__v: org.apache.mesos.v1.mesos.Labels): NetworkInfo = copy(labels = Some(__v))
    def clearPortMappings = copy(portMappings = _root_.scala.collection.Seq.empty)
    def addPortMappings(__vs: org.apache.mesos.v1.mesos.NetworkInfo.PortMapping*): NetworkInfo = addAllPortMappings(__vs)
    def addAllPortMappings(__vs: TraversableOnce[org.apache.mesos.v1.mesos.NetworkInfo.PortMapping]): NetworkInfo = copy(portMappings = portMappings ++ __vs)
    def withPortMappings(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo.PortMapping]): NetworkInfo = copy(portMappings = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 5 => ipAddresses
        case 6 => name.orNull
        case 3 => groups
        case 4 => labels.orNull
        case 7 => portMappings
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 5 => _root_.scalapb.descriptors.PRepeated(ipAddresses.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 6 => name.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(groups.map(_root_.scalapb.descriptors.PString(_))(_root_.scala.collection.breakOut))
        case 4 => labels.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PRepeated(portMappings.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.NetworkInfo
}

object NetworkInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.NetworkInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.NetworkInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.NetworkInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.NetworkInfo(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo.IPAddress]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Labels]],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo.PortMapping]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.NetworkInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.NetworkInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo.IPAddress]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Labels]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo.PortMapping]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(55)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(55)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => __out = org.apache.mesos.v1.mesos.NetworkInfo.IPAddress
      case 4 => __out = org.apache.mesos.v1.mesos.Labels
      case 7 => __out = org.apache.mesos.v1.mesos.NetworkInfo.PortMapping
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.NetworkInfo(
  )
  sealed trait Protocol extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Protocol
    def isIpv4: Boolean = false
    def isIpv6: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Protocol] = org.apache.mesos.v1.mesos.NetworkInfo.Protocol
  }
  
  object Protocol extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Protocol] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Protocol] = this
    @SerialVersionUID(0L)
    case object IPv4 extends Protocol {
      val value = 1
      val index = 0
      val name = "IPv4"
      override def isIpv4: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object IPv6 extends Protocol {
      val value = 2
      val index = 1
      val name = "IPv6"
      override def isIpv6: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Protocol with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(IPv4, IPv6)
    def fromValue(value: Int): Protocol = value match {
      case 1 => IPv4
      case 2 => IPv6
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.NetworkInfo.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.NetworkInfo.scalaDescriptor.enums(0)
  }
  /** Specifies a request for an IP address, or reports the assigned container
    * IP address.
    *
    * Users can request an automatically assigned IP (for example, via an
    * IPAM service) or a specific IP by adding a NetworkInfo to the
    * ContainerInfo for a task.  On a request, specifying neither `protocol`
    * nor `ip_address` means that any available address may be assigned.
    *
    * @param protocol
    *   Specify IP address requirement. Set protocol to the desired value to
    *   request the network isolator on the Agent to assign an IP address to the
    *   container being launched. If a specific IP address is specified in
    *   ip_address, this field should not be set.
    * @param ipAddress
    *   Statically assigned IP provided by the Framework. This IP will be
    *   assigned to the container by the network isolator module on the Agent.
    *   This field should not be used with the protocol field above.
    *  
    *   If an explicit address is requested but is unavailable, the network
    *   isolator should fail the task.
    */
  @SerialVersionUID(0L)
  final case class IPAddress(
      protocol: scala.Option[org.apache.mesos.v1.mesos.NetworkInfo.Protocol] = None,
      ipAddress: scala.Option[String] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[IPAddress] with com.trueaccord.lenses.Updatable[IPAddress] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (protocol.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, protocol.get.value) }
        if (ipAddress.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, ipAddress.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        protocol.foreach { __v =>
          _output__.writeEnum(1, __v.value)
        };
        ipAddress.foreach { __v =>
          _output__.writeString(2, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.NetworkInfo.IPAddress = {
        var __protocol = this.protocol
        var __ipAddress = this.ipAddress
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __protocol = Some(org.apache.mesos.v1.mesos.NetworkInfo.Protocol.fromValue(_input__.readEnum()))
            case 18 =>
              __ipAddress = Some(_input__.readString())
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.NetworkInfo.IPAddress(
            protocol = __protocol,
            ipAddress = __ipAddress
        )
      }
      def getProtocol: org.apache.mesos.v1.mesos.NetworkInfo.Protocol = protocol.getOrElse(org.apache.mesos.v1.mesos.NetworkInfo.Protocol.IPv4)
      def clearProtocol: IPAddress = copy(protocol = None)
      def withProtocol(__v: org.apache.mesos.v1.mesos.NetworkInfo.Protocol): IPAddress = copy(protocol = Some(__v))
      def getIpAddress: String = ipAddress.getOrElse("")
      def clearIpAddress: IPAddress = copy(ipAddress = None)
      def withIpAddress(__v: String): IPAddress = copy(ipAddress = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => protocol.map(_.javaValueDescriptor).orNull
          case 2 => ipAddress.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => protocol.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => ipAddress.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.NetworkInfo.IPAddress
  }
  
  object IPAddress extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.NetworkInfo.IPAddress] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.NetworkInfo.IPAddress] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.NetworkInfo.IPAddress = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.NetworkInfo.IPAddress(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.NetworkInfo.Protocol.fromValue(__e.getNumber)),
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.NetworkInfo.IPAddress] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.NetworkInfo.IPAddress(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.NetworkInfo.Protocol.fromValue(__e.number)),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.NetworkInfo.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.NetworkInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => org.apache.mesos.v1.mesos.NetworkInfo.Protocol
      }
    }
    lazy val defaultInstance = org.apache.mesos.v1.mesos.NetworkInfo.IPAddress(
    )
    implicit class IPAddressLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.NetworkInfo.IPAddress]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.NetworkInfo.IPAddress](_l) {
      def protocol: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.NetworkInfo.Protocol] = field(_.getProtocol)((c_, f_) => c_.copy(protocol = Some(f_)))
      def optionalProtocol: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.NetworkInfo.Protocol]] = field(_.protocol)((c_, f_) => c_.copy(protocol = f_))
      def ipAddress: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getIpAddress)((c_, f_) => c_.copy(ipAddress = Some(f_)))
      def optionalIpAddress: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.ipAddress)((c_, f_) => c_.copy(ipAddress = f_))
    }
    final val PROTOCOL_FIELD_NUMBER = 1
    final val IP_ADDRESS_FIELD_NUMBER = 2
  }
  
  /** Specifies a port mapping request for the task on this network.
    *
    * @param protocol
    *   Protocol to expose as (ie: tcp, udp).
    */
  @SerialVersionUID(0L)
  final case class PortMapping(
      hostPort: Int,
      containerPort: Int,
      protocol: scala.Option[String] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[PortMapping] with com.trueaccord.lenses.Updatable[PortMapping] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, hostPort)
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, containerPort)
        if (protocol.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, protocol.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeUInt32(1, hostPort)
        _output__.writeUInt32(2, containerPort)
        protocol.foreach { __v =>
          _output__.writeString(3, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.NetworkInfo.PortMapping = {
        var __hostPort = this.hostPort
        var __containerPort = this.containerPort
        var __protocol = this.protocol
        var __requiredFields0: Long = 0x3L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __hostPort = _input__.readUInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 16 =>
              __containerPort = _input__.readUInt32()
              __requiredFields0 &= 0xfffffffffffffffdL
            case 26 =>
              __protocol = Some(_input__.readString())
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        org.apache.mesos.v1.mesos.NetworkInfo.PortMapping(
            hostPort = __hostPort,
            containerPort = __containerPort,
            protocol = __protocol
        )
      }
      def withHostPort(__v: Int): PortMapping = copy(hostPort = __v)
      def withContainerPort(__v: Int): PortMapping = copy(containerPort = __v)
      def getProtocol: String = protocol.getOrElse("")
      def clearProtocol: PortMapping = copy(protocol = None)
      def withProtocol(__v: String): PortMapping = copy(protocol = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => hostPort
          case 2 => containerPort
          case 3 => protocol.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(hostPort)
          case 2 => _root_.scalapb.descriptors.PInt(containerPort)
          case 3 => protocol.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.NetworkInfo.PortMapping
  }
  
  object PortMapping extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.NetworkInfo.PortMapping] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.NetworkInfo.PortMapping] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.NetworkInfo.PortMapping = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.NetworkInfo.PortMapping(
        __fieldsMap(__fields.get(0)).asInstanceOf[Int],
        __fieldsMap(__fields.get(1)).asInstanceOf[Int],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.NetworkInfo.PortMapping] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.NetworkInfo.PortMapping(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.NetworkInfo.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.NetworkInfo.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.NetworkInfo.PortMapping(
      hostPort = 0,
      containerPort = 0
    )
    implicit class PortMappingLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.NetworkInfo.PortMapping]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.NetworkInfo.PortMapping](_l) {
      def hostPort: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.hostPort)((c_, f_) => c_.copy(hostPort = f_))
      def containerPort: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.containerPort)((c_, f_) => c_.copy(containerPort = f_))
      def protocol: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getProtocol)((c_, f_) => c_.copy(protocol = Some(f_)))
      def optionalProtocol: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.protocol)((c_, f_) => c_.copy(protocol = f_))
    }
    final val HOST_PORT_FIELD_NUMBER = 1
    final val CONTAINER_PORT_FIELD_NUMBER = 2
    final val PROTOCOL_FIELD_NUMBER = 3
  }
  
  implicit class NetworkInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.NetworkInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.NetworkInfo](_l) {
    def ipAddresses: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo.IPAddress]] = field(_.ipAddresses)((c_, f_) => c_.copy(ipAddresses = f_))
    def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getName)((c_, f_) => c_.copy(name = Some(f_)))
    def optionalName: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def groups: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[String]] = field(_.groups)((c_, f_) => c_.copy(groups = f_))
    def labels: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Labels] = field(_.getLabels)((c_, f_) => c_.copy(labels = Some(f_)))
    def optionalLabels: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Labels]] = field(_.labels)((c_, f_) => c_.copy(labels = f_))
    def portMappings: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.NetworkInfo.PortMapping]] = field(_.portMappings)((c_, f_) => c_.copy(portMappings = f_))
  }
  final val IP_ADDRESSES_FIELD_NUMBER = 5
  final val NAME_FIELD_NUMBER = 6
  final val GROUPS_FIELD_NUMBER = 3
  final val LABELS_FIELD_NUMBER = 4
  final val PORT_MAPPINGS_FIELD_NUMBER = 7
}
