// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

@SerialVersionUID(0L)
final case class TcpStatistics(
    rtoAlgorithm: scala.Option[Long] = None,
    rtoMin: scala.Option[Long] = None,
    rtoMax: scala.Option[Long] = None,
    maxConn: scala.Option[Long] = None,
    activeOpens: scala.Option[Long] = None,
    passiveOpens: scala.Option[Long] = None,
    attemptFails: scala.Option[Long] = None,
    estabResets: scala.Option[Long] = None,
    currEstab: scala.Option[Long] = None,
    inSegs: scala.Option[Long] = None,
    outSegs: scala.Option[Long] = None,
    retransSegs: scala.Option[Long] = None,
    inErrs: scala.Option[Long] = None,
    outRsts: scala.Option[Long] = None,
    inCsumErrors: scala.Option[Long] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TcpStatistics] with com.trueaccord.lenses.Updatable[TcpStatistics] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (rtoAlgorithm.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, rtoAlgorithm.get) }
      if (rtoMin.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, rtoMin.get) }
      if (rtoMax.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, rtoMax.get) }
      if (maxConn.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, maxConn.get) }
      if (activeOpens.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, activeOpens.get) }
      if (passiveOpens.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, passiveOpens.get) }
      if (attemptFails.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, attemptFails.get) }
      if (estabResets.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, estabResets.get) }
      if (currEstab.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, currEstab.get) }
      if (inSegs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, inSegs.get) }
      if (outSegs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, outSegs.get) }
      if (retransSegs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(12, retransSegs.get) }
      if (inErrs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(13, inErrs.get) }
      if (outRsts.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(14, outRsts.get) }
      if (inCsumErrors.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(15, inCsumErrors.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      rtoAlgorithm.foreach { __v =>
        _output__.writeInt64(1, __v)
      };
      rtoMin.foreach { __v =>
        _output__.writeInt64(2, __v)
      };
      rtoMax.foreach { __v =>
        _output__.writeInt64(3, __v)
      };
      maxConn.foreach { __v =>
        _output__.writeInt64(4, __v)
      };
      activeOpens.foreach { __v =>
        _output__.writeInt64(5, __v)
      };
      passiveOpens.foreach { __v =>
        _output__.writeInt64(6, __v)
      };
      attemptFails.foreach { __v =>
        _output__.writeInt64(7, __v)
      };
      estabResets.foreach { __v =>
        _output__.writeInt64(8, __v)
      };
      currEstab.foreach { __v =>
        _output__.writeInt64(9, __v)
      };
      inSegs.foreach { __v =>
        _output__.writeInt64(10, __v)
      };
      outSegs.foreach { __v =>
        _output__.writeInt64(11, __v)
      };
      retransSegs.foreach { __v =>
        _output__.writeInt64(12, __v)
      };
      inErrs.foreach { __v =>
        _output__.writeInt64(13, __v)
      };
      outRsts.foreach { __v =>
        _output__.writeInt64(14, __v)
      };
      inCsumErrors.foreach { __v =>
        _output__.writeInt64(15, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.TcpStatistics = {
      var __rtoAlgorithm = this.rtoAlgorithm
      var __rtoMin = this.rtoMin
      var __rtoMax = this.rtoMax
      var __maxConn = this.maxConn
      var __activeOpens = this.activeOpens
      var __passiveOpens = this.passiveOpens
      var __attemptFails = this.attemptFails
      var __estabResets = this.estabResets
      var __currEstab = this.currEstab
      var __inSegs = this.inSegs
      var __outSegs = this.outSegs
      var __retransSegs = this.retransSegs
      var __inErrs = this.inErrs
      var __outRsts = this.outRsts
      var __inCsumErrors = this.inCsumErrors
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __rtoAlgorithm = Some(_input__.readInt64())
          case 16 =>
            __rtoMin = Some(_input__.readInt64())
          case 24 =>
            __rtoMax = Some(_input__.readInt64())
          case 32 =>
            __maxConn = Some(_input__.readInt64())
          case 40 =>
            __activeOpens = Some(_input__.readInt64())
          case 48 =>
            __passiveOpens = Some(_input__.readInt64())
          case 56 =>
            __attemptFails = Some(_input__.readInt64())
          case 64 =>
            __estabResets = Some(_input__.readInt64())
          case 72 =>
            __currEstab = Some(_input__.readInt64())
          case 80 =>
            __inSegs = Some(_input__.readInt64())
          case 88 =>
            __outSegs = Some(_input__.readInt64())
          case 96 =>
            __retransSegs = Some(_input__.readInt64())
          case 104 =>
            __inErrs = Some(_input__.readInt64())
          case 112 =>
            __outRsts = Some(_input__.readInt64())
          case 120 =>
            __inCsumErrors = Some(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.TcpStatistics(
          rtoAlgorithm = __rtoAlgorithm,
          rtoMin = __rtoMin,
          rtoMax = __rtoMax,
          maxConn = __maxConn,
          activeOpens = __activeOpens,
          passiveOpens = __passiveOpens,
          attemptFails = __attemptFails,
          estabResets = __estabResets,
          currEstab = __currEstab,
          inSegs = __inSegs,
          outSegs = __outSegs,
          retransSegs = __retransSegs,
          inErrs = __inErrs,
          outRsts = __outRsts,
          inCsumErrors = __inCsumErrors
      )
    }
    def getRtoAlgorithm: Long = rtoAlgorithm.getOrElse(0L)
    def clearRtoAlgorithm: TcpStatistics = copy(rtoAlgorithm = None)
    def withRtoAlgorithm(__v: Long): TcpStatistics = copy(rtoAlgorithm = Some(__v))
    def getRtoMin: Long = rtoMin.getOrElse(0L)
    def clearRtoMin: TcpStatistics = copy(rtoMin = None)
    def withRtoMin(__v: Long): TcpStatistics = copy(rtoMin = Some(__v))
    def getRtoMax: Long = rtoMax.getOrElse(0L)
    def clearRtoMax: TcpStatistics = copy(rtoMax = None)
    def withRtoMax(__v: Long): TcpStatistics = copy(rtoMax = Some(__v))
    def getMaxConn: Long = maxConn.getOrElse(0L)
    def clearMaxConn: TcpStatistics = copy(maxConn = None)
    def withMaxConn(__v: Long): TcpStatistics = copy(maxConn = Some(__v))
    def getActiveOpens: Long = activeOpens.getOrElse(0L)
    def clearActiveOpens: TcpStatistics = copy(activeOpens = None)
    def withActiveOpens(__v: Long): TcpStatistics = copy(activeOpens = Some(__v))
    def getPassiveOpens: Long = passiveOpens.getOrElse(0L)
    def clearPassiveOpens: TcpStatistics = copy(passiveOpens = None)
    def withPassiveOpens(__v: Long): TcpStatistics = copy(passiveOpens = Some(__v))
    def getAttemptFails: Long = attemptFails.getOrElse(0L)
    def clearAttemptFails: TcpStatistics = copy(attemptFails = None)
    def withAttemptFails(__v: Long): TcpStatistics = copy(attemptFails = Some(__v))
    def getEstabResets: Long = estabResets.getOrElse(0L)
    def clearEstabResets: TcpStatistics = copy(estabResets = None)
    def withEstabResets(__v: Long): TcpStatistics = copy(estabResets = Some(__v))
    def getCurrEstab: Long = currEstab.getOrElse(0L)
    def clearCurrEstab: TcpStatistics = copy(currEstab = None)
    def withCurrEstab(__v: Long): TcpStatistics = copy(currEstab = Some(__v))
    def getInSegs: Long = inSegs.getOrElse(0L)
    def clearInSegs: TcpStatistics = copy(inSegs = None)
    def withInSegs(__v: Long): TcpStatistics = copy(inSegs = Some(__v))
    def getOutSegs: Long = outSegs.getOrElse(0L)
    def clearOutSegs: TcpStatistics = copy(outSegs = None)
    def withOutSegs(__v: Long): TcpStatistics = copy(outSegs = Some(__v))
    def getRetransSegs: Long = retransSegs.getOrElse(0L)
    def clearRetransSegs: TcpStatistics = copy(retransSegs = None)
    def withRetransSegs(__v: Long): TcpStatistics = copy(retransSegs = Some(__v))
    def getInErrs: Long = inErrs.getOrElse(0L)
    def clearInErrs: TcpStatistics = copy(inErrs = None)
    def withInErrs(__v: Long): TcpStatistics = copy(inErrs = Some(__v))
    def getOutRsts: Long = outRsts.getOrElse(0L)
    def clearOutRsts: TcpStatistics = copy(outRsts = None)
    def withOutRsts(__v: Long): TcpStatistics = copy(outRsts = Some(__v))
    def getInCsumErrors: Long = inCsumErrors.getOrElse(0L)
    def clearInCsumErrors: TcpStatistics = copy(inCsumErrors = None)
    def withInCsumErrors(__v: Long): TcpStatistics = copy(inCsumErrors = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => rtoAlgorithm.orNull
        case 2 => rtoMin.orNull
        case 3 => rtoMax.orNull
        case 4 => maxConn.orNull
        case 5 => activeOpens.orNull
        case 6 => passiveOpens.orNull
        case 7 => attemptFails.orNull
        case 8 => estabResets.orNull
        case 9 => currEstab.orNull
        case 10 => inSegs.orNull
        case 11 => outSegs.orNull
        case 12 => retransSegs.orNull
        case 13 => inErrs.orNull
        case 14 => outRsts.orNull
        case 15 => inCsumErrors.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => rtoAlgorithm.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => rtoMin.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => rtoMax.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => maxConn.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => activeOpens.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => passiveOpens.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => attemptFails.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => estabResets.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => currEstab.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => inSegs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => outSegs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => retransSegs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => inErrs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => outRsts.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => inCsumErrors.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.TcpStatistics
}

object TcpStatistics extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.TcpStatistics] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.TcpStatistics] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.TcpStatistics = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.TcpStatistics(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.TcpStatistics] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.TcpStatistics(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(29)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(29)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.TcpStatistics(
  )
  implicit class TcpStatisticsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TcpStatistics]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.TcpStatistics](_l) {
    def rtoAlgorithm: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getRtoAlgorithm)((c_, f_) => c_.copy(rtoAlgorithm = Some(f_)))
    def optionalRtoAlgorithm: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.rtoAlgorithm)((c_, f_) => c_.copy(rtoAlgorithm = f_))
    def rtoMin: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getRtoMin)((c_, f_) => c_.copy(rtoMin = Some(f_)))
    def optionalRtoMin: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.rtoMin)((c_, f_) => c_.copy(rtoMin = f_))
    def rtoMax: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getRtoMax)((c_, f_) => c_.copy(rtoMax = Some(f_)))
    def optionalRtoMax: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.rtoMax)((c_, f_) => c_.copy(rtoMax = f_))
    def maxConn: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMaxConn)((c_, f_) => c_.copy(maxConn = Some(f_)))
    def optionalMaxConn: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.maxConn)((c_, f_) => c_.copy(maxConn = f_))
    def activeOpens: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getActiveOpens)((c_, f_) => c_.copy(activeOpens = Some(f_)))
    def optionalActiveOpens: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.activeOpens)((c_, f_) => c_.copy(activeOpens = f_))
    def passiveOpens: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getPassiveOpens)((c_, f_) => c_.copy(passiveOpens = Some(f_)))
    def optionalPassiveOpens: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.passiveOpens)((c_, f_) => c_.copy(passiveOpens = f_))
    def attemptFails: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getAttemptFails)((c_, f_) => c_.copy(attemptFails = Some(f_)))
    def optionalAttemptFails: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.attemptFails)((c_, f_) => c_.copy(attemptFails = f_))
    def estabResets: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getEstabResets)((c_, f_) => c_.copy(estabResets = Some(f_)))
    def optionalEstabResets: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.estabResets)((c_, f_) => c_.copy(estabResets = f_))
    def currEstab: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getCurrEstab)((c_, f_) => c_.copy(currEstab = Some(f_)))
    def optionalCurrEstab: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.currEstab)((c_, f_) => c_.copy(currEstab = f_))
    def inSegs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInSegs)((c_, f_) => c_.copy(inSegs = Some(f_)))
    def optionalInSegs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inSegs)((c_, f_) => c_.copy(inSegs = f_))
    def outSegs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutSegs)((c_, f_) => c_.copy(outSegs = Some(f_)))
    def optionalOutSegs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outSegs)((c_, f_) => c_.copy(outSegs = f_))
    def retransSegs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getRetransSegs)((c_, f_) => c_.copy(retransSegs = Some(f_)))
    def optionalRetransSegs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.retransSegs)((c_, f_) => c_.copy(retransSegs = f_))
    def inErrs: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInErrs)((c_, f_) => c_.copy(inErrs = Some(f_)))
    def optionalInErrs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inErrs)((c_, f_) => c_.copy(inErrs = f_))
    def outRsts: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getOutRsts)((c_, f_) => c_.copy(outRsts = Some(f_)))
    def optionalOutRsts: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.outRsts)((c_, f_) => c_.copy(outRsts = f_))
    def inCsumErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getInCsumErrors)((c_, f_) => c_.copy(inCsumErrors = Some(f_)))
    def optionalInCsumErrors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.inCsumErrors)((c_, f_) => c_.copy(inCsumErrors = f_))
  }
  final val RTOALGORITHM_FIELD_NUMBER = 1
  final val RTOMIN_FIELD_NUMBER = 2
  final val RTOMAX_FIELD_NUMBER = 3
  final val MAXCONN_FIELD_NUMBER = 4
  final val ACTIVEOPENS_FIELD_NUMBER = 5
  final val PASSIVEOPENS_FIELD_NUMBER = 6
  final val ATTEMPTFAILS_FIELD_NUMBER = 7
  final val ESTABRESETS_FIELD_NUMBER = 8
  final val CURRESTAB_FIELD_NUMBER = 9
  final val INSEGS_FIELD_NUMBER = 10
  final val OUTSEGS_FIELD_NUMBER = 11
  final val RETRANSSEGS_FIELD_NUMBER = 12
  final val INERRS_FIELD_NUMBER = 13
  final val OUTRSTS_FIELD_NUMBER = 14
  final val INCSUMERRORS_FIELD_NUMBER = 15
}
