// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Service discovery information.
  * The visibility field restricts discovery within a framework (FRAMEWORK),
  * within a Mesos cluster (CLUSTER), or places no restrictions (EXTERNAL).
  * Each port in the ports field also has an optional visibility field.
  * If visibility is specified for a port, it overrides the default service-wide
  * DiscoveryInfo.visibility for that port.
  * The environment, location, and version fields provide first class support for
  * common attributes used to differentiate between similar services. The
  * environment may receive values such as PROD/QA/DEV, the location field may
  * receive values like EAST-US/WEST-US/EUROPE/AMEA, and the version field may
  * receive values like v2.0/v0.9. The exact use of these fields is up to each
  * service discovery system.
  */
@SerialVersionUID(0L)
final case class DiscoveryInfo(
    visibility: org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility,
    name: scala.Option[String] = None,
    environment: scala.Option[String] = None,
    location: scala.Option[String] = None,
    version: scala.Option[String] = None,
    ports: scala.Option[org.apache.mesos.v1.mesos.Ports] = None,
    labels: scala.Option[org.apache.mesos.v1.mesos.Labels] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DiscoveryInfo] with com.trueaccord.lenses.Updatable[DiscoveryInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, visibility.value)
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, name.get) }
      if (environment.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, environment.get) }
      if (location.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, location.get) }
      if (version.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, version.get) }
      if (ports.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ports.get.serializedSize) + ports.get.serializedSize }
      if (labels.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(labels.get.serializedSize) + labels.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeEnum(1, visibility.value)
      name.foreach { __v =>
        _output__.writeString(2, __v)
      };
      environment.foreach { __v =>
        _output__.writeString(3, __v)
      };
      location.foreach { __v =>
        _output__.writeString(4, __v)
      };
      version.foreach { __v =>
        _output__.writeString(5, __v)
      };
      ports.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      labels.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.DiscoveryInfo = {
      var __visibility = this.visibility
      var __name = this.name
      var __environment = this.environment
      var __location = this.location
      var __version = this.version
      var __ports = this.ports
      var __labels = this.labels
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __visibility = org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __name = Some(_input__.readString())
          case 26 =>
            __environment = Some(_input__.readString())
          case 34 =>
            __location = Some(_input__.readString())
          case 42 =>
            __version = Some(_input__.readString())
          case 50 =>
            __ports = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __ports.getOrElse(org.apache.mesos.v1.mesos.Ports.defaultInstance)))
          case 58 =>
            __labels = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.DiscoveryInfo(
          visibility = __visibility,
          name = __name,
          environment = __environment,
          location = __location,
          version = __version,
          ports = __ports,
          labels = __labels
      )
    }
    def withVisibility(__v: org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility): DiscoveryInfo = copy(visibility = __v)
    def getName: String = name.getOrElse("")
    def clearName: DiscoveryInfo = copy(name = None)
    def withName(__v: String): DiscoveryInfo = copy(name = Some(__v))
    def getEnvironment: String = environment.getOrElse("")
    def clearEnvironment: DiscoveryInfo = copy(environment = None)
    def withEnvironment(__v: String): DiscoveryInfo = copy(environment = Some(__v))
    def getLocation: String = location.getOrElse("")
    def clearLocation: DiscoveryInfo = copy(location = None)
    def withLocation(__v: String): DiscoveryInfo = copy(location = Some(__v))
    def getVersion: String = version.getOrElse("")
    def clearVersion: DiscoveryInfo = copy(version = None)
    def withVersion(__v: String): DiscoveryInfo = copy(version = Some(__v))
    def getPorts: org.apache.mesos.v1.mesos.Ports = ports.getOrElse(org.apache.mesos.v1.mesos.Ports.defaultInstance)
    def clearPorts: DiscoveryInfo = copy(ports = None)
    def withPorts(__v: org.apache.mesos.v1.mesos.Ports): DiscoveryInfo = copy(ports = Some(__v))
    def getLabels: org.apache.mesos.v1.mesos.Labels = labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)
    def clearLabels: DiscoveryInfo = copy(labels = None)
    def withLabels(__v: org.apache.mesos.v1.mesos.Labels): DiscoveryInfo = copy(labels = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => visibility.javaValueDescriptor
        case 2 => name.orNull
        case 3 => environment.orNull
        case 4 => location.orNull
        case 5 => version.orNull
        case 6 => ports.orNull
        case 7 => labels.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(visibility.scalaValueDescriptor)
        case 2 => name.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => environment.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => location.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => version.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => ports.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => labels.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.DiscoveryInfo
}

object DiscoveryInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.DiscoveryInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.DiscoveryInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.DiscoveryInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.DiscoveryInfo(
      org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Ports]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Labels]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.DiscoveryInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.DiscoveryInfo(
        org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Ports]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Labels]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(67)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(67)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 6 => __out = org.apache.mesos.v1.mesos.Ports
      case 7 => __out = org.apache.mesos.v1.mesos.Labels
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility
    }
  }
  lazy val defaultInstance = org.apache.mesos.v1.mesos.DiscoveryInfo(
    visibility = org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility.FRAMEWORK
  )
  sealed trait Visibility extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Visibility
    def isFramework: Boolean = false
    def isCluster: Boolean = false
    def isExternal: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Visibility] = org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility
  }
  
  object Visibility extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Visibility] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Visibility] = this
    @SerialVersionUID(0L)
    case object FRAMEWORK extends Visibility {
      val value = 0
      val index = 0
      val name = "FRAMEWORK"
      override def isFramework: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object CLUSTER extends Visibility {
      val value = 1
      val index = 1
      val name = "CLUSTER"
      override def isCluster: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object EXTERNAL extends Visibility {
      val value = 2
      val index = 2
      val name = "EXTERNAL"
      override def isExternal: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Visibility with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(FRAMEWORK, CLUSTER, EXTERNAL)
    def fromValue(value: Int): Visibility = value match {
      case 0 => FRAMEWORK
      case 1 => CLUSTER
      case 2 => EXTERNAL
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.DiscoveryInfo.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.DiscoveryInfo.scalaDescriptor.enums(0)
  }
  implicit class DiscoveryInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.DiscoveryInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.DiscoveryInfo](_l) {
    def visibility: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.DiscoveryInfo.Visibility] = field(_.visibility)((c_, f_) => c_.copy(visibility = f_))
    def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getName)((c_, f_) => c_.copy(name = Some(f_)))
    def optionalName: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def environment: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getEnvironment)((c_, f_) => c_.copy(environment = Some(f_)))
    def optionalEnvironment: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.environment)((c_, f_) => c_.copy(environment = f_))
    def location: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getLocation)((c_, f_) => c_.copy(location = Some(f_)))
    def optionalLocation: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.location)((c_, f_) => c_.copy(location = f_))
    def version: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getVersion)((c_, f_) => c_.copy(version = Some(f_)))
    def optionalVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def ports: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Ports] = field(_.getPorts)((c_, f_) => c_.copy(ports = Some(f_)))
    def optionalPorts: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Ports]] = field(_.ports)((c_, f_) => c_.copy(ports = f_))
    def labels: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Labels] = field(_.getLabels)((c_, f_) => c_.copy(labels = Some(f_)))
    def optionalLabels: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Labels]] = field(_.labels)((c_, f_) => c_.copy(labels = f_))
  }
  final val VISIBILITY_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val ENVIRONMENT_FIELD_NUMBER = 3
  final val LOCATION_FIELD_NUMBER = 4
  final val VERSION_FIELD_NUMBER = 5
  final val PORTS_FIELD_NUMBER = 6
  final val LABELS_FIELD_NUMBER = 7
}
