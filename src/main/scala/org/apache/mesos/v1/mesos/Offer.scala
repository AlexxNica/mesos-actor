// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes some resources available on an agent. An offer only
  * contains resources from a single agent.
  *
  * @param url
  *   URL for reaching the agent running on the host.
  * @param unavailability
  *   Signifies that the resources in this Offer may be unavailable during
  *   the given interval.  Any tasks launched using these resources may be
  *   killed when the interval arrives.  For example, these resources may be
  *   part of a planned maintenance schedule.
  *  
  *   This field only provides information about a planned unavailability.
  *   The unavailability interval may not necessarily start at exactly this
  *   interval, nor last for exactly the duration of this interval.
  *   The unavailability may also be forever!  See comments in
  *   `Unavailability` for more details.
  * @param allocationInfo
  *   An offer represents resources allocated to *one* of the
  *   roles managed by the scheduler. (Therefore, each
  *   `Offer.resources[i].allocation_info` will match the
  *   top level `Offer.allocation_info`).
  */
@SerialVersionUID(0L)
final case class Offer(
    id: org.apache.mesos.v1.mesos.OfferID,
    frameworkId: org.apache.mesos.v1.mesos.FrameworkID,
    agentId: org.apache.mesos.v1.mesos.AgentID,
    hostname: String,
    url: scala.Option[org.apache.mesos.v1.mesos.URL] = None,
    resources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty,
    attributes: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Attribute] = _root_.scala.collection.Seq.empty,
    executorIds: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ExecutorID] = _root_.scala.collection.Seq.empty,
    unavailability: scala.Option[org.apache.mesos.v1.mesos.Unavailability] = None,
    allocationInfo: scala.Option[org.apache.mesos.v1.mesos.Resource.AllocationInfo] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Offer] with com.trueaccord.lenses.Updatable[Offer] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(id.serializedSize) + id.serializedSize
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(frameworkId.serializedSize) + frameworkId.serializedSize
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agentId.serializedSize) + agentId.serializedSize
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, hostname)
      if (url.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(url.get.serializedSize) + url.get.serializedSize }
      resources.foreach(resources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(resources.serializedSize) + resources.serializedSize)
      attributes.foreach(attributes => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(attributes.serializedSize) + attributes.serializedSize)
      executorIds.foreach(executorIds => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(executorIds.serializedSize) + executorIds.serializedSize)
      if (unavailability.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(unavailability.get.serializedSize) + unavailability.get.serializedSize }
      if (allocationInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(allocationInfo.get.serializedSize) + allocationInfo.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeTag(1, 2)
      _output__.writeUInt32NoTag(id.serializedSize)
      id.writeTo(_output__)
      _output__.writeTag(2, 2)
      _output__.writeUInt32NoTag(frameworkId.serializedSize)
      frameworkId.writeTo(_output__)
      _output__.writeTag(3, 2)
      _output__.writeUInt32NoTag(agentId.serializedSize)
      agentId.writeTo(_output__)
      _output__.writeString(4, hostname)
      resources.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      executorIds.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      attributes.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      url.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      unavailability.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      allocationInfo.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Offer = {
      var __id = this.id
      var __frameworkId = this.frameworkId
      var __agentId = this.agentId
      var __hostname = this.hostname
      var __url = this.url
      val __resources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.resources)
      val __attributes = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Attribute] ++= this.attributes)
      val __executorIds = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.ExecutorID] ++= this.executorIds)
      var __unavailability = this.unavailability
      var __allocationInfo = this.allocationInfo
      var __requiredFields0: Long = 0xfL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __id)
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __frameworkId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __frameworkId)
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __agentId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __agentId)
            __requiredFields0 &= 0xfffffffffffffffbL
          case 34 =>
            __hostname = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 66 =>
            __url = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __url.getOrElse(org.apache.mesos.v1.mesos.URL.defaultInstance)))
          case 42 =>
            __resources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
          case 58 =>
            __attributes += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Attribute.defaultInstance)
          case 50 =>
            __executorIds += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.ExecutorID.defaultInstance)
          case 74 =>
            __unavailability = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __unavailability.getOrElse(org.apache.mesos.v1.mesos.Unavailability.defaultInstance)))
          case 82 =>
            __allocationInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __allocationInfo.getOrElse(org.apache.mesos.v1.mesos.Resource.AllocationInfo.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.Offer(
          id = __id,
          frameworkId = __frameworkId,
          agentId = __agentId,
          hostname = __hostname,
          url = __url,
          resources = __resources.result(),
          attributes = __attributes.result(),
          executorIds = __executorIds.result(),
          unavailability = __unavailability,
          allocationInfo = __allocationInfo
      )
    }
    def withId(__v: org.apache.mesos.v1.mesos.OfferID): Offer = copy(id = __v)
    def withFrameworkId(__v: org.apache.mesos.v1.mesos.FrameworkID): Offer = copy(frameworkId = __v)
    def withAgentId(__v: org.apache.mesos.v1.mesos.AgentID): Offer = copy(agentId = __v)
    def withHostname(__v: String): Offer = copy(hostname = __v)
    def getUrl: org.apache.mesos.v1.mesos.URL = url.getOrElse(org.apache.mesos.v1.mesos.URL.defaultInstance)
    def clearUrl: Offer = copy(url = None)
    def withUrl(__v: org.apache.mesos.v1.mesos.URL): Offer = copy(url = Some(__v))
    def clearResources = copy(resources = _root_.scala.collection.Seq.empty)
    def addResources(__vs: org.apache.mesos.v1.mesos.Resource*): Offer = addAllResources(__vs)
    def addAllResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Offer = copy(resources = resources ++ __vs)
    def withResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Offer = copy(resources = __v)
    def clearAttributes = copy(attributes = _root_.scala.collection.Seq.empty)
    def addAttributes(__vs: org.apache.mesos.v1.mesos.Attribute*): Offer = addAllAttributes(__vs)
    def addAllAttributes(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Attribute]): Offer = copy(attributes = attributes ++ __vs)
    def withAttributes(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Attribute]): Offer = copy(attributes = __v)
    def clearExecutorIds = copy(executorIds = _root_.scala.collection.Seq.empty)
    def addExecutorIds(__vs: org.apache.mesos.v1.mesos.ExecutorID*): Offer = addAllExecutorIds(__vs)
    def addAllExecutorIds(__vs: TraversableOnce[org.apache.mesos.v1.mesos.ExecutorID]): Offer = copy(executorIds = executorIds ++ __vs)
    def withExecutorIds(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ExecutorID]): Offer = copy(executorIds = __v)
    def getUnavailability: org.apache.mesos.v1.mesos.Unavailability = unavailability.getOrElse(org.apache.mesos.v1.mesos.Unavailability.defaultInstance)
    def clearUnavailability: Offer = copy(unavailability = None)
    def withUnavailability(__v: org.apache.mesos.v1.mesos.Unavailability): Offer = copy(unavailability = Some(__v))
    def getAllocationInfo: org.apache.mesos.v1.mesos.Resource.AllocationInfo = allocationInfo.getOrElse(org.apache.mesos.v1.mesos.Resource.AllocationInfo.defaultInstance)
    def clearAllocationInfo: Offer = copy(allocationInfo = None)
    def withAllocationInfo(__v: org.apache.mesos.v1.mesos.Resource.AllocationInfo): Offer = copy(allocationInfo = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id
        case 2 => frameworkId
        case 3 => agentId
        case 4 => hostname
        case 8 => url.orNull
        case 5 => resources
        case 7 => attributes
        case 6 => executorIds
        case 9 => unavailability.orNull
        case 10 => allocationInfo.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => id.toPMessage
        case 2 => frameworkId.toPMessage
        case 3 => agentId.toPMessage
        case 4 => _root_.scalapb.descriptors.PString(hostname)
        case 8 => url.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PRepeated(resources.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 7 => _root_.scalapb.descriptors.PRepeated(attributes.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 6 => _root_.scalapb.descriptors.PRepeated(executorIds.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 9 => unavailability.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => allocationInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.Offer
}

object Offer extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Offer = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.Offer(
      __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.OfferID],
      __fieldsMap(__fields.get(1)).asInstanceOf[org.apache.mesos.v1.mesos.FrameworkID],
      __fieldsMap(__fields.get(2)).asInstanceOf[org.apache.mesos.v1.mesos.AgentID],
      __fieldsMap(__fields.get(3)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.URL]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Attribute]],
      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ExecutorID]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Unavailability]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Resource.AllocationInfo]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Offer] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.Offer(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.OfferID],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[org.apache.mesos.v1.mesos.FrameworkID],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[org.apache.mesos.v1.mesos.AgentID],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.URL]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Attribute]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ExecutorID]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Unavailability]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Resource.AllocationInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(37)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(37)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = org.apache.mesos.v1.mesos.OfferID
      case 2 => __out = org.apache.mesos.v1.mesos.FrameworkID
      case 3 => __out = org.apache.mesos.v1.mesos.AgentID
      case 8 => __out = org.apache.mesos.v1.mesos.URL
      case 5 => __out = org.apache.mesos.v1.mesos.Resource
      case 7 => __out = org.apache.mesos.v1.mesos.Attribute
      case 6 => __out = org.apache.mesos.v1.mesos.ExecutorID
      case 9 => __out = org.apache.mesos.v1.mesos.Unavailability
      case 10 => __out = org.apache.mesos.v1.mesos.Resource.AllocationInfo
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.Offer(
    id = org.apache.mesos.v1.mesos.OfferID.defaultInstance,
    frameworkId = org.apache.mesos.v1.mesos.FrameworkID.defaultInstance,
    agentId = org.apache.mesos.v1.mesos.AgentID.defaultInstance,
    hostname = ""
  )
  /** Defines an operation that can be performed against offers.
    */
  @SerialVersionUID(0L)
  final case class Operation(
      `type`: scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Type] = None,
      launch: scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Launch] = None,
      launchGroup: scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup] = None,
      reserve: scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Reserve] = None,
      unreserve: scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Unreserve] = None,
      create: scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Create] = None,
      destroy: scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Destroy] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Operation] with com.trueaccord.lenses.Updatable[Operation] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
        if (launch.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(launch.get.serializedSize) + launch.get.serializedSize }
        if (launchGroup.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(launchGroup.get.serializedSize) + launchGroup.get.serializedSize }
        if (reserve.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(reserve.get.serializedSize) + reserve.get.serializedSize }
        if (unreserve.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(unreserve.get.serializedSize) + unreserve.get.serializedSize }
        if (create.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(create.get.serializedSize) + create.get.serializedSize }
        if (destroy.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(destroy.get.serializedSize) + destroy.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        `type`.foreach { __v =>
          _output__.writeEnum(1, __v.value)
        };
        launch.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        reserve.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        unreserve.foreach { __v =>
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        create.foreach { __v =>
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        destroy.foreach { __v =>
          _output__.writeTag(6, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        launchGroup.foreach { __v =>
          _output__.writeTag(7, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Offer.Operation = {
        var __type = this.`type`
        var __launch = this.launch
        var __launchGroup = this.launchGroup
        var __reserve = this.reserve
        var __unreserve = this.unreserve
        var __create = this.create
        var __destroy = this.destroy
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __type = Some(org.apache.mesos.v1.mesos.Offer.Operation.Type.fromValue(_input__.readEnum()))
            case 18 =>
              __launch = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __launch.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.Launch.defaultInstance)))
            case 58 =>
              __launchGroup = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __launchGroup.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup.defaultInstance)))
            case 26 =>
              __reserve = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __reserve.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.Reserve.defaultInstance)))
            case 34 =>
              __unreserve = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __unreserve.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.Unreserve.defaultInstance)))
            case 42 =>
              __create = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __create.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.Create.defaultInstance)))
            case 50 =>
              __destroy = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __destroy.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.Destroy.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.Offer.Operation(
            `type` = __type,
            launch = __launch,
            launchGroup = __launchGroup,
            reserve = __reserve,
            unreserve = __unreserve,
            create = __create,
            destroy = __destroy
        )
      }
      def getType: org.apache.mesos.v1.mesos.Offer.Operation.Type = `type`.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.Type.UNKNOWN)
      def clearType: Operation = copy(`type` = None)
      def withType(__v: org.apache.mesos.v1.mesos.Offer.Operation.Type): Operation = copy(`type` = Some(__v))
      def getLaunch: org.apache.mesos.v1.mesos.Offer.Operation.Launch = launch.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.Launch.defaultInstance)
      def clearLaunch: Operation = copy(launch = None)
      def withLaunch(__v: org.apache.mesos.v1.mesos.Offer.Operation.Launch): Operation = copy(launch = Some(__v))
      def getLaunchGroup: org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup = launchGroup.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup.defaultInstance)
      def clearLaunchGroup: Operation = copy(launchGroup = None)
      def withLaunchGroup(__v: org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup): Operation = copy(launchGroup = Some(__v))
      def getReserve: org.apache.mesos.v1.mesos.Offer.Operation.Reserve = reserve.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.Reserve.defaultInstance)
      def clearReserve: Operation = copy(reserve = None)
      def withReserve(__v: org.apache.mesos.v1.mesos.Offer.Operation.Reserve): Operation = copy(reserve = Some(__v))
      def getUnreserve: org.apache.mesos.v1.mesos.Offer.Operation.Unreserve = unreserve.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.Unreserve.defaultInstance)
      def clearUnreserve: Operation = copy(unreserve = None)
      def withUnreserve(__v: org.apache.mesos.v1.mesos.Offer.Operation.Unreserve): Operation = copy(unreserve = Some(__v))
      def getCreate: org.apache.mesos.v1.mesos.Offer.Operation.Create = create.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.Create.defaultInstance)
      def clearCreate: Operation = copy(create = None)
      def withCreate(__v: org.apache.mesos.v1.mesos.Offer.Operation.Create): Operation = copy(create = Some(__v))
      def getDestroy: org.apache.mesos.v1.mesos.Offer.Operation.Destroy = destroy.getOrElse(org.apache.mesos.v1.mesos.Offer.Operation.Destroy.defaultInstance)
      def clearDestroy: Operation = copy(destroy = None)
      def withDestroy(__v: org.apache.mesos.v1.mesos.Offer.Operation.Destroy): Operation = copy(destroy = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => `type`.map(_.javaValueDescriptor).orNull
          case 2 => launch.orNull
          case 7 => launchGroup.orNull
          case 3 => reserve.orNull
          case 4 => unreserve.orNull
          case 5 => create.orNull
          case 6 => destroy.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => launch.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 7 => launchGroup.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => reserve.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => unreserve.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => create.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 6 => destroy.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.Offer.Operation
  }
  
  object Operation extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Offer.Operation = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.Offer.Operation(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.Offer.Operation.Type.fromValue(__e.getNumber)),
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Launch]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Reserve]],
        __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Unreserve]],
        __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Create]],
        __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Destroy]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Offer.Operation] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.Offer.Operation(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.Offer.Operation.Type.fromValue(__e.number)),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Launch]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Reserve]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Unreserve]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Create]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Destroy]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = org.apache.mesos.v1.mesos.Offer.Operation.Launch
        case 7 => __out = org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup
        case 3 => __out = org.apache.mesos.v1.mesos.Offer.Operation.Reserve
        case 4 => __out = org.apache.mesos.v1.mesos.Offer.Operation.Unreserve
        case 5 => __out = org.apache.mesos.v1.mesos.Offer.Operation.Create
        case 6 => __out = org.apache.mesos.v1.mesos.Offer.Operation.Destroy
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => org.apache.mesos.v1.mesos.Offer.Operation.Type
      }
    }
    lazy val defaultInstance = org.apache.mesos.v1.mesos.Offer.Operation(
    )
    sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
      type EnumType = Type
      def isUnknown: Boolean = false
      def isLaunch: Boolean = false
      def isLaunchGroup: Boolean = false
      def isReserve: Boolean = false
      def isUnreserve: Boolean = false
      def isCreate: Boolean = false
      def isDestroy: Boolean = false
      def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = org.apache.mesos.v1.mesos.Offer.Operation.Type
    }
    
    object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
      implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
      @SerialVersionUID(0L)
      case object UNKNOWN extends Type {
        val value = 0
        val index = 0
        val name = "UNKNOWN"
        override def isUnknown: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object LAUNCH extends Type {
        val value = 1
        val index = 1
        val name = "LAUNCH"
        override def isLaunch: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object LAUNCH_GROUP extends Type {
        val value = 6
        val index = 2
        val name = "LAUNCH_GROUP"
        override def isLaunchGroup: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RESERVE extends Type {
        val value = 2
        val index = 3
        val name = "RESERVE"
        override def isReserve: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object UNRESERVE extends Type {
        val value = 3
        val index = 4
        val name = "UNRESERVE"
        override def isUnreserve: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object CREATE extends Type {
        val value = 4
        val index = 5
        val name = "CREATE"
        override def isCreate: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object DESTROY extends Type {
        val value = 5
        val index = 6
        val name = "DESTROY"
        override def isDestroy: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
      
      lazy val values = scala.collection.Seq(UNKNOWN, LAUNCH, LAUNCH_GROUP, RESERVE, UNRESERVE, CREATE, DESTROY)
      def fromValue(value: Int): Type = value match {
        case 0 => UNKNOWN
        case 1 => LAUNCH
        case 2 => RESERVE
        case 3 => UNRESERVE
        case 4 => CREATE
        case 5 => DESTROY
        case 6 => LAUNCH_GROUP
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.Offer.Operation.javaDescriptor.getEnumTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.Offer.Operation.scalaDescriptor.enums(0)
    }
    /** TODO(vinod): Deprecate this in favor of `LaunchGroup` below.
      */
    @SerialVersionUID(0L)
    final case class Launch(
        taskInfos: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.TaskInfo] = _root_.scala.collection.Seq.empty
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Launch] with com.trueaccord.lenses.Updatable[Launch] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          taskInfos.foreach(taskInfos => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(taskInfos.serializedSize) + taskInfos.serializedSize)
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          taskInfos.foreach { __v =>
            _output__.writeTag(1, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Offer.Operation.Launch = {
          val __taskInfos = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.TaskInfo] ++= this.taskInfos)
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __taskInfos += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.TaskInfo.defaultInstance)
              case tag => _input__.skipField(tag)
            }
          }
          org.apache.mesos.v1.mesos.Offer.Operation.Launch(
              taskInfos = __taskInfos.result()
          )
        }
        def clearTaskInfos = copy(taskInfos = _root_.scala.collection.Seq.empty)
        def addTaskInfos(__vs: org.apache.mesos.v1.mesos.TaskInfo*): Launch = addAllTaskInfos(__vs)
        def addAllTaskInfos(__vs: TraversableOnce[org.apache.mesos.v1.mesos.TaskInfo]): Launch = copy(taskInfos = taskInfos ++ __vs)
        def withTaskInfos(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.TaskInfo]): Launch = copy(taskInfos = __v)
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => taskInfos
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PRepeated(taskInfos.map(_.toPMessage)(_root_.scala.collection.breakOut))
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = org.apache.mesos.v1.mesos.Offer.Operation.Launch
    }
    
    object Launch extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation.Launch] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation.Launch] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Offer.Operation.Launch = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        org.apache.mesos.v1.mesos.Offer.Operation.Launch(
          __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.TaskInfo]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Offer.Operation.Launch] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          org.apache.mesos.v1.mesos.Offer.Operation.Launch(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.TaskInfo]]).getOrElse(_root_.scala.collection.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.Operation.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.Operation.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => __out = org.apache.mesos.v1.mesos.TaskInfo
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = org.apache.mesos.v1.mesos.Offer.Operation.Launch(
      )
      implicit class LaunchLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Launch]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Launch](_l) {
        def taskInfos: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.TaskInfo]] = field(_.taskInfos)((c_, f_) => c_.copy(taskInfos = f_))
      }
      final val TASK_INFOS_FIELD_NUMBER = 1
    }
    
    /** Unlike `Launch` above, all the tasks in a `task_group` are
      * atomically delivered to an executor.
      *
      * `NetworkInfo` set on executor will be shared by all tasks in
      * the task group.
      *
      * TODO(vinod): Any volumes set on executor could be used by a
      * task by explicitly setting `Volume.source` in its resources.
      */
    @SerialVersionUID(0L)
    final case class LaunchGroup(
        executor: org.apache.mesos.v1.mesos.ExecutorInfo,
        taskGroup: org.apache.mesos.v1.mesos.TaskGroupInfo
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[LaunchGroup] with com.trueaccord.lenses.Updatable[LaunchGroup] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(executor.serializedSize) + executor.serializedSize
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(taskGroup.serializedSize) + taskGroup.serializedSize
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(executor.serializedSize)
          executor.writeTo(_output__)
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(taskGroup.serializedSize)
          taskGroup.writeTo(_output__)
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup = {
          var __executor = this.executor
          var __taskGroup = this.taskGroup
          var __requiredFields0: Long = 0x3L
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __executor = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __executor)
                __requiredFields0 &= 0xfffffffffffffffeL
              case 18 =>
                __taskGroup = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __taskGroup)
                __requiredFields0 &= 0xfffffffffffffffdL
              case tag => _input__.skipField(tag)
            }
          }
          if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
          org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup(
              executor = __executor,
              taskGroup = __taskGroup
          )
        }
        def withExecutor(__v: org.apache.mesos.v1.mesos.ExecutorInfo): LaunchGroup = copy(executor = __v)
        def withTaskGroup(__v: org.apache.mesos.v1.mesos.TaskGroupInfo): LaunchGroup = copy(taskGroup = __v)
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => executor
            case 2 => taskGroup
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => executor.toPMessage
            case 2 => taskGroup.toPMessage
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup
    }
    
    object LaunchGroup extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup(
          __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.ExecutorInfo],
          __fieldsMap(__fields.get(1)).asInstanceOf[org.apache.mesos.v1.mesos.TaskGroupInfo]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ExecutorInfo],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[org.apache.mesos.v1.mesos.TaskGroupInfo]
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.Operation.javaDescriptor.getNestedTypes.get(1)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.Operation.scalaDescriptor.nestedMessages(1)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => __out = org.apache.mesos.v1.mesos.ExecutorInfo
          case 2 => __out = org.apache.mesos.v1.mesos.TaskGroupInfo
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup(
        executor = org.apache.mesos.v1.mesos.ExecutorInfo.defaultInstance,
        taskGroup = org.apache.mesos.v1.mesos.TaskGroupInfo.defaultInstance
      )
      implicit class LaunchGroupLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup](_l) {
        def executor: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ExecutorInfo] = field(_.executor)((c_, f_) => c_.copy(executor = f_))
        def taskGroup: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TaskGroupInfo] = field(_.taskGroup)((c_, f_) => c_.copy(taskGroup = f_))
      }
      final val EXECUTOR_FIELD_NUMBER = 1
      final val TASK_GROUP_FIELD_NUMBER = 2
    }
    
    @SerialVersionUID(0L)
    final case class Reserve(
        resources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Reserve] with com.trueaccord.lenses.Updatable[Reserve] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          resources.foreach(resources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(resources.serializedSize) + resources.serializedSize)
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          resources.foreach { __v =>
            _output__.writeTag(1, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Offer.Operation.Reserve = {
          val __resources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.resources)
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __resources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
              case tag => _input__.skipField(tag)
            }
          }
          org.apache.mesos.v1.mesos.Offer.Operation.Reserve(
              resources = __resources.result()
          )
        }
        def clearResources = copy(resources = _root_.scala.collection.Seq.empty)
        def addResources(__vs: org.apache.mesos.v1.mesos.Resource*): Reserve = addAllResources(__vs)
        def addAllResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Reserve = copy(resources = resources ++ __vs)
        def withResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Reserve = copy(resources = __v)
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => resources
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PRepeated(resources.map(_.toPMessage)(_root_.scala.collection.breakOut))
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = org.apache.mesos.v1.mesos.Offer.Operation.Reserve
    }
    
    object Reserve extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation.Reserve] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation.Reserve] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Offer.Operation.Reserve = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        org.apache.mesos.v1.mesos.Offer.Operation.Reserve(
          __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Offer.Operation.Reserve] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          org.apache.mesos.v1.mesos.Offer.Operation.Reserve(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.Operation.javaDescriptor.getNestedTypes.get(2)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.Operation.scalaDescriptor.nestedMessages(2)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => __out = org.apache.mesos.v1.mesos.Resource
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = org.apache.mesos.v1.mesos.Offer.Operation.Reserve(
      )
      implicit class ReserveLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Reserve]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Reserve](_l) {
        def resources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.resources)((c_, f_) => c_.copy(resources = f_))
      }
      final val RESOURCES_FIELD_NUMBER = 1
    }
    
    @SerialVersionUID(0L)
    final case class Unreserve(
        resources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Unreserve] with com.trueaccord.lenses.Updatable[Unreserve] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          resources.foreach(resources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(resources.serializedSize) + resources.serializedSize)
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          resources.foreach { __v =>
            _output__.writeTag(1, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Offer.Operation.Unreserve = {
          val __resources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.resources)
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __resources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
              case tag => _input__.skipField(tag)
            }
          }
          org.apache.mesos.v1.mesos.Offer.Operation.Unreserve(
              resources = __resources.result()
          )
        }
        def clearResources = copy(resources = _root_.scala.collection.Seq.empty)
        def addResources(__vs: org.apache.mesos.v1.mesos.Resource*): Unreserve = addAllResources(__vs)
        def addAllResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Unreserve = copy(resources = resources ++ __vs)
        def withResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Unreserve = copy(resources = __v)
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => resources
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PRepeated(resources.map(_.toPMessage)(_root_.scala.collection.breakOut))
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = org.apache.mesos.v1.mesos.Offer.Operation.Unreserve
    }
    
    object Unreserve extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation.Unreserve] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation.Unreserve] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Offer.Operation.Unreserve = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        org.apache.mesos.v1.mesos.Offer.Operation.Unreserve(
          __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Offer.Operation.Unreserve] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          org.apache.mesos.v1.mesos.Offer.Operation.Unreserve(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.Operation.javaDescriptor.getNestedTypes.get(3)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.Operation.scalaDescriptor.nestedMessages(3)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => __out = org.apache.mesos.v1.mesos.Resource
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = org.apache.mesos.v1.mesos.Offer.Operation.Unreserve(
      )
      implicit class UnreserveLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Unreserve]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Unreserve](_l) {
        def resources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.resources)((c_, f_) => c_.copy(resources = f_))
      }
      final val RESOURCES_FIELD_NUMBER = 1
    }
    
    @SerialVersionUID(0L)
    final case class Create(
        volumes: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Create] with com.trueaccord.lenses.Updatable[Create] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          volumes.foreach(volumes => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(volumes.serializedSize) + volumes.serializedSize)
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          volumes.foreach { __v =>
            _output__.writeTag(1, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Offer.Operation.Create = {
          val __volumes = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.volumes)
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __volumes += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
              case tag => _input__.skipField(tag)
            }
          }
          org.apache.mesos.v1.mesos.Offer.Operation.Create(
              volumes = __volumes.result()
          )
        }
        def clearVolumes = copy(volumes = _root_.scala.collection.Seq.empty)
        def addVolumes(__vs: org.apache.mesos.v1.mesos.Resource*): Create = addAllVolumes(__vs)
        def addAllVolumes(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Create = copy(volumes = volumes ++ __vs)
        def withVolumes(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Create = copy(volumes = __v)
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => volumes
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PRepeated(volumes.map(_.toPMessage)(_root_.scala.collection.breakOut))
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = org.apache.mesos.v1.mesos.Offer.Operation.Create
    }
    
    object Create extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation.Create] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation.Create] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Offer.Operation.Create = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        org.apache.mesos.v1.mesos.Offer.Operation.Create(
          __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Offer.Operation.Create] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          org.apache.mesos.v1.mesos.Offer.Operation.Create(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.Operation.javaDescriptor.getNestedTypes.get(4)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.Operation.scalaDescriptor.nestedMessages(4)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => __out = org.apache.mesos.v1.mesos.Resource
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = org.apache.mesos.v1.mesos.Offer.Operation.Create(
      )
      implicit class CreateLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Create]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Create](_l) {
        def volumes: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.volumes)((c_, f_) => c_.copy(volumes = f_))
      }
      final val VOLUMES_FIELD_NUMBER = 1
    }
    
    @SerialVersionUID(0L)
    final case class Destroy(
        volumes: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Destroy] with com.trueaccord.lenses.Updatable[Destroy] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          volumes.foreach(volumes => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(volumes.serializedSize) + volumes.serializedSize)
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          volumes.foreach { __v =>
            _output__.writeTag(1, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Offer.Operation.Destroy = {
          val __volumes = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.volumes)
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __volumes += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
              case tag => _input__.skipField(tag)
            }
          }
          org.apache.mesos.v1.mesos.Offer.Operation.Destroy(
              volumes = __volumes.result()
          )
        }
        def clearVolumes = copy(volumes = _root_.scala.collection.Seq.empty)
        def addVolumes(__vs: org.apache.mesos.v1.mesos.Resource*): Destroy = addAllVolumes(__vs)
        def addAllVolumes(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Destroy = copy(volumes = volumes ++ __vs)
        def withVolumes(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Destroy = copy(volumes = __v)
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => volumes
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PRepeated(volumes.map(_.toPMessage)(_root_.scala.collection.breakOut))
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = org.apache.mesos.v1.mesos.Offer.Operation.Destroy
    }
    
    object Destroy extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation.Destroy] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Offer.Operation.Destroy] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Offer.Operation.Destroy = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        org.apache.mesos.v1.mesos.Offer.Operation.Destroy(
          __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Offer.Operation.Destroy] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          org.apache.mesos.v1.mesos.Offer.Operation.Destroy(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.Operation.javaDescriptor.getNestedTypes.get(5)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.Offer.Operation.scalaDescriptor.nestedMessages(5)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => __out = org.apache.mesos.v1.mesos.Resource
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = org.apache.mesos.v1.mesos.Offer.Operation.Destroy(
      )
      implicit class DestroyLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Destroy]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Destroy](_l) {
        def volumes: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.volumes)((c_, f_) => c_.copy(volumes = f_))
      }
      final val VOLUMES_FIELD_NUMBER = 1
    }
    
    implicit class OperationLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation](_l) {
      def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
      def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def launch: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Launch] = field(_.getLaunch)((c_, f_) => c_.copy(launch = Some(f_)))
      def optionalLaunch: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Launch]] = field(_.launch)((c_, f_) => c_.copy(launch = f_))
      def launchGroup: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup] = field(_.getLaunchGroup)((c_, f_) => c_.copy(launchGroup = Some(f_)))
      def optionalLaunchGroup: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.LaunchGroup]] = field(_.launchGroup)((c_, f_) => c_.copy(launchGroup = f_))
      def reserve: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Reserve] = field(_.getReserve)((c_, f_) => c_.copy(reserve = Some(f_)))
      def optionalReserve: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Reserve]] = field(_.reserve)((c_, f_) => c_.copy(reserve = f_))
      def unreserve: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Unreserve] = field(_.getUnreserve)((c_, f_) => c_.copy(unreserve = Some(f_)))
      def optionalUnreserve: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Unreserve]] = field(_.unreserve)((c_, f_) => c_.copy(unreserve = f_))
      def create: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Create] = field(_.getCreate)((c_, f_) => c_.copy(create = Some(f_)))
      def optionalCreate: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Create]] = field(_.create)((c_, f_) => c_.copy(create = f_))
      def destroy: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer.Operation.Destroy] = field(_.getDestroy)((c_, f_) => c_.copy(destroy = Some(f_)))
      def optionalDestroy: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Offer.Operation.Destroy]] = field(_.destroy)((c_, f_) => c_.copy(destroy = f_))
    }
    final val TYPE_FIELD_NUMBER = 1
    final val LAUNCH_FIELD_NUMBER = 2
    final val LAUNCH_GROUP_FIELD_NUMBER = 7
    final val RESERVE_FIELD_NUMBER = 3
    final val UNRESERVE_FIELD_NUMBER = 4
    final val CREATE_FIELD_NUMBER = 5
    final val DESTROY_FIELD_NUMBER = 6
  }
  
  implicit class OfferLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Offer]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Offer](_l) {
    def id: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.OfferID] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def frameworkId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.FrameworkID] = field(_.frameworkId)((c_, f_) => c_.copy(frameworkId = f_))
    def agentId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.AgentID] = field(_.agentId)((c_, f_) => c_.copy(agentId = f_))
    def hostname: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.hostname)((c_, f_) => c_.copy(hostname = f_))
    def url: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.URL] = field(_.getUrl)((c_, f_) => c_.copy(url = Some(f_)))
    def optionalUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.URL]] = field(_.url)((c_, f_) => c_.copy(url = f_))
    def resources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.resources)((c_, f_) => c_.copy(resources = f_))
    def attributes: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Attribute]] = field(_.attributes)((c_, f_) => c_.copy(attributes = f_))
    def executorIds: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.ExecutorID]] = field(_.executorIds)((c_, f_) => c_.copy(executorIds = f_))
    def unavailability: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Unavailability] = field(_.getUnavailability)((c_, f_) => c_.copy(unavailability = Some(f_)))
    def optionalUnavailability: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Unavailability]] = field(_.unavailability)((c_, f_) => c_.copy(unavailability = f_))
    def allocationInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Resource.AllocationInfo] = field(_.getAllocationInfo)((c_, f_) => c_.copy(allocationInfo = Some(f_)))
    def optionalAllocationInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Resource.AllocationInfo]] = field(_.allocationInfo)((c_, f_) => c_.copy(allocationInfo = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val FRAMEWORK_ID_FIELD_NUMBER = 2
  final val AGENT_ID_FIELD_NUMBER = 3
  final val HOSTNAME_FIELD_NUMBER = 4
  final val URL_FIELD_NUMBER = 8
  final val RESOURCES_FIELD_NUMBER = 5
  final val ATTRIBUTES_FIELD_NUMBER = 7
  final val EXECUTOR_IDS_FIELD_NUMBER = 6
  final val UNAVAILABILITY_FIELD_NUMBER = 9
  final val ALLOCATION_INFO_FIELD_NUMBER = 10
}
