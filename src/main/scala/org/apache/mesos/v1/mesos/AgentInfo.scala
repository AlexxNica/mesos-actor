// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes an agent. Note that the 'id' field is only available
  * after an agent is registered with the master, and is made available
  * here to facilitate re-registration.
  */
@SerialVersionUID(0L)
final case class AgentInfo(
    hostname: String,
    port: scala.Option[Int] = None,
    resources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty,
    attributes: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Attribute] = _root_.scala.collection.Seq.empty,
    id: scala.Option[org.apache.mesos.v1.mesos.AgentID] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[AgentInfo] with com.trueaccord.lenses.Updatable[AgentInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, hostname)
      if (port.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, port.get) }
      resources.foreach(resources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(resources.serializedSize) + resources.serializedSize)
      attributes.foreach(attributes => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(attributes.serializedSize) + attributes.serializedSize)
      if (id.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(id.get.serializedSize) + id.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, hostname)
      resources.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      attributes.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      id.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      port.foreach { __v =>
        _output__.writeInt32(8, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.AgentInfo = {
      var __hostname = this.hostname
      var __port = this.port
      val __resources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.resources)
      val __attributes = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Attribute] ++= this.attributes)
      var __id = this.id
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __hostname = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 64 =>
            __port = Some(_input__.readInt32())
          case 26 =>
            __resources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
          case 42 =>
            __attributes += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Attribute.defaultInstance)
          case 50 =>
            __id = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __id.getOrElse(org.apache.mesos.v1.mesos.AgentID.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.AgentInfo(
          hostname = __hostname,
          port = __port,
          resources = __resources.result(),
          attributes = __attributes.result(),
          id = __id
      )
    }
    def withHostname(__v: String): AgentInfo = copy(hostname = __v)
    def getPort: Int = port.getOrElse(5051)
    def clearPort: AgentInfo = copy(port = None)
    def withPort(__v: Int): AgentInfo = copy(port = Some(__v))
    def clearResources = copy(resources = _root_.scala.collection.Seq.empty)
    def addResources(__vs: org.apache.mesos.v1.mesos.Resource*): AgentInfo = addAllResources(__vs)
    def addAllResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): AgentInfo = copy(resources = resources ++ __vs)
    def withResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): AgentInfo = copy(resources = __v)
    def clearAttributes = copy(attributes = _root_.scala.collection.Seq.empty)
    def addAttributes(__vs: org.apache.mesos.v1.mesos.Attribute*): AgentInfo = addAllAttributes(__vs)
    def addAllAttributes(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Attribute]): AgentInfo = copy(attributes = attributes ++ __vs)
    def withAttributes(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Attribute]): AgentInfo = copy(attributes = __v)
    def getId: org.apache.mesos.v1.mesos.AgentID = id.getOrElse(org.apache.mesos.v1.mesos.AgentID.defaultInstance)
    def clearId: AgentInfo = copy(id = None)
    def withId(__v: org.apache.mesos.v1.mesos.AgentID): AgentInfo = copy(id = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => hostname
        case 8 => port.orNull
        case 3 => resources
        case 5 => attributes
        case 6 => id.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(hostname)
        case 8 => port.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(resources.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 5 => _root_.scalapb.descriptors.PRepeated(attributes.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 6 => id.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.AgentInfo
}

object AgentInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.AgentInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.AgentInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.AgentInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.AgentInfo(
      __fieldsMap(__fields.get(0)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Attribute]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.AgentID]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.AgentInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.AgentInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Attribute]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.AgentID]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(21)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(21)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => __out = org.apache.mesos.v1.mesos.Resource
      case 5 => __out = org.apache.mesos.v1.mesos.Attribute
      case 6 => __out = org.apache.mesos.v1.mesos.AgentID
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.AgentInfo(
    hostname = ""
  )
  /** @param type
    *   Enum fields should be optional, see: MESOS-4997.
    */
  @SerialVersionUID(0L)
  final case class Capability(
      `type`: scala.Option[org.apache.mesos.v1.mesos.AgentInfo.Capability.Type] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Capability] with com.trueaccord.lenses.Updatable[Capability] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        `type`.foreach { __v =>
          _output__.writeEnum(1, __v.value)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.AgentInfo.Capability = {
        var __type = this.`type`
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __type = Some(org.apache.mesos.v1.mesos.AgentInfo.Capability.Type.fromValue(_input__.readEnum()))
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.AgentInfo.Capability(
            `type` = __type
        )
      }
      def getType: org.apache.mesos.v1.mesos.AgentInfo.Capability.Type = `type`.getOrElse(org.apache.mesos.v1.mesos.AgentInfo.Capability.Type.UNKNOWN)
      def clearType: Capability = copy(`type` = None)
      def withType(__v: org.apache.mesos.v1.mesos.AgentInfo.Capability.Type): Capability = copy(`type` = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => `type`.map(_.javaValueDescriptor).orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.AgentInfo.Capability
  }
  
  object Capability extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.AgentInfo.Capability] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.AgentInfo.Capability] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.AgentInfo.Capability = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.AgentInfo.Capability(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.AgentInfo.Capability.Type.fromValue(__e.getNumber))
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.AgentInfo.Capability] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.AgentInfo.Capability(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.AgentInfo.Capability.Type.fromValue(__e.number))
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.AgentInfo.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.AgentInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => org.apache.mesos.v1.mesos.AgentInfo.Capability.Type
      }
    }
    lazy val defaultInstance = org.apache.mesos.v1.mesos.AgentInfo.Capability(
    )
    sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
      type EnumType = Type
      def isUnknown: Boolean = false
      def isMultiRole: Boolean = false
      def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = org.apache.mesos.v1.mesos.AgentInfo.Capability.Type
    }
    
    object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
      implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
      @SerialVersionUID(0L)
      case object UNKNOWN extends Type {
        val value = 0
        val index = 0
        val name = "UNKNOWN"
        override def isUnknown: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MULTI_ROLE extends Type {
        val value = 1
        val index = 1
        val name = "MULTI_ROLE"
        override def isMultiRole: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
      
      lazy val values = scala.collection.Seq(UNKNOWN, MULTI_ROLE)
      def fromValue(value: Int): Type = value match {
        case 0 => UNKNOWN
        case 1 => MULTI_ROLE
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.AgentInfo.Capability.javaDescriptor.getEnumTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.AgentInfo.Capability.scalaDescriptor.enums(0)
    }
    implicit class CapabilityLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.AgentInfo.Capability]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.AgentInfo.Capability](_l) {
      def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.AgentInfo.Capability.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
      def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.AgentInfo.Capability.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    }
    final val TYPE_FIELD_NUMBER = 1
  }
  
  implicit class AgentInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.AgentInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.AgentInfo](_l) {
    def hostname: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.hostname)((c_, f_) => c_.copy(hostname = f_))
    def port: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getPort)((c_, f_) => c_.copy(port = Some(f_)))
    def optionalPort: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.port)((c_, f_) => c_.copy(port = f_))
    def resources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.resources)((c_, f_) => c_.copy(resources = f_))
    def attributes: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Attribute]] = field(_.attributes)((c_, f_) => c_.copy(attributes = f_))
    def id: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.AgentID] = field(_.getId)((c_, f_) => c_.copy(id = Some(f_)))
    def optionalId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.AgentID]] = field(_.id)((c_, f_) => c_.copy(id = f_))
  }
  final val HOSTNAME_FIELD_NUMBER = 1
  final val PORT_FIELD_NUMBER = 8
  final val RESOURCES_FIELD_NUMBER = 3
  final val ATTRIBUTES_FIELD_NUMBER = 5
  final val ID_FIELD_NUMBER = 6
}
