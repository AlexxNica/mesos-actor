// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes a framework.
  *
  * @param user
  *   Used to determine the Unix user that an executor or task should be
  *   launched as.
  *  
  *   When using the MesosSchedulerDriver, if the field is set to an
  *   empty string, it will automagically set it to the current user.
  *  
  *   When using the HTTP Scheduler API, the user has to be set
  *   explicitly.
  * @param name
  *   Name of the framework that shows up in the Mesos Web UI.
  * @param id
  *   Note that 'id' is only available after a framework has
  *   registered, however, it is included here in order to facilitate
  *   scheduler failover (i.e., if it is set then the
  *   MesosSchedulerDriver expects the scheduler is performing
  *   failover).
  * @param failoverTimeout
  *   The amount of time (in seconds) that the master will wait for the
  *   scheduler to failover before it tears down the framework by
  *   killing all its tasks/executors. This should be non-zero if a
  *   framework expects to reconnect after a failure and not lose its
  *   tasks/executors.
  *  
  *   NOTE: To avoid accidental destruction of tasks, production
  *   frameworks typically set this to a large value (e.g., 1 week).
  * @param checkpoint
  *   If set, agents running tasks started by this framework will write
  *   the framework pid, executor pids and status updates to disk. If
  *   the agent exits (e.g., due to a crash or as part of upgrading
  *   Mesos), this checkpointed data allows the restarted agent to
  *   reconnect to executors that were started by the old instance of
  *   the agent. Enabling checkpointing improves fault tolerance, at
  *   the cost of a (usually small) increase in disk I/O.
  * @param role
  *   Roles are the entities to which allocations are made.
  *   The framework must have at least one role in order to
  *   be offered resources. Note that `role` is deprecated
  *   in favor of `roles` and only one of these fields must
  *   be used. Since we cannot distinguish between empty
  *   `roles` and the default unset `role`, we require that
  *   frameworks set the `MULTI_ROLE` capability if
  *   setting the `roles` field.
  * @param hostname
  *   Used to indicate the current host from which the scheduler is
  *   registered in the Mesos Web UI. If set to an empty string Mesos
  *   will automagically set it to the current hostname if one is
  *   available.
  * @param principal
  *   This field should match the credential's principal the framework
  *   uses for authentication. This field is used for framework API
  *   rate limiting and dynamic reservations. It should be set even
  *   if authentication is not enabled if these features are desired.
  * @param webuiUrl
  *   This field allows a framework to advertise its web UI, so that
  *   the Mesos web UI can link to it. It is expected to be a full URL,
  *   for example http://my-scheduler.example.com:8080/.
  * @param capabilities
  *   This field allows a framework to advertise its set of
  *   capabilities (e.g., ability to receive offers for revocable
  *   resources).
  * @param labels
  *   Labels are free-form key value pairs supplied by the framework
  *   scheduler (e.g., to describe additional functionality offered by
  *   the framework). These labels are not interpreted by Mesos itself.
  *   Labels should not contain duplicate key-value pairs.
  */
@SerialVersionUID(0L)
final case class FrameworkInfo(
    user: String,
    name: String,
    id: scala.Option[org.apache.mesos.v1.mesos.FrameworkID] = None,
    failoverTimeout: scala.Option[Double] = None,
    checkpoint: scala.Option[Boolean] = None,
    role: scala.Option[String] = None,
    roles: _root_.scala.collection.Seq[String] = _root_.scala.collection.Seq.empty,
    hostname: scala.Option[String] = None,
    principal: scala.Option[String] = None,
    webuiUrl: scala.Option[String] = None,
    capabilities: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FrameworkInfo.Capability] = _root_.scala.collection.Seq.empty,
    labels: scala.Option[org.apache.mesos.v1.mesos.Labels] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[FrameworkInfo] with com.trueaccord.lenses.Updatable[FrameworkInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, user)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, name)
      if (id.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(id.get.serializedSize) + id.get.serializedSize }
      if (failoverTimeout.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(4, failoverTimeout.get) }
      if (checkpoint.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, checkpoint.get) }
      if (role.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, role.get) }
      roles.foreach(roles => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, roles))
      if (hostname.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, hostname.get) }
      if (principal.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, principal.get) }
      if (webuiUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, webuiUrl.get) }
      capabilities.foreach(capabilities => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(capabilities.serializedSize) + capabilities.serializedSize)
      if (labels.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(labels.get.serializedSize) + labels.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, user)
      _output__.writeString(2, name)
      id.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      failoverTimeout.foreach { __v =>
        _output__.writeDouble(4, __v)
      };
      checkpoint.foreach { __v =>
        _output__.writeBool(5, __v)
      };
      role.foreach { __v =>
        _output__.writeString(6, __v)
      };
      hostname.foreach { __v =>
        _output__.writeString(7, __v)
      };
      principal.foreach { __v =>
        _output__.writeString(8, __v)
      };
      webuiUrl.foreach { __v =>
        _output__.writeString(9, __v)
      };
      capabilities.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      labels.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      roles.foreach { __v =>
        _output__.writeString(12, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.FrameworkInfo = {
      var __user = this.user
      var __name = this.name
      var __id = this.id
      var __failoverTimeout = this.failoverTimeout
      var __checkpoint = this.checkpoint
      var __role = this.role
      val __roles = (_root_.scala.collection.immutable.Vector.newBuilder[String] ++= this.roles)
      var __hostname = this.hostname
      var __principal = this.principal
      var __webuiUrl = this.webuiUrl
      val __capabilities = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.FrameworkInfo.Capability] ++= this.capabilities)
      var __labels = this.labels
      var __requiredFields0: Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __user = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __name = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __id = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __id.getOrElse(org.apache.mesos.v1.mesos.FrameworkID.defaultInstance)))
          case 33 =>
            __failoverTimeout = Some(_input__.readDouble())
          case 40 =>
            __checkpoint = Some(_input__.readBool())
          case 50 =>
            __role = Some(_input__.readString())
          case 98 =>
            __roles += _input__.readString()
          case 58 =>
            __hostname = Some(_input__.readString())
          case 66 =>
            __principal = Some(_input__.readString())
          case 74 =>
            __webuiUrl = Some(_input__.readString())
          case 82 =>
            __capabilities += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.FrameworkInfo.Capability.defaultInstance)
          case 90 =>
            __labels = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.FrameworkInfo(
          user = __user,
          name = __name,
          id = __id,
          failoverTimeout = __failoverTimeout,
          checkpoint = __checkpoint,
          role = __role,
          roles = __roles.result(),
          hostname = __hostname,
          principal = __principal,
          webuiUrl = __webuiUrl,
          capabilities = __capabilities.result(),
          labels = __labels
      )
    }
    def withUser(__v: String): FrameworkInfo = copy(user = __v)
    def withName(__v: String): FrameworkInfo = copy(name = __v)
    def getId: org.apache.mesos.v1.mesos.FrameworkID = id.getOrElse(org.apache.mesos.v1.mesos.FrameworkID.defaultInstance)
    def clearId: FrameworkInfo = copy(id = None)
    def withId(__v: org.apache.mesos.v1.mesos.FrameworkID): FrameworkInfo = copy(id = Some(__v))
    def getFailoverTimeout: Double = failoverTimeout.getOrElse(0.0)
    def clearFailoverTimeout: FrameworkInfo = copy(failoverTimeout = None)
    def withFailoverTimeout(__v: Double): FrameworkInfo = copy(failoverTimeout = Some(__v))
    def getCheckpoint: Boolean = checkpoint.getOrElse(false)
    def clearCheckpoint: FrameworkInfo = copy(checkpoint = None)
    def withCheckpoint(__v: Boolean): FrameworkInfo = copy(checkpoint = Some(__v))
    def getRole: String = role.getOrElse("*")
    def clearRole: FrameworkInfo = copy(role = None)
    def withRole(__v: String): FrameworkInfo = copy(role = Some(__v))
    def clearRoles = copy(roles = _root_.scala.collection.Seq.empty)
    def addRoles(__vs: String*): FrameworkInfo = addAllRoles(__vs)
    def addAllRoles(__vs: TraversableOnce[String]): FrameworkInfo = copy(roles = roles ++ __vs)
    def withRoles(__v: _root_.scala.collection.Seq[String]): FrameworkInfo = copy(roles = __v)
    def getHostname: String = hostname.getOrElse("")
    def clearHostname: FrameworkInfo = copy(hostname = None)
    def withHostname(__v: String): FrameworkInfo = copy(hostname = Some(__v))
    def getPrincipal: String = principal.getOrElse("")
    def clearPrincipal: FrameworkInfo = copy(principal = None)
    def withPrincipal(__v: String): FrameworkInfo = copy(principal = Some(__v))
    def getWebuiUrl: String = webuiUrl.getOrElse("")
    def clearWebuiUrl: FrameworkInfo = copy(webuiUrl = None)
    def withWebuiUrl(__v: String): FrameworkInfo = copy(webuiUrl = Some(__v))
    def clearCapabilities = copy(capabilities = _root_.scala.collection.Seq.empty)
    def addCapabilities(__vs: org.apache.mesos.v1.mesos.FrameworkInfo.Capability*): FrameworkInfo = addAllCapabilities(__vs)
    def addAllCapabilities(__vs: TraversableOnce[org.apache.mesos.v1.mesos.FrameworkInfo.Capability]): FrameworkInfo = copy(capabilities = capabilities ++ __vs)
    def withCapabilities(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FrameworkInfo.Capability]): FrameworkInfo = copy(capabilities = __v)
    def getLabels: org.apache.mesos.v1.mesos.Labels = labels.getOrElse(org.apache.mesos.v1.mesos.Labels.defaultInstance)
    def clearLabels: FrameworkInfo = copy(labels = None)
    def withLabels(__v: org.apache.mesos.v1.mesos.Labels): FrameworkInfo = copy(labels = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => user
        case 2 => name
        case 3 => id.orNull
        case 4 => failoverTimeout.orNull
        case 5 => checkpoint.orNull
        case 6 => role.orNull
        case 12 => roles
        case 7 => hostname.orNull
        case 8 => principal.orNull
        case 9 => webuiUrl.orNull
        case 10 => capabilities
        case 11 => labels.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(user)
        case 2 => _root_.scalapb.descriptors.PString(name)
        case 3 => id.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => failoverTimeout.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => checkpoint.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => role.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => _root_.scalapb.descriptors.PRepeated(roles.map(_root_.scalapb.descriptors.PString(_))(_root_.scala.collection.breakOut))
        case 7 => hostname.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => principal.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => webuiUrl.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => _root_.scalapb.descriptors.PRepeated(capabilities.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 11 => labels.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.FrameworkInfo
}

object FrameworkInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.FrameworkInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.FrameworkInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.FrameworkInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.FrameworkInfo(
      __fieldsMap(__fields.get(0)).asInstanceOf[String],
      __fieldsMap(__fields.get(1)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.FrameworkID]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Boolean]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[String]],
      __fieldsMap.getOrElse(__fields.get(10), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FrameworkInfo.Capability]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Labels]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.FrameworkInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.FrameworkInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.FrameworkID]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.collection.Seq[String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FrameworkInfo.Capability]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Labels]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => __out = org.apache.mesos.v1.mesos.FrameworkID
      case 10 => __out = org.apache.mesos.v1.mesos.FrameworkInfo.Capability
      case 11 => __out = org.apache.mesos.v1.mesos.Labels
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.FrameworkInfo(
    user = "",
    name = ""
  )
  /** @param type
    *   Enum fields should be optional, see: MESOS-4997.
    */
  @SerialVersionUID(0L)
  final case class Capability(
      `type`: scala.Option[org.apache.mesos.v1.mesos.FrameworkInfo.Capability.Type] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Capability] with com.trueaccord.lenses.Updatable[Capability] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        `type`.foreach { __v =>
          _output__.writeEnum(1, __v.value)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.FrameworkInfo.Capability = {
        var __type = this.`type`
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __type = Some(org.apache.mesos.v1.mesos.FrameworkInfo.Capability.Type.fromValue(_input__.readEnum()))
            case tag => _input__.skipField(tag)
          }
        }
        org.apache.mesos.v1.mesos.FrameworkInfo.Capability(
            `type` = __type
        )
      }
      def getType: org.apache.mesos.v1.mesos.FrameworkInfo.Capability.Type = `type`.getOrElse(org.apache.mesos.v1.mesos.FrameworkInfo.Capability.Type.UNKNOWN)
      def clearType: Capability = copy(`type` = None)
      def withType(__v: org.apache.mesos.v1.mesos.FrameworkInfo.Capability.Type): Capability = copy(`type` = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => `type`.map(_.javaValueDescriptor).orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.FrameworkInfo.Capability
  }
  
  object Capability extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.FrameworkInfo.Capability] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.FrameworkInfo.Capability] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.FrameworkInfo.Capability = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.FrameworkInfo.Capability(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => org.apache.mesos.v1.mesos.FrameworkInfo.Capability.Type.fromValue(__e.getNumber))
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.FrameworkInfo.Capability] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.FrameworkInfo.Capability(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => org.apache.mesos.v1.mesos.FrameworkInfo.Capability.Type.fromValue(__e.number))
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.FrameworkInfo.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.FrameworkInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => org.apache.mesos.v1.mesos.FrameworkInfo.Capability.Type
      }
    }
    lazy val defaultInstance = org.apache.mesos.v1.mesos.FrameworkInfo.Capability(
    )
    sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
      type EnumType = Type
      def isUnknown: Boolean = false
      def isRevocableResources: Boolean = false
      def isTaskKillingState: Boolean = false
      def isGpuResources: Boolean = false
      def isSharedResources: Boolean = false
      def isPartitionAware: Boolean = false
      def isMultiRole: Boolean = false
      def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = org.apache.mesos.v1.mesos.FrameworkInfo.Capability.Type
    }
    
    object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
      implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
      @SerialVersionUID(0L)
      case object UNKNOWN extends Type {
        val value = 0
        val index = 0
        val name = "UNKNOWN"
        override def isUnknown: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object REVOCABLE_RESOURCES extends Type {
        val value = 1
        val index = 1
        val name = "REVOCABLE_RESOURCES"
        override def isRevocableResources: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object TASK_KILLING_STATE extends Type {
        val value = 2
        val index = 2
        val name = "TASK_KILLING_STATE"
        override def isTaskKillingState: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object GPU_RESOURCES extends Type {
        val value = 3
        val index = 3
        val name = "GPU_RESOURCES"
        override def isGpuResources: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object SHARED_RESOURCES extends Type {
        val value = 4
        val index = 4
        val name = "SHARED_RESOURCES"
        override def isSharedResources: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object PARTITION_AWARE extends Type {
        val value = 5
        val index = 5
        val name = "PARTITION_AWARE"
        override def isPartitionAware: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MULTI_ROLE extends Type {
        val value = 6
        val index = 6
        val name = "MULTI_ROLE"
        override def isMultiRole: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
      
      lazy val values = scala.collection.Seq(UNKNOWN, REVOCABLE_RESOURCES, TASK_KILLING_STATE, GPU_RESOURCES, SHARED_RESOURCES, PARTITION_AWARE, MULTI_ROLE)
      def fromValue(value: Int): Type = value match {
        case 0 => UNKNOWN
        case 1 => REVOCABLE_RESOURCES
        case 2 => TASK_KILLING_STATE
        case 3 => GPU_RESOURCES
        case 4 => SHARED_RESOURCES
        case 5 => PARTITION_AWARE
        case 6 => MULTI_ROLE
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.FrameworkInfo.Capability.javaDescriptor.getEnumTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.apache.mesos.v1.mesos.FrameworkInfo.Capability.scalaDescriptor.enums(0)
    }
    implicit class CapabilityLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.FrameworkInfo.Capability]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.FrameworkInfo.Capability](_l) {
      def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.FrameworkInfo.Capability.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
      def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.FrameworkInfo.Capability.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    }
    final val TYPE_FIELD_NUMBER = 1
  }
  
  implicit class FrameworkInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.FrameworkInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.FrameworkInfo](_l) {
    def user: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.user)((c_, f_) => c_.copy(user = f_))
    def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def id: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.FrameworkID] = field(_.getId)((c_, f_) => c_.copy(id = Some(f_)))
    def optionalId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.FrameworkID]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def failoverTimeout: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getFailoverTimeout)((c_, f_) => c_.copy(failoverTimeout = Some(f_)))
    def optionalFailoverTimeout: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.failoverTimeout)((c_, f_) => c_.copy(failoverTimeout = f_))
    def checkpoint: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getCheckpoint)((c_, f_) => c_.copy(checkpoint = Some(f_)))
    def optionalCheckpoint: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.checkpoint)((c_, f_) => c_.copy(checkpoint = f_))
    def role: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getRole)((c_, f_) => c_.copy(role = Some(f_)))
    def optionalRole: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.role)((c_, f_) => c_.copy(role = f_))
    def roles: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[String]] = field(_.roles)((c_, f_) => c_.copy(roles = f_))
    def hostname: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getHostname)((c_, f_) => c_.copy(hostname = Some(f_)))
    def optionalHostname: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.hostname)((c_, f_) => c_.copy(hostname = f_))
    def principal: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPrincipal)((c_, f_) => c_.copy(principal = Some(f_)))
    def optionalPrincipal: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.principal)((c_, f_) => c_.copy(principal = f_))
    def webuiUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getWebuiUrl)((c_, f_) => c_.copy(webuiUrl = Some(f_)))
    def optionalWebuiUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.webuiUrl)((c_, f_) => c_.copy(webuiUrl = f_))
    def capabilities: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FrameworkInfo.Capability]] = field(_.capabilities)((c_, f_) => c_.copy(capabilities = f_))
    def labels: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Labels] = field(_.getLabels)((c_, f_) => c_.copy(labels = Some(f_)))
    def optionalLabels: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Labels]] = field(_.labels)((c_, f_) => c_.copy(labels = f_))
  }
  final val USER_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val ID_FIELD_NUMBER = 3
  final val FAILOVER_TIMEOUT_FIELD_NUMBER = 4
  final val CHECKPOINT_FIELD_NUMBER = 5
  final val ROLE_FIELD_NUMBER = 6
  final val ROLES_FIELD_NUMBER = 12
  final val HOSTNAME_FIELD_NUMBER = 7
  final val PRINCIPAL_FIELD_NUMBER = 8
  final val WEBUI_URL_FIELD_NUMBER = 9
  final val CAPABILITIES_FIELD_NUMBER = 10
  final val LABELS_FIELD_NUMBER = 11
}
