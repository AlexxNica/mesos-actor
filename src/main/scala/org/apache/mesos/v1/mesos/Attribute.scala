// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes an attribute that can be set on a machine. For now,
  * attributes and resources share the same "value" type, but this may
  * change in the future and attributes may only be string based.
  */
@SerialVersionUID(0L)
final case class Attribute(
    name: String,
    `type`: org.apache.mesos.v1.mesos.Value.Type,
    scalar: scala.Option[org.apache.mesos.v1.mesos.Value.Scalar] = None,
    ranges: scala.Option[org.apache.mesos.v1.mesos.Value.Ranges] = None,
    set: scala.Option[org.apache.mesos.v1.mesos.Value.Set] = None,
    text: scala.Option[org.apache.mesos.v1.mesos.Value.Text] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Attribute] with com.trueaccord.lenses.Updatable[Attribute] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, name)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, `type`.value)
      if (scalar.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(scalar.get.serializedSize) + scalar.get.serializedSize }
      if (ranges.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ranges.get.serializedSize) + ranges.get.serializedSize }
      if (set.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(set.get.serializedSize) + set.get.serializedSize }
      if (text.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(text.get.serializedSize) + text.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, name)
      _output__.writeEnum(2, `type`.value)
      scalar.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      ranges.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      text.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      set.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.Attribute = {
      var __name = this.name
      var __type = this.`type`
      var __scalar = this.scalar
      var __ranges = this.ranges
      var __set = this.set
      var __text = this.text
      var __requiredFields0: Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __type = org.apache.mesos.v1.mesos.Value.Type.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __scalar = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __scalar.getOrElse(org.apache.mesos.v1.mesos.Value.Scalar.defaultInstance)))
          case 34 =>
            __ranges = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __ranges.getOrElse(org.apache.mesos.v1.mesos.Value.Ranges.defaultInstance)))
          case 50 =>
            __set = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __set.getOrElse(org.apache.mesos.v1.mesos.Value.Set.defaultInstance)))
          case 42 =>
            __text = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __text.getOrElse(org.apache.mesos.v1.mesos.Value.Text.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      org.apache.mesos.v1.mesos.Attribute(
          name = __name,
          `type` = __type,
          scalar = __scalar,
          ranges = __ranges,
          set = __set,
          text = __text
      )
    }
    def withName(__v: String): Attribute = copy(name = __v)
    def withType(__v: org.apache.mesos.v1.mesos.Value.Type): Attribute = copy(`type` = __v)
    def getScalar: org.apache.mesos.v1.mesos.Value.Scalar = scalar.getOrElse(org.apache.mesos.v1.mesos.Value.Scalar.defaultInstance)
    def clearScalar: Attribute = copy(scalar = None)
    def withScalar(__v: org.apache.mesos.v1.mesos.Value.Scalar): Attribute = copy(scalar = Some(__v))
    def getRanges: org.apache.mesos.v1.mesos.Value.Ranges = ranges.getOrElse(org.apache.mesos.v1.mesos.Value.Ranges.defaultInstance)
    def clearRanges: Attribute = copy(ranges = None)
    def withRanges(__v: org.apache.mesos.v1.mesos.Value.Ranges): Attribute = copy(ranges = Some(__v))
    def getSet: org.apache.mesos.v1.mesos.Value.Set = set.getOrElse(org.apache.mesos.v1.mesos.Value.Set.defaultInstance)
    def clearSet: Attribute = copy(set = None)
    def withSet(__v: org.apache.mesos.v1.mesos.Value.Set): Attribute = copy(set = Some(__v))
    def getText: org.apache.mesos.v1.mesos.Value.Text = text.getOrElse(org.apache.mesos.v1.mesos.Value.Text.defaultInstance)
    def clearText: Attribute = copy(text = None)
    def withText(__v: org.apache.mesos.v1.mesos.Value.Text): Attribute = copy(text = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => name
        case 2 => `type`.javaValueDescriptor
        case 3 => scalar.orNull
        case 4 => ranges.orNull
        case 6 => set.orNull
        case 5 => text.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
        case 3 => scalar.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => ranges.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => set.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => text.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.Attribute
}

object Attribute extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Attribute] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.Attribute] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.Attribute = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.Attribute(
      __fieldsMap(__fields.get(0)).asInstanceOf[String],
      org.apache.mesos.v1.mesos.Value.Type.fromValue(__fieldsMap(__fields.get(1)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Value.Scalar]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Value.Ranges]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Value.Set]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Value.Text]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.Attribute] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.Attribute(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        org.apache.mesos.v1.mesos.Value.Type.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Value.Scalar]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Value.Ranges]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Value.Set]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Value.Text]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(24)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(24)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => __out = org.apache.mesos.v1.mesos.Value.Scalar
      case 4 => __out = org.apache.mesos.v1.mesos.Value.Ranges
      case 6 => __out = org.apache.mesos.v1.mesos.Value.Set
      case 5 => __out = org.apache.mesos.v1.mesos.Value.Text
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => org.apache.mesos.v1.mesos.Value.Type
    }
  }
  lazy val defaultInstance = org.apache.mesos.v1.mesos.Attribute(
    name = "",
    `type` = org.apache.mesos.v1.mesos.Value.Type.SCALAR
  )
  implicit class AttributeLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Attribute]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.Attribute](_l) {
    def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Value.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def scalar: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Value.Scalar] = field(_.getScalar)((c_, f_) => c_.copy(scalar = Some(f_)))
    def optionalScalar: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Value.Scalar]] = field(_.scalar)((c_, f_) => c_.copy(scalar = f_))
    def ranges: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Value.Ranges] = field(_.getRanges)((c_, f_) => c_.copy(ranges = Some(f_)))
    def optionalRanges: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Value.Ranges]] = field(_.ranges)((c_, f_) => c_.copy(ranges = f_))
    def set: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Value.Set] = field(_.getSet)((c_, f_) => c_.copy(set = Some(f_)))
    def optionalSet: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Value.Set]] = field(_.set)((c_, f_) => c_.copy(set = f_))
    def text: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Value.Text] = field(_.getText)((c_, f_) => c_.copy(text = Some(f_)))
    def optionalText: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Value.Text]] = field(_.text)((c_, f_) => c_.copy(text = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val TYPE_FIELD_NUMBER = 2
  final val SCALAR_FIELD_NUMBER = 3
  final val RANGES_FIELD_NUMBER = 4
  final val SET_FIELD_NUMBER = 6
  final val TEXT_FIELD_NUMBER = 5
}
