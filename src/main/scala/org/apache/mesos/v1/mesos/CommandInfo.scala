// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.mesos

/** *
  * Describes a command, executed via: '/bin/sh -c value'. Any URIs specified
  * are fetched before executing the command.  If the executable field for an
  * uri is set, executable file permission is set on the downloaded file.
  * Otherwise, if the downloaded file has a recognized archive extension
  * (currently [compressed] tar and zip) it is extracted into the executor's
  * working directory. This extraction can be disabled by setting `extract` to
  * false. In addition, any environment variables are set before executing
  * the command (so they can be used to "parameterize" your command).
  *
  * @param shell
  *   There are two ways to specify the command:
  *   1) If 'shell == true', the command will be launched via shell
  *  		(i.e., /bin/sh -c 'value'). The 'value' specified will be
  *  		treated as the shell command. The 'arguments' will be ignored.
  *   2) If 'shell == false', the command will be launched by passing
  *  		arguments to an executable. The 'value' specified will be
  *  		treated as the filename of the executable. The 'arguments'
  *  		will be treated as the arguments to the executable. This is
  *  		similar to how POSIX exec families launch processes (i.e.,
  *  		execlp(value, arguments(0), arguments(1), ...)).
  *   NOTE: The field 'value' is changed from 'required' to 'optional'
  *   in 0.20.0. It will only cause issues if a new framework is
  *   connecting to an old master.
  * @param user
  *   Enables executor and tasks to run as a specific user. If the user
  *   field is present both in FrameworkInfo and here, the CommandInfo
  *   user value takes precedence.
  */
@SerialVersionUID(0L)
final case class CommandInfo(
    uris: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.CommandInfo.URI] = _root_.scala.collection.Seq.empty,
    environment: scala.Option[org.apache.mesos.v1.mesos.Environment] = None,
    shell: scala.Option[Boolean] = None,
    value: scala.Option[String] = None,
    arguments: _root_.scala.collection.Seq[String] = _root_.scala.collection.Seq.empty,
    user: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CommandInfo] with com.trueaccord.lenses.Updatable[CommandInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      uris.foreach(uris => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(uris.serializedSize) + uris.serializedSize)
      if (environment.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(environment.get.serializedSize) + environment.get.serializedSize }
      if (shell.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, shell.get) }
      if (value.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, value.get) }
      arguments.foreach(arguments => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, arguments))
      if (user.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, user.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      uris.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      environment.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.foreach { __v =>
        _output__.writeString(3, __v)
      };
      user.foreach { __v =>
        _output__.writeString(5, __v)
      };
      shell.foreach { __v =>
        _output__.writeBool(6, __v)
      };
      arguments.foreach { __v =>
        _output__.writeString(7, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.CommandInfo = {
      val __uris = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.CommandInfo.URI] ++= this.uris)
      var __environment = this.environment
      var __shell = this.shell
      var __value = this.value
      val __arguments = (_root_.scala.collection.immutable.Vector.newBuilder[String] ++= this.arguments)
      var __user = this.user
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __uris += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.CommandInfo.URI.defaultInstance)
          case 18 =>
            __environment = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __environment.getOrElse(org.apache.mesos.v1.mesos.Environment.defaultInstance)))
          case 48 =>
            __shell = Some(_input__.readBool())
          case 26 =>
            __value = Some(_input__.readString())
          case 58 =>
            __arguments += _input__.readString()
          case 42 =>
            __user = Some(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      org.apache.mesos.v1.mesos.CommandInfo(
          uris = __uris.result(),
          environment = __environment,
          shell = __shell,
          value = __value,
          arguments = __arguments.result(),
          user = __user
      )
    }
    def clearUris = copy(uris = _root_.scala.collection.Seq.empty)
    def addUris(__vs: org.apache.mesos.v1.mesos.CommandInfo.URI*): CommandInfo = addAllUris(__vs)
    def addAllUris(__vs: TraversableOnce[org.apache.mesos.v1.mesos.CommandInfo.URI]): CommandInfo = copy(uris = uris ++ __vs)
    def withUris(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.CommandInfo.URI]): CommandInfo = copy(uris = __v)
    def getEnvironment: org.apache.mesos.v1.mesos.Environment = environment.getOrElse(org.apache.mesos.v1.mesos.Environment.defaultInstance)
    def clearEnvironment: CommandInfo = copy(environment = None)
    def withEnvironment(__v: org.apache.mesos.v1.mesos.Environment): CommandInfo = copy(environment = Some(__v))
    def getShell: Boolean = shell.getOrElse(true)
    def clearShell: CommandInfo = copy(shell = None)
    def withShell(__v: Boolean): CommandInfo = copy(shell = Some(__v))
    def getValue: String = value.getOrElse("")
    def clearValue: CommandInfo = copy(value = None)
    def withValue(__v: String): CommandInfo = copy(value = Some(__v))
    def clearArguments = copy(arguments = _root_.scala.collection.Seq.empty)
    def addArguments(__vs: String*): CommandInfo = addAllArguments(__vs)
    def addAllArguments(__vs: TraversableOnce[String]): CommandInfo = copy(arguments = arguments ++ __vs)
    def withArguments(__v: _root_.scala.collection.Seq[String]): CommandInfo = copy(arguments = __v)
    def getUser: String = user.getOrElse("")
    def clearUser: CommandInfo = copy(user = None)
    def withUser(__v: String): CommandInfo = copy(user = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => uris
        case 2 => environment.orNull
        case 6 => shell.orNull
        case 3 => value.orNull
        case 7 => arguments
        case 5 => user.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(uris.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 2 => environment.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => shell.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => value.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PRepeated(arguments.map(_root_.scalapb.descriptors.PString(_))(_root_.scala.collection.breakOut))
        case 5 => user.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.mesos.v1.mesos.CommandInfo
}

object CommandInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CommandInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CommandInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.CommandInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.apache.mesos.v1.mesos.CommandInfo(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.CommandInfo.URI]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.Environment]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Boolean]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.CommandInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.mesos.v1.mesos.CommandInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.CommandInfo.URI]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.Environment]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MesosProto.javaDescriptor.getMessageTypes.get(18)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MesosProto.scalaDescriptor.messages(18)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = org.apache.mesos.v1.mesos.CommandInfo.URI
      case 2 => __out = org.apache.mesos.v1.mesos.Environment
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.mesos.v1.mesos.CommandInfo(
  )
  /** @param extract
    *   In case the fetched file is recognized as an archive, extract
    *   its contents into the sandbox. Note that a cached archive is
    *   not copied from the cache to the sandbox in case extraction
    *   originates from an archive in the cache.
    * @param cache
    *   If this field is "true", the fetcher cache will be used. If not,
    *   fetching bypasses the cache and downloads directly into the
    *   sandbox directory, no matter whether a suitable cache file is
    *   available or not. The former directs the fetcher to download to
    *   the file cache, then copy from there to the sandbox. Subsequent
    *   fetch attempts with the same URI will omit downloading and copy
    *   from the cache as long as the file is resident there. Cache files
    *   may get evicted at any time, which then leads to renewed
    *   downloading. See also "docs/fetcher.md" and
    *   "docs/fetcher-cache-internals.md".
    * @param outputFile
    *   The fetcher's default behavior is to use the URI string's basename to
    *   name the local copy. If this field is provided, the local copy will be
    *   named with its value instead. If there is a directory component (which
    *   must be a relative path), the local copy will be stored in that
    *   subdirectory inside the sandbox.
    */
  @SerialVersionUID(0L)
  final case class URI(
      value: String,
      executable: scala.Option[Boolean] = None,
      extract: scala.Option[Boolean] = None,
      cache: scala.Option[Boolean] = None,
      outputFile: scala.Option[String] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[URI] with com.trueaccord.lenses.Updatable[URI] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, value)
        if (executable.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, executable.get) }
        if (extract.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, extract.get) }
        if (cache.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, cache.get) }
        if (outputFile.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, outputFile.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeString(1, value)
        executable.foreach { __v =>
          _output__.writeBool(2, __v)
        };
        extract.foreach { __v =>
          _output__.writeBool(3, __v)
        };
        cache.foreach { __v =>
          _output__.writeBool(4, __v)
        };
        outputFile.foreach { __v =>
          _output__.writeString(5, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.mesos.v1.mesos.CommandInfo.URI = {
        var __value = this.value
        var __executable = this.executable
        var __extract = this.extract
        var __cache = this.cache
        var __outputFile = this.outputFile
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __value = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 16 =>
              __executable = Some(_input__.readBool())
            case 24 =>
              __extract = Some(_input__.readBool())
            case 32 =>
              __cache = Some(_input__.readBool())
            case 42 =>
              __outputFile = Some(_input__.readString())
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        org.apache.mesos.v1.mesos.CommandInfo.URI(
            value = __value,
            executable = __executable,
            extract = __extract,
            cache = __cache,
            outputFile = __outputFile
        )
      }
      def withValue(__v: String): URI = copy(value = __v)
      def getExecutable: Boolean = executable.getOrElse(false)
      def clearExecutable: URI = copy(executable = None)
      def withExecutable(__v: Boolean): URI = copy(executable = Some(__v))
      def getExtract: Boolean = extract.getOrElse(true)
      def clearExtract: URI = copy(extract = None)
      def withExtract(__v: Boolean): URI = copy(extract = Some(__v))
      def getCache: Boolean = cache.getOrElse(false)
      def clearCache: URI = copy(cache = None)
      def withCache(__v: Boolean): URI = copy(cache = Some(__v))
      def getOutputFile: String = outputFile.getOrElse("")
      def clearOutputFile: URI = copy(outputFile = None)
      def withOutputFile(__v: String): URI = copy(outputFile = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => value
          case 2 => executable.orNull
          case 3 => extract.orNull
          case 4 => cache.orNull
          case 5 => outputFile.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(value)
          case 2 => executable.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => extract.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => cache.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => outputFile.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.apache.mesos.v1.mesos.CommandInfo.URI
  }
  
  object URI extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CommandInfo.URI] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.apache.mesos.v1.mesos.CommandInfo.URI] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.apache.mesos.v1.mesos.CommandInfo.URI = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.apache.mesos.v1.mesos.CommandInfo.URI(
        __fieldsMap(__fields.get(0)).asInstanceOf[String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Boolean]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Boolean]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Boolean]],
        __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.mesos.v1.mesos.CommandInfo.URI] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.apache.mesos.v1.mesos.CommandInfo.URI(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Boolean]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Boolean]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Boolean]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.apache.mesos.v1.mesos.CommandInfo.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.apache.mesos.v1.mesos.CommandInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.apache.mesos.v1.mesos.CommandInfo.URI(
      value = ""
    )
    implicit class URILens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CommandInfo.URI]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.CommandInfo.URI](_l) {
      def value: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.value)((c_, f_) => c_.copy(value = f_))
      def executable: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getExecutable)((c_, f_) => c_.copy(executable = Some(f_)))
      def optionalExecutable: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.executable)((c_, f_) => c_.copy(executable = f_))
      def extract: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getExtract)((c_, f_) => c_.copy(extract = Some(f_)))
      def optionalExtract: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.extract)((c_, f_) => c_.copy(extract = f_))
      def cache: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getCache)((c_, f_) => c_.copy(cache = Some(f_)))
      def optionalCache: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.cache)((c_, f_) => c_.copy(cache = f_))
      def outputFile: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getOutputFile)((c_, f_) => c_.copy(outputFile = Some(f_)))
      def optionalOutputFile: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.outputFile)((c_, f_) => c_.copy(outputFile = f_))
    }
    final val VALUE_FIELD_NUMBER = 1
    final val EXECUTABLE_FIELD_NUMBER = 2
    final val EXTRACT_FIELD_NUMBER = 3
    final val CACHE_FIELD_NUMBER = 4
    final val OUTPUT_FILE_FIELD_NUMBER = 5
  }
  
  implicit class CommandInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CommandInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.apache.mesos.v1.mesos.CommandInfo](_l) {
    def uris: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.CommandInfo.URI]] = field(_.uris)((c_, f_) => c_.copy(uris = f_))
    def environment: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Environment] = field(_.getEnvironment)((c_, f_) => c_.copy(environment = Some(f_)))
    def optionalEnvironment: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.Environment]] = field(_.environment)((c_, f_) => c_.copy(environment = f_))
    def shell: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getShell)((c_, f_) => c_.copy(shell = Some(f_)))
    def optionalShell: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.shell)((c_, f_) => c_.copy(shell = f_))
    def value: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
    def optionalValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    def arguments: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[String]] = field(_.arguments)((c_, f_) => c_.copy(arguments = f_))
    def user: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getUser)((c_, f_) => c_.copy(user = Some(f_)))
    def optionalUser: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.user)((c_, f_) => c_.copy(user = f_))
  }
  final val URIS_FIELD_NUMBER = 1
  final val ENVIRONMENT_FIELD_NUMBER = 2
  final val SHELL_FIELD_NUMBER = 6
  final val VALUE_FIELD_NUMBER = 3
  final val ARGUMENTS_FIELD_NUMBER = 7
  final val USER_FIELD_NUMBER = 5
}
