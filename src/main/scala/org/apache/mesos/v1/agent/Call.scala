// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.agent

import org.apache.mesos.v1.agent

/** *
  * Calls that can be sent to the v1 agent API.
  *
  * A call is described using the standard protocol buffer "union"
  * trick, see
  * https://developers.google.com/protocol-buffers/docs/techniques#union.
  */
@SerialVersionUID(0L)
final case class Call(
                       `type`: scala.Option[Call.Type] = None,
                       getMetrics: scala.Option[Call.GetMetrics] = None,
                       setLoggingLevel: scala.Option[Call.SetLoggingLevel] = None,
                       listFiles: scala.Option[Call.ListFiles] = None,
                       readFile: scala.Option[Call.ReadFile] = None,
                       launchNestedContainer: scala.Option[Call.LaunchNestedContainer] = None,
                       waitNestedContainer: scala.Option[Call.WaitNestedContainer] = None,
                       killNestedContainer: scala.Option[Call.KillNestedContainer] = None,
                       removeNestedContainer: scala.Option[Call.RemoveNestedContainer] = None,
                       launchNestedContainerSession: scala.Option[Call.LaunchNestedContainerSession] = None,
                       attachContainerInput: scala.Option[Call.AttachContainerInput] = None,
                       attachContainerOutput: scala.Option[Call.AttachContainerOutput] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Call] with com.trueaccord.lenses.Updatable[Call] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
      if (getMetrics.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getMetrics.get.serializedSize) + getMetrics.get.serializedSize }
      if (setLoggingLevel.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(setLoggingLevel.get.serializedSize) + setLoggingLevel.get.serializedSize }
      if (listFiles.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(listFiles.get.serializedSize) + listFiles.get.serializedSize }
      if (readFile.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(readFile.get.serializedSize) + readFile.get.serializedSize }
      if (launchNestedContainer.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(launchNestedContainer.get.serializedSize) + launchNestedContainer.get.serializedSize }
      if (waitNestedContainer.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(waitNestedContainer.get.serializedSize) + waitNestedContainer.get.serializedSize }
      if (killNestedContainer.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(killNestedContainer.get.serializedSize) + killNestedContainer.get.serializedSize }
      if (removeNestedContainer.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(removeNestedContainer.get.serializedSize) + removeNestedContainer.get.serializedSize }
      if (launchNestedContainerSession.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(launchNestedContainerSession.get.serializedSize) + launchNestedContainerSession.get.serializedSize }
      if (attachContainerInput.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(attachContainerInput.get.serializedSize) + attachContainerInput.get.serializedSize }
      if (attachContainerOutput.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(attachContainerOutput.get.serializedSize) + attachContainerOutput.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      `type`.foreach { __v =>
        _output__.writeEnum(1, __v.value)
      };
      getMetrics.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      setLoggingLevel.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      listFiles.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      readFile.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      launchNestedContainer.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      waitNestedContainer.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      killNestedContainer.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      launchNestedContainerSession.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      attachContainerInput.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      attachContainerOutput.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      removeNestedContainer.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call = {
      var __type = this.`type`
      var __getMetrics = this.getMetrics
      var __setLoggingLevel = this.setLoggingLevel
      var __listFiles = this.listFiles
      var __readFile = this.readFile
      var __launchNestedContainer = this.launchNestedContainer
      var __waitNestedContainer = this.waitNestedContainer
      var __killNestedContainer = this.killNestedContainer
      var __removeNestedContainer = this.removeNestedContainer
      var __launchNestedContainerSession = this.launchNestedContainerSession
      var __attachContainerInput = this.attachContainerInput
      var __attachContainerOutput = this.attachContainerOutput
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = Some(agent.Call.Type.fromValue(_input__.readEnum()))
          case 18 =>
            __getMetrics = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getMetrics.getOrElse(agent.Call.GetMetrics.defaultInstance)))
          case 26 =>
            __setLoggingLevel = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __setLoggingLevel.getOrElse(agent.Call.SetLoggingLevel.defaultInstance)))
          case 34 =>
            __listFiles = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __listFiles.getOrElse(agent.Call.ListFiles.defaultInstance)))
          case 42 =>
            __readFile = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __readFile.getOrElse(agent.Call.ReadFile.defaultInstance)))
          case 50 =>
            __launchNestedContainer = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __launchNestedContainer.getOrElse(agent.Call.LaunchNestedContainer.defaultInstance)))
          case 58 =>
            __waitNestedContainer = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __waitNestedContainer.getOrElse(agent.Call.WaitNestedContainer.defaultInstance)))
          case 66 =>
            __killNestedContainer = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __killNestedContainer.getOrElse(agent.Call.KillNestedContainer.defaultInstance)))
          case 98 =>
            __removeNestedContainer = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __removeNestedContainer.getOrElse(agent.Call.RemoveNestedContainer.defaultInstance)))
          case 74 =>
            __launchNestedContainerSession = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __launchNestedContainerSession.getOrElse(agent.Call.LaunchNestedContainerSession.defaultInstance)))
          case 82 =>
            __attachContainerInput = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __attachContainerInput.getOrElse(agent.Call.AttachContainerInput.defaultInstance)))
          case 90 =>
            __attachContainerOutput = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __attachContainerOutput.getOrElse(agent.Call.AttachContainerOutput.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      agent.Call(
          `type` = __type,
          getMetrics = __getMetrics,
          setLoggingLevel = __setLoggingLevel,
          listFiles = __listFiles,
          readFile = __readFile,
          launchNestedContainer = __launchNestedContainer,
          waitNestedContainer = __waitNestedContainer,
          killNestedContainer = __killNestedContainer,
          removeNestedContainer = __removeNestedContainer,
          launchNestedContainerSession = __launchNestedContainerSession,
          attachContainerInput = __attachContainerInput,
          attachContainerOutput = __attachContainerOutput
      )
    }
    def getType: Call.Type = `type`.getOrElse(agent.Call.Type.UNKNOWN)
    def clearType: Call = copy(`type` = None)
    def withType(__v: Call.Type): Call = copy(`type` = Some(__v))
    def getGetMetrics: Call.GetMetrics = getMetrics.getOrElse(agent.Call.GetMetrics.defaultInstance)
    def clearGetMetrics: Call = copy(getMetrics = None)
    def withGetMetrics(__v: Call.GetMetrics): Call = copy(getMetrics = Some(__v))
    def getSetLoggingLevel: Call.SetLoggingLevel = setLoggingLevel.getOrElse(agent.Call.SetLoggingLevel.defaultInstance)
    def clearSetLoggingLevel: Call = copy(setLoggingLevel = None)
    def withSetLoggingLevel(__v: Call.SetLoggingLevel): Call = copy(setLoggingLevel = Some(__v))
    def getListFiles: Call.ListFiles = listFiles.getOrElse(agent.Call.ListFiles.defaultInstance)
    def clearListFiles: Call = copy(listFiles = None)
    def withListFiles(__v: Call.ListFiles): Call = copy(listFiles = Some(__v))
    def getReadFile: Call.ReadFile = readFile.getOrElse(agent.Call.ReadFile.defaultInstance)
    def clearReadFile: Call = copy(readFile = None)
    def withReadFile(__v: Call.ReadFile): Call = copy(readFile = Some(__v))
    def getLaunchNestedContainer: Call.LaunchNestedContainer = launchNestedContainer.getOrElse(agent.Call.LaunchNestedContainer.defaultInstance)
    def clearLaunchNestedContainer: Call = copy(launchNestedContainer = None)
    def withLaunchNestedContainer(__v: Call.LaunchNestedContainer): Call = copy(launchNestedContainer = Some(__v))
    def getWaitNestedContainer: Call.WaitNestedContainer = waitNestedContainer.getOrElse(agent.Call.WaitNestedContainer.defaultInstance)
    def clearWaitNestedContainer: Call = copy(waitNestedContainer = None)
    def withWaitNestedContainer(__v: Call.WaitNestedContainer): Call = copy(waitNestedContainer = Some(__v))
    def getKillNestedContainer: Call.KillNestedContainer = killNestedContainer.getOrElse(agent.Call.KillNestedContainer.defaultInstance)
    def clearKillNestedContainer: Call = copy(killNestedContainer = None)
    def withKillNestedContainer(__v: Call.KillNestedContainer): Call = copy(killNestedContainer = Some(__v))
    def getRemoveNestedContainer: Call.RemoveNestedContainer = removeNestedContainer.getOrElse(agent.Call.RemoveNestedContainer.defaultInstance)
    def clearRemoveNestedContainer: Call = copy(removeNestedContainer = None)
    def withRemoveNestedContainer(__v: Call.RemoveNestedContainer): Call = copy(removeNestedContainer = Some(__v))
    def getLaunchNestedContainerSession: Call.LaunchNestedContainerSession = launchNestedContainerSession.getOrElse(agent.Call.LaunchNestedContainerSession.defaultInstance)
    def clearLaunchNestedContainerSession: Call = copy(launchNestedContainerSession = None)
    def withLaunchNestedContainerSession(__v: Call.LaunchNestedContainerSession): Call = copy(launchNestedContainerSession = Some(__v))
    def getAttachContainerInput: Call.AttachContainerInput = attachContainerInput.getOrElse(agent.Call.AttachContainerInput.defaultInstance)
    def clearAttachContainerInput: Call = copy(attachContainerInput = None)
    def withAttachContainerInput(__v: Call.AttachContainerInput): Call = copy(attachContainerInput = Some(__v))
    def getAttachContainerOutput: Call.AttachContainerOutput = attachContainerOutput.getOrElse(agent.Call.AttachContainerOutput.defaultInstance)
    def clearAttachContainerOutput: Call = copy(attachContainerOutput = None)
    def withAttachContainerOutput(__v: Call.AttachContainerOutput): Call = copy(attachContainerOutput = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.map(_.javaValueDescriptor).orNull
        case 2 => getMetrics.orNull
        case 3 => setLoggingLevel.orNull
        case 4 => listFiles.orNull
        case 5 => readFile.orNull
        case 6 => launchNestedContainer.orNull
        case 7 => waitNestedContainer.orNull
        case 8 => killNestedContainer.orNull
        case 12 => removeNestedContainer.orNull
        case 9 => launchNestedContainerSession.orNull
        case 10 => attachContainerInput.orNull
        case 11 => attachContainerOutput.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => getMetrics.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => setLoggingLevel.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => listFiles.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => readFile.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => launchNestedContainer.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => waitNestedContainer.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => killNestedContainer.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => removeNestedContainer.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => launchNestedContainerSession.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => attachContainerInput.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => attachContainerOutput.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = agent.Call
}

object Call extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    agent.Call(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => agent.Call.Type.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Call.GetMetrics]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Call.SetLoggingLevel]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Call.ListFiles]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Call.ReadFile]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Call.LaunchNestedContainer]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Call.WaitNestedContainer]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Call.KillNestedContainer]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Call.RemoveNestedContainer]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Call.LaunchNestedContainerSession]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Call.AttachContainerInput]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Call.AttachContainerOutput]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[Call] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      agent.Call(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => agent.Call.Type.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Call.GetMetrics]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Call.SetLoggingLevel]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Call.ListFiles]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Call.ReadFile]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Call.LaunchNestedContainer]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Call.WaitNestedContainer]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Call.KillNestedContainer]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[Call.RemoveNestedContainer]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[Call.LaunchNestedContainerSession]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Call.AttachContainerInput]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[Call.AttachContainerOutput]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AgentProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AgentProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = agent.Call.GetMetrics
      case 3 => __out = agent.Call.SetLoggingLevel
      case 4 => __out = agent.Call.ListFiles
      case 5 => __out = agent.Call.ReadFile
      case 6 => __out = agent.Call.LaunchNestedContainer
      case 7 => __out = agent.Call.WaitNestedContainer
      case 8 => __out = agent.Call.KillNestedContainer
      case 12 => __out = agent.Call.RemoveNestedContainer
      case 9 => __out = agent.Call.LaunchNestedContainerSession
      case 10 => __out = agent.Call.AttachContainerInput
      case 11 => __out = agent.Call.AttachContainerOutput
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => agent.Call.Type
    }
  }
  lazy val defaultInstance = agent.Call(
  )
  sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Type
    def isUnknown: Boolean = false
    def isGetHealth: Boolean = false
    def isGetFlags: Boolean = false
    def isGetVersion: Boolean = false
    def isGetMetrics: Boolean = false
    def isGetLoggingLevel: Boolean = false
    def isSetLoggingLevel: Boolean = false
    def isListFiles: Boolean = false
    def isReadFile: Boolean = false
    def isGetState: Boolean = false
    def isGetContainers: Boolean = false
    def isGetFrameworks: Boolean = false
    def isGetExecutors: Boolean = false
    def isGetTasks: Boolean = false
    def isGetAgent: Boolean = false
    def isLaunchNestedContainer: Boolean = false
    def isWaitNestedContainer: Boolean = false
    def isKillNestedContainer: Boolean = false
    def isRemoveNestedContainer: Boolean = false
    def isLaunchNestedContainerSession: Boolean = false
    def isAttachContainerInput: Boolean = false
    def isAttachContainerOutput: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = agent.Call.Type
  }
  
  object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object UNKNOWN extends Type {
      val value = 0
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_HEALTH extends Type {
      val value = 1
      val index = 1
      val name = "GET_HEALTH"
      override def isGetHealth: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_FLAGS extends Type {
      val value = 2
      val index = 2
      val name = "GET_FLAGS"
      override def isGetFlags: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_VERSION extends Type {
      val value = 3
      val index = 3
      val name = "GET_VERSION"
      override def isGetVersion: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_METRICS extends Type {
      val value = 4
      val index = 4
      val name = "GET_METRICS"
      override def isGetMetrics: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_LOGGING_LEVEL extends Type {
      val value = 5
      val index = 5
      val name = "GET_LOGGING_LEVEL"
      override def isGetLoggingLevel: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SET_LOGGING_LEVEL extends Type {
      val value = 6
      val index = 6
      val name = "SET_LOGGING_LEVEL"
      override def isSetLoggingLevel: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LIST_FILES extends Type {
      val value = 7
      val index = 7
      val name = "LIST_FILES"
      override def isListFiles: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object READ_FILE extends Type {
      val value = 8
      val index = 8
      val name = "READ_FILE"
      override def isReadFile: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_STATE extends Type {
      val value = 9
      val index = 9
      val name = "GET_STATE"
      override def isGetState: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_CONTAINERS extends Type {
      val value = 10
      val index = 10
      val name = "GET_CONTAINERS"
      override def isGetContainers: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_FRAMEWORKS extends Type {
      val value = 11
      val index = 11
      val name = "GET_FRAMEWORKS"
      override def isGetFrameworks: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_EXECUTORS extends Type {
      val value = 12
      val index = 12
      val name = "GET_EXECUTORS"
      override def isGetExecutors: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_TASKS extends Type {
      val value = 13
      val index = 13
      val name = "GET_TASKS"
      override def isGetTasks: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_AGENT extends Type {
      val value = 20
      val index = 14
      val name = "GET_AGENT"
      override def isGetAgent: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LAUNCH_NESTED_CONTAINER extends Type {
      val value = 14
      val index = 15
      val name = "LAUNCH_NESTED_CONTAINER"
      override def isLaunchNestedContainer: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WAIT_NESTED_CONTAINER extends Type {
      val value = 15
      val index = 16
      val name = "WAIT_NESTED_CONTAINER"
      override def isWaitNestedContainer: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object KILL_NESTED_CONTAINER extends Type {
      val value = 16
      val index = 17
      val name = "KILL_NESTED_CONTAINER"
      override def isKillNestedContainer: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REMOVE_NESTED_CONTAINER extends Type {
      val value = 21
      val index = 18
      val name = "REMOVE_NESTED_CONTAINER"
      override def isRemoveNestedContainer: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LAUNCH_NESTED_CONTAINER_SESSION extends Type {
      val value = 17
      val index = 19
      val name = "LAUNCH_NESTED_CONTAINER_SESSION"
      override def isLaunchNestedContainerSession: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ATTACH_CONTAINER_INPUT extends Type {
      val value = 18
      val index = 20
      val name = "ATTACH_CONTAINER_INPUT"
      override def isAttachContainerInput: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ATTACH_CONTAINER_OUTPUT extends Type {
      val value = 19
      val index = 21
      val name = "ATTACH_CONTAINER_OUTPUT"
      override def isAttachContainerOutput: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(UNKNOWN, GET_HEALTH, GET_FLAGS, GET_VERSION, GET_METRICS, GET_LOGGING_LEVEL, SET_LOGGING_LEVEL, LIST_FILES, READ_FILE, GET_STATE, GET_CONTAINERS, GET_FRAMEWORKS, GET_EXECUTORS, GET_TASKS, GET_AGENT, LAUNCH_NESTED_CONTAINER, WAIT_NESTED_CONTAINER, KILL_NESTED_CONTAINER, REMOVE_NESTED_CONTAINER, LAUNCH_NESTED_CONTAINER_SESSION, ATTACH_CONTAINER_INPUT, ATTACH_CONTAINER_OUTPUT)
    def fromValue(value: Int): Type = value match {
      case 0 => UNKNOWN
      case 1 => GET_HEALTH
      case 2 => GET_FLAGS
      case 3 => GET_VERSION
      case 4 => GET_METRICS
      case 5 => GET_LOGGING_LEVEL
      case 6 => SET_LOGGING_LEVEL
      case 7 => LIST_FILES
      case 8 => READ_FILE
      case 9 => GET_STATE
      case 10 => GET_CONTAINERS
      case 11 => GET_FRAMEWORKS
      case 12 => GET_EXECUTORS
      case 13 => GET_TASKS
      case 14 => LAUNCH_NESTED_CONTAINER
      case 15 => WAIT_NESTED_CONTAINER
      case 16 => KILL_NESTED_CONTAINER
      case 17 => LAUNCH_NESTED_CONTAINER_SESSION
      case 18 => ATTACH_CONTAINER_INPUT
      case 19 => ATTACH_CONTAINER_OUTPUT
      case 20 => GET_AGENT
      case 21 => REMOVE_NESTED_CONTAINER
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = agent.Call.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = agent.Call.scalaDescriptor.enums(0)
  }
  /** Provides a snapshot of the current metrics tracked by the agent.
    *
    * @param timeout
    *   If set, `timeout` would be used to determines the maximum amount of time
    *   the API will take to respond. If the timeout is exceeded, some metrics
    *   may not be included in the response.
    */
  @SerialVersionUID(0L)
  final case class GetMetrics(
      timeout: scala.Option[org.apache.mesos.v1.mesos.DurationInfo] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetMetrics] with com.trueaccord.lenses.Updatable[GetMetrics] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (timeout.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(timeout.get.serializedSize) + timeout.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        timeout.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.GetMetrics = {
        var __timeout = this.timeout
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __timeout = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __timeout.getOrElse(org.apache.mesos.v1.mesos.DurationInfo.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        agent.Call.GetMetrics(
            timeout = __timeout
        )
      }
      def getTimeout: org.apache.mesos.v1.mesos.DurationInfo = timeout.getOrElse(org.apache.mesos.v1.mesos.DurationInfo.defaultInstance)
      def clearTimeout: GetMetrics = copy(timeout = None)
      def withTimeout(__v: org.apache.mesos.v1.mesos.DurationInfo): GetMetrics = copy(timeout = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => timeout.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => timeout.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Call.GetMetrics
  }
  
  object GetMetrics extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.GetMetrics] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.GetMetrics] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.GetMetrics = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Call.GetMetrics(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.DurationInfo]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.GetMetrics] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Call.GetMetrics(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.DurationInfo]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Call.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Call.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.DurationInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Call.GetMetrics(
    )
    implicit class GetMetricsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.GetMetrics]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.GetMetrics](_l) {
      def timeout: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.DurationInfo] = field(_.getTimeout)((c_, f_) => c_.copy(timeout = Some(f_)))
      def optionalTimeout: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.DurationInfo]] = field(_.timeout)((c_, f_) => c_.copy(timeout = f_))
    }
    final val TIMEOUT_FIELD_NUMBER = 1
  }
  
  /** Sets the logging verbosity level for a specified duration. Mesos uses
    * [glog](https://github.com/google/glog) for logging. The library only uses
    * verbose logging which means nothing will be output unless the verbosity
    * level is set (by default it's 0, libprocess uses levels 1, 2, and 3).
    *
    * @param level
    *   The verbosity level.
    * @param duration
    *   The duration to keep verbosity level toggled. After this duration, the
    *   verbosity level of log would revert to the original level.
    */
  @SerialVersionUID(0L)
  final case class SetLoggingLevel(
      level: Int,
      duration: org.apache.mesos.v1.mesos.DurationInfo
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[SetLoggingLevel] with com.trueaccord.lenses.Updatable[SetLoggingLevel] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, level)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(duration.serializedSize) + duration.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeUInt32(1, level)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(duration.serializedSize)
        duration.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.SetLoggingLevel = {
        var __level = this.level
        var __duration = this.duration
        var __requiredFields0: Long = 0x3L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __level = _input__.readUInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __duration = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __duration)
              __requiredFields0 &= 0xfffffffffffffffdL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Call.SetLoggingLevel(
            level = __level,
            duration = __duration
        )
      }
      def withLevel(__v: Int): SetLoggingLevel = copy(level = __v)
      def withDuration(__v: org.apache.mesos.v1.mesos.DurationInfo): SetLoggingLevel = copy(duration = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => level
          case 2 => duration
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(level)
          case 2 => duration.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Call.SetLoggingLevel
  }
  
  object SetLoggingLevel extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.SetLoggingLevel] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.SetLoggingLevel] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.SetLoggingLevel = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Call.SetLoggingLevel(
        __fieldsMap(__fields.get(0)).asInstanceOf[Int],
        __fieldsMap(__fields.get(1)).asInstanceOf[org.apache.mesos.v1.mesos.DurationInfo]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.SetLoggingLevel] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Call.SetLoggingLevel(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[org.apache.mesos.v1.mesos.DurationInfo]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Call.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Call.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = org.apache.mesos.v1.mesos.DurationInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Call.SetLoggingLevel(
      level = 0,
      duration = org.apache.mesos.v1.mesos.DurationInfo.defaultInstance
    )
    implicit class SetLoggingLevelLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.SetLoggingLevel]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.SetLoggingLevel](_l) {
      def level: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.level)((c_, f_) => c_.copy(level = f_))
      def duration: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.DurationInfo] = field(_.duration)((c_, f_) => c_.copy(duration = f_))
    }
    final val LEVEL_FIELD_NUMBER = 1
    final val DURATION_FIELD_NUMBER = 2
  }
  
  /** Provides the file listing for a directory.
    */
  @SerialVersionUID(0L)
  final case class ListFiles(
      path: String
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ListFiles] with com.trueaccord.lenses.Updatable[ListFiles] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, path)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeString(1, path)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.ListFiles = {
        var __path = this.path
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __path = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Call.ListFiles(
            path = __path
        )
      }
      def withPath(__v: String): ListFiles = copy(path = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => path
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(path)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Call.ListFiles
  }
  
  object ListFiles extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.ListFiles] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.ListFiles] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.ListFiles = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Call.ListFiles(
        __fieldsMap(__fields.get(0)).asInstanceOf[String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.ListFiles] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Call.ListFiles(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Call.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Call.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Call.ListFiles(
      path = ""
    )
    implicit class ListFilesLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.ListFiles]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.ListFiles](_l) {
      def path: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.path)((c_, f_) => c_.copy(path = f_))
    }
    final val PATH_FIELD_NUMBER = 1
  }
  
  /** Reads data from a file.
    *
    * @param path
    *   The path of file.
    * @param offset
    *   Initial offset in file to start reading from.
    * @param length
    *   The maximum number of bytes to read. The read length is capped at 16
    *   memory pages.
    */
  @SerialVersionUID(0L)
  final case class ReadFile(
      path: String,
      offset: Long,
      length: scala.Option[Long] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ReadFile] with com.trueaccord.lenses.Updatable[ReadFile] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, path)
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, offset)
        if (length.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, length.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeString(1, path)
        _output__.writeUInt64(2, offset)
        length.foreach { __v =>
          _output__.writeUInt64(3, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.ReadFile = {
        var __path = this.path
        var __offset = this.offset
        var __length = this.length
        var __requiredFields0: Long = 0x3L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __path = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 16 =>
              __offset = _input__.readUInt64()
              __requiredFields0 &= 0xfffffffffffffffdL
            case 24 =>
              __length = Some(_input__.readUInt64())
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Call.ReadFile(
            path = __path,
            offset = __offset,
            length = __length
        )
      }
      def withPath(__v: String): ReadFile = copy(path = __v)
      def withOffset(__v: Long): ReadFile = copy(offset = __v)
      def getLength: Long = length.getOrElse(0L)
      def clearLength: ReadFile = copy(length = None)
      def withLength(__v: Long): ReadFile = copy(length = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => path
          case 2 => offset
          case 3 => length.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(path)
          case 2 => _root_.scalapb.descriptors.PLong(offset)
          case 3 => length.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Call.ReadFile
  }
  
  object ReadFile extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.ReadFile] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.ReadFile] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.ReadFile = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Call.ReadFile(
        __fieldsMap(__fields.get(0)).asInstanceOf[String],
        __fieldsMap(__fields.get(1)).asInstanceOf[Long],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.ReadFile] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Call.ReadFile(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Long],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Call.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Call.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Call.ReadFile(
      path = "",
      offset = 0L
    )
    implicit class ReadFileLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.ReadFile]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.ReadFile](_l) {
      def path: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.path)((c_, f_) => c_.copy(path = f_))
      def offset: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.offset)((c_, f_) => c_.copy(offset = f_))
      def length: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getLength)((c_, f_) => c_.copy(length = Some(f_)))
      def optionalLength: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.length)((c_, f_) => c_.copy(length = f_))
    }
    final val PATH_FIELD_NUMBER = 1
    final val OFFSET_FIELD_NUMBER = 2
    final val LENGTH_FIELD_NUMBER = 3
  }
  
  /** Launches a nested container within an executor's tree of containers.
    */
  @SerialVersionUID(0L)
  final case class LaunchNestedContainer(
      containerId: org.apache.mesos.v1.mesos.ContainerID,
      command: scala.Option[org.apache.mesos.v1.mesos.CommandInfo] = None,
      container: scala.Option[org.apache.mesos.v1.mesos.ContainerInfo] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[LaunchNestedContainer] with com.trueaccord.lenses.Updatable[LaunchNestedContainer] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containerId.serializedSize) + containerId.serializedSize
        if (command.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.get.serializedSize) + command.get.serializedSize }
        if (container.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(container.get.serializedSize) + container.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(containerId.serializedSize)
        containerId.writeTo(_output__)
        command.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        container.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.LaunchNestedContainer = {
        var __containerId = this.containerId
        var __command = this.command
        var __container = this.container
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __containerId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __containerId)
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __command = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __command.getOrElse(org.apache.mesos.v1.mesos.CommandInfo.defaultInstance)))
            case 26 =>
              __container = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __container.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Call.LaunchNestedContainer(
            containerId = __containerId,
            command = __command,
            container = __container
        )
      }
      def withContainerId(__v: org.apache.mesos.v1.mesos.ContainerID): LaunchNestedContainer = copy(containerId = __v)
      def getCommand: org.apache.mesos.v1.mesos.CommandInfo = command.getOrElse(org.apache.mesos.v1.mesos.CommandInfo.defaultInstance)
      def clearCommand: LaunchNestedContainer = copy(command = None)
      def withCommand(__v: org.apache.mesos.v1.mesos.CommandInfo): LaunchNestedContainer = copy(command = Some(__v))
      def getContainer: org.apache.mesos.v1.mesos.ContainerInfo = container.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.defaultInstance)
      def clearContainer: LaunchNestedContainer = copy(container = None)
      def withContainer(__v: org.apache.mesos.v1.mesos.ContainerInfo): LaunchNestedContainer = copy(container = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => containerId
          case 2 => command.orNull
          case 3 => container.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => containerId.toPMessage
          case 2 => command.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => container.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Call.LaunchNestedContainer
  }
  
  object LaunchNestedContainer extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.LaunchNestedContainer] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.LaunchNestedContainer] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.LaunchNestedContainer = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Call.LaunchNestedContainer(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.ContainerID],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CommandInfo]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ContainerInfo]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.LaunchNestedContainer] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Call.LaunchNestedContainer(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ContainerID],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CommandInfo]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ContainerInfo]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Call.javaDescriptor.getNestedTypes.get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Call.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.ContainerID
        case 2 => __out = org.apache.mesos.v1.mesos.CommandInfo
        case 3 => __out = org.apache.mesos.v1.mesos.ContainerInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Call.LaunchNestedContainer(
      containerId = org.apache.mesos.v1.mesos.ContainerID.defaultInstance
    )
    implicit class LaunchNestedContainerLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.LaunchNestedContainer]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.LaunchNestedContainer](_l) {
      def containerId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerID] = field(_.containerId)((c_, f_) => c_.copy(containerId = f_))
      def command: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CommandInfo] = field(_.getCommand)((c_, f_) => c_.copy(command = Some(f_)))
      def optionalCommand: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CommandInfo]] = field(_.command)((c_, f_) => c_.copy(command = f_))
      def container: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo] = field(_.getContainer)((c_, f_) => c_.copy(container = Some(f_)))
      def optionalContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ContainerInfo]] = field(_.container)((c_, f_) => c_.copy(container = f_))
    }
    final val CONTAINER_ID_FIELD_NUMBER = 1
    final val COMMAND_FIELD_NUMBER = 2
    final val CONTAINER_FIELD_NUMBER = 3
  }
  
  /** Waits for the nested container to terminate and receives the exit status.
    */
  @SerialVersionUID(0L)
  final case class WaitNestedContainer(
      containerId: org.apache.mesos.v1.mesos.ContainerID
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[WaitNestedContainer] with com.trueaccord.lenses.Updatable[WaitNestedContainer] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containerId.serializedSize) + containerId.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(containerId.serializedSize)
        containerId.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.WaitNestedContainer = {
        var __containerId = this.containerId
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __containerId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __containerId)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Call.WaitNestedContainer(
            containerId = __containerId
        )
      }
      def withContainerId(__v: org.apache.mesos.v1.mesos.ContainerID): WaitNestedContainer = copy(containerId = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => containerId
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => containerId.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Call.WaitNestedContainer
  }
  
  object WaitNestedContainer extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.WaitNestedContainer] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.WaitNestedContainer] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.WaitNestedContainer = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Call.WaitNestedContainer(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.ContainerID]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.WaitNestedContainer] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Call.WaitNestedContainer(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ContainerID]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Call.javaDescriptor.getNestedTypes.get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Call.scalaDescriptor.nestedMessages(5)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.ContainerID
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Call.WaitNestedContainer(
      containerId = org.apache.mesos.v1.mesos.ContainerID.defaultInstance
    )
    implicit class WaitNestedContainerLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.WaitNestedContainer]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.WaitNestedContainer](_l) {
      def containerId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerID] = field(_.containerId)((c_, f_) => c_.copy(containerId = f_))
    }
    final val CONTAINER_ID_FIELD_NUMBER = 1
  }
  
  /** Kills the nested container. Currently only supports SIGKILL.
    */
  @SerialVersionUID(0L)
  final case class KillNestedContainer(
      containerId: org.apache.mesos.v1.mesos.ContainerID
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[KillNestedContainer] with com.trueaccord.lenses.Updatable[KillNestedContainer] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containerId.serializedSize) + containerId.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(containerId.serializedSize)
        containerId.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.KillNestedContainer = {
        var __containerId = this.containerId
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __containerId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __containerId)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Call.KillNestedContainer(
            containerId = __containerId
        )
      }
      def withContainerId(__v: org.apache.mesos.v1.mesos.ContainerID): KillNestedContainer = copy(containerId = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => containerId
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => containerId.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Call.KillNestedContainer
  }
  
  object KillNestedContainer extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.KillNestedContainer] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.KillNestedContainer] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.KillNestedContainer = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Call.KillNestedContainer(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.ContainerID]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.KillNestedContainer] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Call.KillNestedContainer(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ContainerID]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Call.javaDescriptor.getNestedTypes.get(6)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Call.scalaDescriptor.nestedMessages(6)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.ContainerID
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Call.KillNestedContainer(
      containerId = org.apache.mesos.v1.mesos.ContainerID.defaultInstance
    )
    implicit class KillNestedContainerLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.KillNestedContainer]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.KillNestedContainer](_l) {
      def containerId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerID] = field(_.containerId)((c_, f_) => c_.copy(containerId = f_))
    }
    final val CONTAINER_ID_FIELD_NUMBER = 1
  }
  
  /** Removes a nested container and its artifacts (runtime and sandbox
    * directories).
    */
  @SerialVersionUID(0L)
  final case class RemoveNestedContainer(
      containerId: org.apache.mesos.v1.mesos.ContainerID
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[RemoveNestedContainer] with com.trueaccord.lenses.Updatable[RemoveNestedContainer] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containerId.serializedSize) + containerId.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(containerId.serializedSize)
        containerId.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.RemoveNestedContainer = {
        var __containerId = this.containerId
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __containerId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __containerId)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Call.RemoveNestedContainer(
            containerId = __containerId
        )
      }
      def withContainerId(__v: org.apache.mesos.v1.mesos.ContainerID): RemoveNestedContainer = copy(containerId = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => containerId
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => containerId.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Call.RemoveNestedContainer
  }
  
  object RemoveNestedContainer extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.RemoveNestedContainer] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.RemoveNestedContainer] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.RemoveNestedContainer = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Call.RemoveNestedContainer(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.ContainerID]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.RemoveNestedContainer] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Call.RemoveNestedContainer(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ContainerID]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Call.javaDescriptor.getNestedTypes.get(7)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Call.scalaDescriptor.nestedMessages(7)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.ContainerID
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Call.RemoveNestedContainer(
      containerId = org.apache.mesos.v1.mesos.ContainerID.defaultInstance
    )
    implicit class RemoveNestedContainerLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.RemoveNestedContainer]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.RemoveNestedContainer](_l) {
      def containerId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerID] = field(_.containerId)((c_, f_) => c_.copy(containerId = f_))
    }
    final val CONTAINER_ID_FIELD_NUMBER = 1
  }
  
  /** Launches a nested container within an executor's tree of containers.
    * The differences between this call and `LaunchNestedContainer` are:
    * 1) The container's life-cycle is tied to the lifetime of the
    *    connection used to make this call, i.e., if the connection ever
    *    breaks, the container will be destroyed.
    * 2) The nested container shares the same namespaces and cgroups as
    *    its parent container.
    * 3) Results in a streaming response of type `ProcessIO`. So the call
    *    needs to be made on a persistent connection.
    */
  @SerialVersionUID(0L)
  final case class LaunchNestedContainerSession(
      containerId: org.apache.mesos.v1.mesos.ContainerID,
      command: scala.Option[org.apache.mesos.v1.mesos.CommandInfo] = None,
      container: scala.Option[org.apache.mesos.v1.mesos.ContainerInfo] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[LaunchNestedContainerSession] with com.trueaccord.lenses.Updatable[LaunchNestedContainerSession] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containerId.serializedSize) + containerId.serializedSize
        if (command.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.get.serializedSize) + command.get.serializedSize }
        if (container.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(container.get.serializedSize) + container.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(containerId.serializedSize)
        containerId.writeTo(_output__)
        command.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        container.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.LaunchNestedContainerSession = {
        var __containerId = this.containerId
        var __command = this.command
        var __container = this.container
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __containerId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __containerId)
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __command = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __command.getOrElse(org.apache.mesos.v1.mesos.CommandInfo.defaultInstance)))
            case 26 =>
              __container = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __container.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Call.LaunchNestedContainerSession(
            containerId = __containerId,
            command = __command,
            container = __container
        )
      }
      def withContainerId(__v: org.apache.mesos.v1.mesos.ContainerID): LaunchNestedContainerSession = copy(containerId = __v)
      def getCommand: org.apache.mesos.v1.mesos.CommandInfo = command.getOrElse(org.apache.mesos.v1.mesos.CommandInfo.defaultInstance)
      def clearCommand: LaunchNestedContainerSession = copy(command = None)
      def withCommand(__v: org.apache.mesos.v1.mesos.CommandInfo): LaunchNestedContainerSession = copy(command = Some(__v))
      def getContainer: org.apache.mesos.v1.mesos.ContainerInfo = container.getOrElse(org.apache.mesos.v1.mesos.ContainerInfo.defaultInstance)
      def clearContainer: LaunchNestedContainerSession = copy(container = None)
      def withContainer(__v: org.apache.mesos.v1.mesos.ContainerInfo): LaunchNestedContainerSession = copy(container = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => containerId
          case 2 => command.orNull
          case 3 => container.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => containerId.toPMessage
          case 2 => command.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => container.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Call.LaunchNestedContainerSession
  }
  
  object LaunchNestedContainerSession extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.LaunchNestedContainerSession] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.LaunchNestedContainerSession] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.LaunchNestedContainerSession = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Call.LaunchNestedContainerSession(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.ContainerID],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.CommandInfo]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ContainerInfo]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.LaunchNestedContainerSession] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Call.LaunchNestedContainerSession(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ContainerID],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.CommandInfo]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ContainerInfo]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Call.javaDescriptor.getNestedTypes.get(8)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Call.scalaDescriptor.nestedMessages(8)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.ContainerID
        case 2 => __out = org.apache.mesos.v1.mesos.CommandInfo
        case 3 => __out = org.apache.mesos.v1.mesos.ContainerInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Call.LaunchNestedContainerSession(
      containerId = org.apache.mesos.v1.mesos.ContainerID.defaultInstance
    )
    implicit class LaunchNestedContainerSessionLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.LaunchNestedContainerSession]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.LaunchNestedContainerSession](_l) {
      def containerId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerID] = field(_.containerId)((c_, f_) => c_.copy(containerId = f_))
      def command: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.CommandInfo] = field(_.getCommand)((c_, f_) => c_.copy(command = Some(f_)))
      def optionalCommand: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.CommandInfo]] = field(_.command)((c_, f_) => c_.copy(command = f_))
      def container: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerInfo] = field(_.getContainer)((c_, f_) => c_.copy(container = Some(f_)))
      def optionalContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ContainerInfo]] = field(_.container)((c_, f_) => c_.copy(container = f_))
    }
    final val CONTAINER_ID_FIELD_NUMBER = 1
    final val COMMAND_FIELD_NUMBER = 2
    final val CONTAINER_FIELD_NUMBER = 3
  }
  
  /** Attaches the caller to the STDIN of the entry point of the container.
    * Clients can use this to stream input data to a container.
    * Note that this call needs to be made on a persistent connection by
    * streaming a CONTAINER_ID message followed by one or more PROCESS_IO
    * messages.
    */
  @SerialVersionUID(0L)
  final case class AttachContainerInput(
                                         `type`: scala.Option[Call.AttachContainerInput.Type] = None,
                                         containerId: scala.Option[org.apache.mesos.v1.mesos.ContainerID] = None,
                                         processIo: scala.Option[ProcessIO] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[AttachContainerInput] with com.trueaccord.lenses.Updatable[AttachContainerInput] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
        if (containerId.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containerId.get.serializedSize) + containerId.get.serializedSize }
        if (processIo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(processIo.get.serializedSize) + processIo.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        `type`.foreach { __v =>
          _output__.writeEnum(1, __v.value)
        };
        containerId.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        processIo.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.AttachContainerInput = {
        var __type = this.`type`
        var __containerId = this.containerId
        var __processIo = this.processIo
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __type = Some(agent.Call.AttachContainerInput.Type.fromValue(_input__.readEnum()))
            case 18 =>
              __containerId = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __containerId.getOrElse(org.apache.mesos.v1.mesos.ContainerID.defaultInstance)))
            case 26 =>
              __processIo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __processIo.getOrElse(agent.ProcessIO.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        agent.Call.AttachContainerInput(
            `type` = __type,
            containerId = __containerId,
            processIo = __processIo
        )
      }
      def getType: Call.AttachContainerInput.Type = `type`.getOrElse(agent.Call.AttachContainerInput.Type.UNKNOWN)
      def clearType: AttachContainerInput = copy(`type` = None)
      def withType(__v: Call.AttachContainerInput.Type): AttachContainerInput = copy(`type` = Some(__v))
      def getContainerId: org.apache.mesos.v1.mesos.ContainerID = containerId.getOrElse(org.apache.mesos.v1.mesos.ContainerID.defaultInstance)
      def clearContainerId: AttachContainerInput = copy(containerId = None)
      def withContainerId(__v: org.apache.mesos.v1.mesos.ContainerID): AttachContainerInput = copy(containerId = Some(__v))
      def getProcessIo: ProcessIO = processIo.getOrElse(agent.ProcessIO.defaultInstance)
      def clearProcessIo: AttachContainerInput = copy(processIo = None)
      def withProcessIo(__v: ProcessIO): AttachContainerInput = copy(processIo = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => `type`.map(_.javaValueDescriptor).orNull
          case 2 => containerId.orNull
          case 3 => processIo.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => containerId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => processIo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Call.AttachContainerInput
  }
  
  object AttachContainerInput extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.AttachContainerInput] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.AttachContainerInput] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.AttachContainerInput = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Call.AttachContainerInput(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => agent.Call.AttachContainerInput.Type.fromValue(__e.getNumber)),
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ContainerID]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[ProcessIO]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.AttachContainerInput] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Call.AttachContainerInput(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => agent.Call.AttachContainerInput.Type.fromValue(__e.number)),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ContainerID]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[ProcessIO]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Call.javaDescriptor.getNestedTypes.get(9)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Call.scalaDescriptor.nestedMessages(9)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = org.apache.mesos.v1.mesos.ContainerID
        case 3 => __out = agent.ProcessIO
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => agent.Call.AttachContainerInput.Type
      }
    }
    lazy val defaultInstance = agent.Call.AttachContainerInput(
    )
    sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
      type EnumType = Type
      def isUnknown: Boolean = false
      def isContainerId: Boolean = false
      def isProcessIo: Boolean = false
      def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = agent.Call.AttachContainerInput.Type
    }
    
    object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
      implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
      @SerialVersionUID(0L)
      case object UNKNOWN extends Type {
        val value = 0
        val index = 0
        val name = "UNKNOWN"
        override def isUnknown: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object CONTAINER_ID extends Type {
        val value = 1
        val index = 1
        val name = "CONTAINER_ID"
        override def isContainerId: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object PROCESS_IO extends Type {
        val value = 2
        val index = 2
        val name = "PROCESS_IO"
        override def isProcessIo: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
      
      lazy val values = scala.collection.Seq(UNKNOWN, CONTAINER_ID, PROCESS_IO)
      def fromValue(value: Int): Type = value match {
        case 0 => UNKNOWN
        case 1 => CONTAINER_ID
        case 2 => PROCESS_IO
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = agent.Call.AttachContainerInput.javaDescriptor.getEnumTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = agent.Call.AttachContainerInput.scalaDescriptor.enums(0)
    }
    implicit class AttachContainerInputLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.AttachContainerInput]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.AttachContainerInput](_l) {
      def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.AttachContainerInput.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
      def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.AttachContainerInput.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def containerId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerID] = field(_.getContainerId)((c_, f_) => c_.copy(containerId = Some(f_)))
      def optionalContainerId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ContainerID]] = field(_.containerId)((c_, f_) => c_.copy(containerId = f_))
      def processIo: _root_.com.trueaccord.lenses.Lens[UpperPB, ProcessIO] = field(_.getProcessIo)((c_, f_) => c_.copy(processIo = Some(f_)))
      def optionalProcessIo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[ProcessIO]] = field(_.processIo)((c_, f_) => c_.copy(processIo = f_))
    }
    final val TYPE_FIELD_NUMBER = 1
    final val CONTAINER_ID_FIELD_NUMBER = 2
    final val PROCESS_IO_FIELD_NUMBER = 3
  }
  
  /** Attaches the caller to the STDOUT and STDERR of the entrypoint of
    * the container. Clients can use this to stream output/error from the
    * container. This call will result in a streaming response of `ProcessIO`;
    * so this call needs to be made on a persistent connection.
    */
  @SerialVersionUID(0L)
  final case class AttachContainerOutput(
      containerId: org.apache.mesos.v1.mesos.ContainerID
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[AttachContainerOutput] with com.trueaccord.lenses.Updatable[AttachContainerOutput] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containerId.serializedSize) + containerId.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(containerId.serializedSize)
        containerId.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Call.AttachContainerOutput = {
        var __containerId = this.containerId
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __containerId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __containerId)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Call.AttachContainerOutput(
            containerId = __containerId
        )
      }
      def withContainerId(__v: org.apache.mesos.v1.mesos.ContainerID): AttachContainerOutput = copy(containerId = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => containerId
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => containerId.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Call.AttachContainerOutput
  }
  
  object AttachContainerOutput extends com.trueaccord.scalapb.GeneratedMessageCompanion[Call.AttachContainerOutput] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Call.AttachContainerOutput] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Call.AttachContainerOutput = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Call.AttachContainerOutput(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.ContainerID]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Call.AttachContainerOutput] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Call.AttachContainerOutput(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ContainerID]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Call.javaDescriptor.getNestedTypes.get(10)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Call.scalaDescriptor.nestedMessages(10)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.ContainerID
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Call.AttachContainerOutput(
      containerId = org.apache.mesos.v1.mesos.ContainerID.defaultInstance
    )
    implicit class AttachContainerOutputLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.AttachContainerOutput]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call.AttachContainerOutput](_l) {
      def containerId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerID] = field(_.containerId)((c_, f_) => c_.copy(containerId = f_))
    }
    final val CONTAINER_ID_FIELD_NUMBER = 1
  }
  
  implicit class CallLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Call]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Call](_l) {
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
    def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def getMetrics: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.GetMetrics] = field(_.getGetMetrics)((c_, f_) => c_.copy(getMetrics = Some(f_)))
    def optionalGetMetrics: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.GetMetrics]] = field(_.getMetrics)((c_, f_) => c_.copy(getMetrics = f_))
    def setLoggingLevel: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.SetLoggingLevel] = field(_.getSetLoggingLevel)((c_, f_) => c_.copy(setLoggingLevel = Some(f_)))
    def optionalSetLoggingLevel: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.SetLoggingLevel]] = field(_.setLoggingLevel)((c_, f_) => c_.copy(setLoggingLevel = f_))
    def listFiles: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.ListFiles] = field(_.getListFiles)((c_, f_) => c_.copy(listFiles = Some(f_)))
    def optionalListFiles: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.ListFiles]] = field(_.listFiles)((c_, f_) => c_.copy(listFiles = f_))
    def readFile: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.ReadFile] = field(_.getReadFile)((c_, f_) => c_.copy(readFile = Some(f_)))
    def optionalReadFile: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.ReadFile]] = field(_.readFile)((c_, f_) => c_.copy(readFile = f_))
    def launchNestedContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.LaunchNestedContainer] = field(_.getLaunchNestedContainer)((c_, f_) => c_.copy(launchNestedContainer = Some(f_)))
    def optionalLaunchNestedContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.LaunchNestedContainer]] = field(_.launchNestedContainer)((c_, f_) => c_.copy(launchNestedContainer = f_))
    def waitNestedContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.WaitNestedContainer] = field(_.getWaitNestedContainer)((c_, f_) => c_.copy(waitNestedContainer = Some(f_)))
    def optionalWaitNestedContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.WaitNestedContainer]] = field(_.waitNestedContainer)((c_, f_) => c_.copy(waitNestedContainer = f_))
    def killNestedContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.KillNestedContainer] = field(_.getKillNestedContainer)((c_, f_) => c_.copy(killNestedContainer = Some(f_)))
    def optionalKillNestedContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.KillNestedContainer]] = field(_.killNestedContainer)((c_, f_) => c_.copy(killNestedContainer = f_))
    def removeNestedContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.RemoveNestedContainer] = field(_.getRemoveNestedContainer)((c_, f_) => c_.copy(removeNestedContainer = Some(f_)))
    def optionalRemoveNestedContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.RemoveNestedContainer]] = field(_.removeNestedContainer)((c_, f_) => c_.copy(removeNestedContainer = f_))
    def launchNestedContainerSession: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.LaunchNestedContainerSession] = field(_.getLaunchNestedContainerSession)((c_, f_) => c_.copy(launchNestedContainerSession = Some(f_)))
    def optionalLaunchNestedContainerSession: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.LaunchNestedContainerSession]] = field(_.launchNestedContainerSession)((c_, f_) => c_.copy(launchNestedContainerSession = f_))
    def attachContainerInput: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.AttachContainerInput] = field(_.getAttachContainerInput)((c_, f_) => c_.copy(attachContainerInput = Some(f_)))
    def optionalAttachContainerInput: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.AttachContainerInput]] = field(_.attachContainerInput)((c_, f_) => c_.copy(attachContainerInput = f_))
    def attachContainerOutput: _root_.com.trueaccord.lenses.Lens[UpperPB, Call.AttachContainerOutput] = field(_.getAttachContainerOutput)((c_, f_) => c_.copy(attachContainerOutput = Some(f_)))
    def optionalAttachContainerOutput: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Call.AttachContainerOutput]] = field(_.attachContainerOutput)((c_, f_) => c_.copy(attachContainerOutput = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val GET_METRICS_FIELD_NUMBER = 2
  final val SET_LOGGING_LEVEL_FIELD_NUMBER = 3
  final val LIST_FILES_FIELD_NUMBER = 4
  final val READ_FILE_FIELD_NUMBER = 5
  final val LAUNCH_NESTED_CONTAINER_FIELD_NUMBER = 6
  final val WAIT_NESTED_CONTAINER_FIELD_NUMBER = 7
  final val KILL_NESTED_CONTAINER_FIELD_NUMBER = 8
  final val REMOVE_NESTED_CONTAINER_FIELD_NUMBER = 12
  final val LAUNCH_NESTED_CONTAINER_SESSION_FIELD_NUMBER = 9
  final val ATTACH_CONTAINER_INPUT_FIELD_NUMBER = 10
  final val ATTACH_CONTAINER_OUTPUT_FIELD_NUMBER = 11
}
