// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.agent

import org.apache.mesos.v1.agent

/** *
  * Synchronous responses for all calls made to the v1 agent API.
  */
@SerialVersionUID(0L)
final case class Response(
                           `type`: scala.Option[Response.Type] = None,
                           getHealth: scala.Option[Response.GetHealth] = None,
                           getFlags: scala.Option[Response.GetFlags] = None,
                           getVersion: scala.Option[Response.GetVersion] = None,
                           getMetrics: scala.Option[Response.GetMetrics] = None,
                           getLoggingLevel: scala.Option[Response.GetLoggingLevel] = None,
                           listFiles: scala.Option[Response.ListFiles] = None,
                           readFile: scala.Option[Response.ReadFile] = None,
                           getState: scala.Option[Response.GetState] = None,
                           getContainers: scala.Option[Response.GetContainers] = None,
                           getFrameworks: scala.Option[Response.GetFrameworks] = None,
                           getExecutors: scala.Option[Response.GetExecutors] = None,
                           getTasks: scala.Option[Response.GetTasks] = None,
                           getAgent: scala.Option[Response.GetAgent] = None,
                           waitNestedContainer: scala.Option[Response.WaitNestedContainer] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Response] with com.trueaccord.lenses.Updatable[Response] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
      if (getHealth.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getHealth.get.serializedSize) + getHealth.get.serializedSize }
      if (getFlags.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getFlags.get.serializedSize) + getFlags.get.serializedSize }
      if (getVersion.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getVersion.get.serializedSize) + getVersion.get.serializedSize }
      if (getMetrics.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getMetrics.get.serializedSize) + getMetrics.get.serializedSize }
      if (getLoggingLevel.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getLoggingLevel.get.serializedSize) + getLoggingLevel.get.serializedSize }
      if (listFiles.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(listFiles.get.serializedSize) + listFiles.get.serializedSize }
      if (readFile.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(readFile.get.serializedSize) + readFile.get.serializedSize }
      if (getState.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getState.get.serializedSize) + getState.get.serializedSize }
      if (getContainers.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getContainers.get.serializedSize) + getContainers.get.serializedSize }
      if (getFrameworks.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getFrameworks.get.serializedSize) + getFrameworks.get.serializedSize }
      if (getExecutors.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getExecutors.get.serializedSize) + getExecutors.get.serializedSize }
      if (getTasks.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getTasks.get.serializedSize) + getTasks.get.serializedSize }
      if (getAgent.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getAgent.get.serializedSize) + getAgent.get.serializedSize }
      if (waitNestedContainer.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(waitNestedContainer.get.serializedSize) + waitNestedContainer.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      `type`.foreach { __v =>
        _output__.writeEnum(1, __v.value)
      };
      getHealth.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getFlags.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getVersion.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getMetrics.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getLoggingLevel.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      listFiles.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      readFile.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getState.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getContainers.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getFrameworks.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getExecutors.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getTasks.foreach { __v =>
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      waitNestedContainer.foreach { __v =>
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getAgent.foreach { __v =>
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response = {
      var __type = this.`type`
      var __getHealth = this.getHealth
      var __getFlags = this.getFlags
      var __getVersion = this.getVersion
      var __getMetrics = this.getMetrics
      var __getLoggingLevel = this.getLoggingLevel
      var __listFiles = this.listFiles
      var __readFile = this.readFile
      var __getState = this.getState
      var __getContainers = this.getContainers
      var __getFrameworks = this.getFrameworks
      var __getExecutors = this.getExecutors
      var __getTasks = this.getTasks
      var __getAgent = this.getAgent
      var __waitNestedContainer = this.waitNestedContainer
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = Some(agent.Response.Type.fromValue(_input__.readEnum()))
          case 18 =>
            __getHealth = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getHealth.getOrElse(agent.Response.GetHealth.defaultInstance)))
          case 26 =>
            __getFlags = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getFlags.getOrElse(agent.Response.GetFlags.defaultInstance)))
          case 34 =>
            __getVersion = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getVersion.getOrElse(agent.Response.GetVersion.defaultInstance)))
          case 42 =>
            __getMetrics = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getMetrics.getOrElse(agent.Response.GetMetrics.defaultInstance)))
          case 50 =>
            __getLoggingLevel = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getLoggingLevel.getOrElse(agent.Response.GetLoggingLevel.defaultInstance)))
          case 58 =>
            __listFiles = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __listFiles.getOrElse(agent.Response.ListFiles.defaultInstance)))
          case 66 =>
            __readFile = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __readFile.getOrElse(agent.Response.ReadFile.defaultInstance)))
          case 74 =>
            __getState = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getState.getOrElse(agent.Response.GetState.defaultInstance)))
          case 82 =>
            __getContainers = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getContainers.getOrElse(agent.Response.GetContainers.defaultInstance)))
          case 90 =>
            __getFrameworks = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getFrameworks.getOrElse(agent.Response.GetFrameworks.defaultInstance)))
          case 98 =>
            __getExecutors = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getExecutors.getOrElse(agent.Response.GetExecutors.defaultInstance)))
          case 106 =>
            __getTasks = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getTasks.getOrElse(agent.Response.GetTasks.defaultInstance)))
          case 122 =>
            __getAgent = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getAgent.getOrElse(agent.Response.GetAgent.defaultInstance)))
          case 114 =>
            __waitNestedContainer = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __waitNestedContainer.getOrElse(agent.Response.WaitNestedContainer.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      agent.Response(
          `type` = __type,
          getHealth = __getHealth,
          getFlags = __getFlags,
          getVersion = __getVersion,
          getMetrics = __getMetrics,
          getLoggingLevel = __getLoggingLevel,
          listFiles = __listFiles,
          readFile = __readFile,
          getState = __getState,
          getContainers = __getContainers,
          getFrameworks = __getFrameworks,
          getExecutors = __getExecutors,
          getTasks = __getTasks,
          getAgent = __getAgent,
          waitNestedContainer = __waitNestedContainer
      )
    }
    def getType: Response.Type = `type`.getOrElse(agent.Response.Type.UNKNOWN)
    def clearType: Response = copy(`type` = None)
    def withType(__v: Response.Type): Response = copy(`type` = Some(__v))
    def getGetHealth: Response.GetHealth = getHealth.getOrElse(agent.Response.GetHealth.defaultInstance)
    def clearGetHealth: Response = copy(getHealth = None)
    def withGetHealth(__v: Response.GetHealth): Response = copy(getHealth = Some(__v))
    def getGetFlags: Response.GetFlags = getFlags.getOrElse(agent.Response.GetFlags.defaultInstance)
    def clearGetFlags: Response = copy(getFlags = None)
    def withGetFlags(__v: Response.GetFlags): Response = copy(getFlags = Some(__v))
    def getGetVersion: Response.GetVersion = getVersion.getOrElse(agent.Response.GetVersion.defaultInstance)
    def clearGetVersion: Response = copy(getVersion = None)
    def withGetVersion(__v: Response.GetVersion): Response = copy(getVersion = Some(__v))
    def getGetMetrics: Response.GetMetrics = getMetrics.getOrElse(agent.Response.GetMetrics.defaultInstance)
    def clearGetMetrics: Response = copy(getMetrics = None)
    def withGetMetrics(__v: Response.GetMetrics): Response = copy(getMetrics = Some(__v))
    def getGetLoggingLevel: Response.GetLoggingLevel = getLoggingLevel.getOrElse(agent.Response.GetLoggingLevel.defaultInstance)
    def clearGetLoggingLevel: Response = copy(getLoggingLevel = None)
    def withGetLoggingLevel(__v: Response.GetLoggingLevel): Response = copy(getLoggingLevel = Some(__v))
    def getListFiles: Response.ListFiles = listFiles.getOrElse(agent.Response.ListFiles.defaultInstance)
    def clearListFiles: Response = copy(listFiles = None)
    def withListFiles(__v: Response.ListFiles): Response = copy(listFiles = Some(__v))
    def getReadFile: Response.ReadFile = readFile.getOrElse(agent.Response.ReadFile.defaultInstance)
    def clearReadFile: Response = copy(readFile = None)
    def withReadFile(__v: Response.ReadFile): Response = copy(readFile = Some(__v))
    def getGetState: Response.GetState = getState.getOrElse(agent.Response.GetState.defaultInstance)
    def clearGetState: Response = copy(getState = None)
    def withGetState(__v: Response.GetState): Response = copy(getState = Some(__v))
    def getGetContainers: Response.GetContainers = getContainers.getOrElse(agent.Response.GetContainers.defaultInstance)
    def clearGetContainers: Response = copy(getContainers = None)
    def withGetContainers(__v: Response.GetContainers): Response = copy(getContainers = Some(__v))
    def getGetFrameworks: Response.GetFrameworks = getFrameworks.getOrElse(agent.Response.GetFrameworks.defaultInstance)
    def clearGetFrameworks: Response = copy(getFrameworks = None)
    def withGetFrameworks(__v: Response.GetFrameworks): Response = copy(getFrameworks = Some(__v))
    def getGetExecutors: Response.GetExecutors = getExecutors.getOrElse(agent.Response.GetExecutors.defaultInstance)
    def clearGetExecutors: Response = copy(getExecutors = None)
    def withGetExecutors(__v: Response.GetExecutors): Response = copy(getExecutors = Some(__v))
    def getGetTasks: Response.GetTasks = getTasks.getOrElse(agent.Response.GetTasks.defaultInstance)
    def clearGetTasks: Response = copy(getTasks = None)
    def withGetTasks(__v: Response.GetTasks): Response = copy(getTasks = Some(__v))
    def getGetAgent: Response.GetAgent = getAgent.getOrElse(agent.Response.GetAgent.defaultInstance)
    def clearGetAgent: Response = copy(getAgent = None)
    def withGetAgent(__v: Response.GetAgent): Response = copy(getAgent = Some(__v))
    def getWaitNestedContainer: Response.WaitNestedContainer = waitNestedContainer.getOrElse(agent.Response.WaitNestedContainer.defaultInstance)
    def clearWaitNestedContainer: Response = copy(waitNestedContainer = None)
    def withWaitNestedContainer(__v: Response.WaitNestedContainer): Response = copy(waitNestedContainer = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.map(_.javaValueDescriptor).orNull
        case 2 => getHealth.orNull
        case 3 => getFlags.orNull
        case 4 => getVersion.orNull
        case 5 => getMetrics.orNull
        case 6 => getLoggingLevel.orNull
        case 7 => listFiles.orNull
        case 8 => readFile.orNull
        case 9 => getState.orNull
        case 10 => getContainers.orNull
        case 11 => getFrameworks.orNull
        case 12 => getExecutors.orNull
        case 13 => getTasks.orNull
        case 15 => getAgent.orNull
        case 14 => waitNestedContainer.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => getHealth.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => getFlags.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => getVersion.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => getMetrics.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => getLoggingLevel.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => listFiles.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => readFile.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => getState.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => getContainers.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => getFrameworks.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => getExecutors.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => getTasks.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => getAgent.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => waitNestedContainer.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = agent.Response
}

object Response extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    agent.Response(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => agent.Response.Type.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Response.GetHealth]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Response.GetFlags]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Response.GetVersion]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Response.GetMetrics]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Response.GetLoggingLevel]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Response.ListFiles]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Response.ReadFile]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Response.GetState]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Response.GetContainers]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Response.GetFrameworks]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Response.GetExecutors]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Response.GetTasks]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Response.GetAgent]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[Response.WaitNestedContainer]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[Response] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      agent.Response(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => agent.Response.Type.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Response.GetHealth]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Response.GetFlags]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Response.GetVersion]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Response.GetMetrics]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Response.GetLoggingLevel]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Response.ListFiles]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Response.ReadFile]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[Response.GetState]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Response.GetContainers]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[Response.GetFrameworks]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[Response.GetExecutors]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[Response.GetTasks]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[Response.GetAgent]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[Response.WaitNestedContainer]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AgentProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AgentProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = agent.Response.GetHealth
      case 3 => __out = agent.Response.GetFlags
      case 4 => __out = agent.Response.GetVersion
      case 5 => __out = agent.Response.GetMetrics
      case 6 => __out = agent.Response.GetLoggingLevel
      case 7 => __out = agent.Response.ListFiles
      case 8 => __out = agent.Response.ReadFile
      case 9 => __out = agent.Response.GetState
      case 10 => __out = agent.Response.GetContainers
      case 11 => __out = agent.Response.GetFrameworks
      case 12 => __out = agent.Response.GetExecutors
      case 13 => __out = agent.Response.GetTasks
      case 15 => __out = agent.Response.GetAgent
      case 14 => __out = agent.Response.WaitNestedContainer
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => agent.Response.Type
    }
  }
  lazy val defaultInstance = agent.Response(
  )
  sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Type
    def isUnknown: Boolean = false
    def isGetHealth: Boolean = false
    def isGetFlags: Boolean = false
    def isGetVersion: Boolean = false
    def isGetMetrics: Boolean = false
    def isGetLoggingLevel: Boolean = false
    def isListFiles: Boolean = false
    def isReadFile: Boolean = false
    def isGetState: Boolean = false
    def isGetContainers: Boolean = false
    def isGetFrameworks: Boolean = false
    def isGetExecutors: Boolean = false
    def isGetTasks: Boolean = false
    def isGetAgent: Boolean = false
    def isWaitNestedContainer: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = agent.Response.Type
  }
  
  object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object UNKNOWN extends Type {
      val value = 0
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_HEALTH extends Type {
      val value = 1
      val index = 1
      val name = "GET_HEALTH"
      override def isGetHealth: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_FLAGS extends Type {
      val value = 2
      val index = 2
      val name = "GET_FLAGS"
      override def isGetFlags: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_VERSION extends Type {
      val value = 3
      val index = 3
      val name = "GET_VERSION"
      override def isGetVersion: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_METRICS extends Type {
      val value = 4
      val index = 4
      val name = "GET_METRICS"
      override def isGetMetrics: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_LOGGING_LEVEL extends Type {
      val value = 5
      val index = 5
      val name = "GET_LOGGING_LEVEL"
      override def isGetLoggingLevel: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LIST_FILES extends Type {
      val value = 6
      val index = 6
      val name = "LIST_FILES"
      override def isListFiles: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object READ_FILE extends Type {
      val value = 7
      val index = 7
      val name = "READ_FILE"
      override def isReadFile: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_STATE extends Type {
      val value = 8
      val index = 8
      val name = "GET_STATE"
      override def isGetState: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_CONTAINERS extends Type {
      val value = 9
      val index = 9
      val name = "GET_CONTAINERS"
      override def isGetContainers: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_FRAMEWORKS extends Type {
      val value = 10
      val index = 10
      val name = "GET_FRAMEWORKS"
      override def isGetFrameworks: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_EXECUTORS extends Type {
      val value = 11
      val index = 11
      val name = "GET_EXECUTORS"
      override def isGetExecutors: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_TASKS extends Type {
      val value = 12
      val index = 12
      val name = "GET_TASKS"
      override def isGetTasks: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_AGENT extends Type {
      val value = 14
      val index = 13
      val name = "GET_AGENT"
      override def isGetAgent: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WAIT_NESTED_CONTAINER extends Type {
      val value = 13
      val index = 14
      val name = "WAIT_NESTED_CONTAINER"
      override def isWaitNestedContainer: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(UNKNOWN, GET_HEALTH, GET_FLAGS, GET_VERSION, GET_METRICS, GET_LOGGING_LEVEL, LIST_FILES, READ_FILE, GET_STATE, GET_CONTAINERS, GET_FRAMEWORKS, GET_EXECUTORS, GET_TASKS, GET_AGENT, WAIT_NESTED_CONTAINER)
    def fromValue(value: Int): Type = value match {
      case 0 => UNKNOWN
      case 1 => GET_HEALTH
      case 2 => GET_FLAGS
      case 3 => GET_VERSION
      case 4 => GET_METRICS
      case 5 => GET_LOGGING_LEVEL
      case 6 => LIST_FILES
      case 7 => READ_FILE
      case 8 => GET_STATE
      case 9 => GET_CONTAINERS
      case 10 => GET_FRAMEWORKS
      case 11 => GET_EXECUTORS
      case 12 => GET_TASKS
      case 13 => WAIT_NESTED_CONTAINER
      case 14 => GET_AGENT
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = agent.Response.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = agent.Response.scalaDescriptor.enums(0)
  }
  /** `healthy` would be true if the agent is healthy. Delayed responses are also
    * indicative of the poor health of the agent.
    */
  @SerialVersionUID(0L)
  final case class GetHealth(
      healthy: Boolean
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetHealth] with com.trueaccord.lenses.Updatable[GetHealth] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, healthy)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeBool(1, healthy)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetHealth = {
        var __healthy = this.healthy
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __healthy = _input__.readBool()
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Response.GetHealth(
            healthy = __healthy
        )
      }
      def withHealthy(__v: Boolean): GetHealth = copy(healthy = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => healthy
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PBoolean(healthy)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.GetHealth
  }
  
  object GetHealth extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetHealth] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetHealth] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetHealth = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.GetHealth(
        __fieldsMap(__fields.get(0)).asInstanceOf[Boolean]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetHealth] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.GetHealth(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Boolean]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.GetHealth(
      healthy = false
    )
    implicit class GetHealthLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetHealth]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetHealth](_l) {
      def healthy: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.healthy)((c_, f_) => c_.copy(healthy = f_))
    }
    final val HEALTHY_FIELD_NUMBER = 1
  }
  
  /** Contains the flag configuration of the agent.
    */
  @SerialVersionUID(0L)
  final case class GetFlags(
      flags: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Flag] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetFlags] with com.trueaccord.lenses.Updatable[GetFlags] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        flags.foreach(flags => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(flags.serializedSize) + flags.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        flags.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetFlags = {
        val __flags = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Flag] ++= this.flags)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __flags += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Flag.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        agent.Response.GetFlags(
            flags = __flags.result()
        )
      }
      def clearFlags = copy(flags = _root_.scala.collection.Seq.empty)
      def addFlags(__vs: org.apache.mesos.v1.mesos.Flag*): GetFlags = addAllFlags(__vs)
      def addAllFlags(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Flag]): GetFlags = copy(flags = flags ++ __vs)
      def withFlags(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Flag]): GetFlags = copy(flags = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => flags
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(flags.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.GetFlags
  }
  
  object GetFlags extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetFlags] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetFlags] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetFlags = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.GetFlags(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Flag]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetFlags] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.GetFlags(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Flag]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.Flag
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.GetFlags(
    )
    implicit class GetFlagsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetFlags]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetFlags](_l) {
      def flags: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Flag]] = field(_.flags)((c_, f_) => c_.copy(flags = f_))
    }
    final val FLAGS_FIELD_NUMBER = 1
  }
  
  /** Contains the version information of the agent.
    */
  @SerialVersionUID(0L)
  final case class GetVersion(
      versionInfo: org.apache.mesos.v1.mesos.VersionInfo
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetVersion] with com.trueaccord.lenses.Updatable[GetVersion] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(versionInfo.serializedSize) + versionInfo.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(versionInfo.serializedSize)
        versionInfo.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetVersion = {
        var __versionInfo = this.versionInfo
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __versionInfo = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __versionInfo)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Response.GetVersion(
            versionInfo = __versionInfo
        )
      }
      def withVersionInfo(__v: org.apache.mesos.v1.mesos.VersionInfo): GetVersion = copy(versionInfo = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => versionInfo
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => versionInfo.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.GetVersion
  }
  
  object GetVersion extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetVersion] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetVersion] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetVersion = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.GetVersion(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.VersionInfo]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetVersion] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.GetVersion(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.VersionInfo]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.VersionInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.GetVersion(
      versionInfo = org.apache.mesos.v1.mesos.VersionInfo.defaultInstance
    )
    implicit class GetVersionLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetVersion]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetVersion](_l) {
      def versionInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.VersionInfo] = field(_.versionInfo)((c_, f_) => c_.copy(versionInfo = f_))
    }
    final val VERSION_INFO_FIELD_NUMBER = 1
  }
  
  /** Contains a snapshot of the current metrics.
    */
  @SerialVersionUID(0L)
  final case class GetMetrics(
      metrics: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Metric] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetMetrics] with com.trueaccord.lenses.Updatable[GetMetrics] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        metrics.foreach(metrics => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(metrics.serializedSize) + metrics.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        metrics.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetMetrics = {
        val __metrics = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Metric] ++= this.metrics)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __metrics += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Metric.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        agent.Response.GetMetrics(
            metrics = __metrics.result()
        )
      }
      def clearMetrics = copy(metrics = _root_.scala.collection.Seq.empty)
      def addMetrics(__vs: org.apache.mesos.v1.mesos.Metric*): GetMetrics = addAllMetrics(__vs)
      def addAllMetrics(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Metric]): GetMetrics = copy(metrics = metrics ++ __vs)
      def withMetrics(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Metric]): GetMetrics = copy(metrics = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => metrics
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(metrics.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.GetMetrics
  }
  
  object GetMetrics extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetMetrics] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetMetrics] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetMetrics = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.GetMetrics(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Metric]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetMetrics] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.GetMetrics(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Metric]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.Metric
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.GetMetrics(
    )
    implicit class GetMetricsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetMetrics]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetMetrics](_l) {
      def metrics: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Metric]] = field(_.metrics)((c_, f_) => c_.copy(metrics = f_))
    }
    final val METRICS_FIELD_NUMBER = 1
  }
  
  /** Contains the logging level of the agent.
    */
  @SerialVersionUID(0L)
  final case class GetLoggingLevel(
      level: Int
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetLoggingLevel] with com.trueaccord.lenses.Updatable[GetLoggingLevel] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, level)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeUInt32(1, level)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetLoggingLevel = {
        var __level = this.level
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __level = _input__.readUInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Response.GetLoggingLevel(
            level = __level
        )
      }
      def withLevel(__v: Int): GetLoggingLevel = copy(level = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => level
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(level)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.GetLoggingLevel
  }
  
  object GetLoggingLevel extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetLoggingLevel] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetLoggingLevel] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetLoggingLevel = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.GetLoggingLevel(
        __fieldsMap(__fields.get(0)).asInstanceOf[Int]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetLoggingLevel] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.GetLoggingLevel(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.GetLoggingLevel(
      level = 0
    )
    implicit class GetLoggingLevelLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetLoggingLevel]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetLoggingLevel](_l) {
      def level: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.level)((c_, f_) => c_.copy(level = f_))
    }
    final val LEVEL_FIELD_NUMBER = 1
  }
  
  /** Contains the file listing(similar to `ls -l`) for a directory.
    */
  @SerialVersionUID(0L)
  final case class ListFiles(
      fileInfos: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FileInfo] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ListFiles] with com.trueaccord.lenses.Updatable[ListFiles] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        fileInfos.foreach(fileInfos => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(fileInfos.serializedSize) + fileInfos.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        fileInfos.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.ListFiles = {
        val __fileInfos = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.FileInfo] ++= this.fileInfos)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __fileInfos += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.FileInfo.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        agent.Response.ListFiles(
            fileInfos = __fileInfos.result()
        )
      }
      def clearFileInfos = copy(fileInfos = _root_.scala.collection.Seq.empty)
      def addFileInfos(__vs: org.apache.mesos.v1.mesos.FileInfo*): ListFiles = addAllFileInfos(__vs)
      def addAllFileInfos(__vs: TraversableOnce[org.apache.mesos.v1.mesos.FileInfo]): ListFiles = copy(fileInfos = fileInfos ++ __vs)
      def withFileInfos(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FileInfo]): ListFiles = copy(fileInfos = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => fileInfos
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(fileInfos.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.ListFiles
  }
  
  object ListFiles extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.ListFiles] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.ListFiles] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.ListFiles = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.ListFiles(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FileInfo]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.ListFiles] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.ListFiles(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FileInfo]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(5)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.FileInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.ListFiles(
    )
    implicit class ListFilesLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.ListFiles]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.ListFiles](_l) {
      def fileInfos: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FileInfo]] = field(_.fileInfos)((c_, f_) => c_.copy(fileInfos = f_))
    }
    final val FILE_INFOS_FIELD_NUMBER = 1
  }
  
  /** Contains the file data.
    *
    * @param size
    *   The size of file (in bytes).
    */
  @SerialVersionUID(0L)
  final case class ReadFile(
      size: Long,
      data: _root_.com.google.protobuf.ByteString
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ReadFile] with com.trueaccord.lenses.Updatable[ReadFile] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, size)
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, data)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeUInt64(1, size)
        _output__.writeBytes(2, data)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.ReadFile = {
        var __size = this.size
        var __data = this.data
        var __requiredFields0: Long = 0x3L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __size = _input__.readUInt64()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __data = _input__.readBytes()
              __requiredFields0 &= 0xfffffffffffffffdL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        agent.Response.ReadFile(
            size = __size,
            data = __data
        )
      }
      def withSize(__v: Long): ReadFile = copy(size = __v)
      def withData(__v: _root_.com.google.protobuf.ByteString): ReadFile = copy(data = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => size
          case 2 => data
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PLong(size)
          case 2 => _root_.scalapb.descriptors.PByteString(data)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.ReadFile
  }
  
  object ReadFile extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.ReadFile] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.ReadFile] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.ReadFile = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.ReadFile(
        __fieldsMap(__fields.get(0)).asInstanceOf[Long],
        __fieldsMap(__fields.get(1)).asInstanceOf[_root_.com.google.protobuf.ByteString]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.ReadFile] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.ReadFile(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Long],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.com.google.protobuf.ByteString]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(6)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(6)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.ReadFile(
      size = 0L,
      data = _root_.com.google.protobuf.ByteString.EMPTY
    )
    implicit class ReadFileLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.ReadFile]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.ReadFile](_l) {
      def size: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.size)((c_, f_) => c_.copy(size = f_))
      def data: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.data)((c_, f_) => c_.copy(data = f_))
    }
    final val SIZE_FIELD_NUMBER = 1
    final val DATA_FIELD_NUMBER = 2
  }
  
  /** Contains full state of the agent i.e. information about the tasks,
    * frameworks and executors running in the cluster.
    */
  @SerialVersionUID(0L)
  final case class GetState(
                             getTasks: scala.Option[Response.GetTasks] = None,
                             getExecutors: scala.Option[Response.GetExecutors] = None,
                             getFrameworks: scala.Option[Response.GetFrameworks] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetState] with com.trueaccord.lenses.Updatable[GetState] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (getTasks.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getTasks.get.serializedSize) + getTasks.get.serializedSize }
        if (getExecutors.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getExecutors.get.serializedSize) + getExecutors.get.serializedSize }
        if (getFrameworks.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getFrameworks.get.serializedSize) + getFrameworks.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        getTasks.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        getExecutors.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        getFrameworks.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetState = {
        var __getTasks = this.getTasks
        var __getExecutors = this.getExecutors
        var __getFrameworks = this.getFrameworks
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __getTasks = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getTasks.getOrElse(agent.Response.GetTasks.defaultInstance)))
            case 18 =>
              __getExecutors = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getExecutors.getOrElse(agent.Response.GetExecutors.defaultInstance)))
            case 26 =>
              __getFrameworks = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getFrameworks.getOrElse(agent.Response.GetFrameworks.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        agent.Response.GetState(
            getTasks = __getTasks,
            getExecutors = __getExecutors,
            getFrameworks = __getFrameworks
        )
      }
      def getGetTasks: Response.GetTasks = getTasks.getOrElse(agent.Response.GetTasks.defaultInstance)
      def clearGetTasks: GetState = copy(getTasks = None)
      def withGetTasks(__v: Response.GetTasks): GetState = copy(getTasks = Some(__v))
      def getGetExecutors: Response.GetExecutors = getExecutors.getOrElse(agent.Response.GetExecutors.defaultInstance)
      def clearGetExecutors: GetState = copy(getExecutors = None)
      def withGetExecutors(__v: Response.GetExecutors): GetState = copy(getExecutors = Some(__v))
      def getGetFrameworks: Response.GetFrameworks = getFrameworks.getOrElse(agent.Response.GetFrameworks.defaultInstance)
      def clearGetFrameworks: GetState = copy(getFrameworks = None)
      def withGetFrameworks(__v: Response.GetFrameworks): GetState = copy(getFrameworks = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => getTasks.orNull
          case 2 => getExecutors.orNull
          case 3 => getFrameworks.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => getTasks.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => getExecutors.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => getFrameworks.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.GetState
  }
  
  object GetState extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetState] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetState] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetState = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.GetState(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Response.GetTasks]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Response.GetExecutors]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Response.GetFrameworks]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetState] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.GetState(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Response.GetTasks]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Response.GetExecutors]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Response.GetFrameworks]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(7)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(7)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = agent.Response.GetTasks
        case 2 => __out = agent.Response.GetExecutors
        case 3 => __out = agent.Response.GetFrameworks
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.GetState(
    )
    implicit class GetStateLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetState]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetState](_l) {
      def getTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetTasks] = field(_.getGetTasks)((c_, f_) => c_.copy(getTasks = Some(f_)))
      def optionalGetTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetTasks]] = field(_.getTasks)((c_, f_) => c_.copy(getTasks = f_))
      def getExecutors: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetExecutors] = field(_.getGetExecutors)((c_, f_) => c_.copy(getExecutors = Some(f_)))
      def optionalGetExecutors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetExecutors]] = field(_.getExecutors)((c_, f_) => c_.copy(getExecutors = f_))
      def getFrameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetFrameworks] = field(_.getGetFrameworks)((c_, f_) => c_.copy(getFrameworks = Some(f_)))
      def optionalGetFrameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetFrameworks]] = field(_.getFrameworks)((c_, f_) => c_.copy(getFrameworks = f_))
    }
    final val GET_TASKS_FIELD_NUMBER = 1
    final val GET_EXECUTORS_FIELD_NUMBER = 2
    final val GET_FRAMEWORKS_FIELD_NUMBER = 3
  }
  
  /** Information about containers running on this agent. It contains
    * ContainerStatus and ResourceStatistics along with some metadata
    * of the containers.
    */
  @SerialVersionUID(0L)
  final case class GetContainers(
      containers: _root_.scala.collection.Seq[Response.GetContainers.Container] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetContainers] with com.trueaccord.lenses.Updatable[GetContainers] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        containers.foreach(containers => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containers.serializedSize) + containers.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        containers.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetContainers = {
        val __containers = (_root_.scala.collection.immutable.Vector.newBuilder[Response.GetContainers.Container] ++= this.containers)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __containers += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, agent.Response.GetContainers.Container.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        agent.Response.GetContainers(
            containers = __containers.result()
        )
      }
      def clearContainers = copy(containers = _root_.scala.collection.Seq.empty)
      def addContainers(__vs: Response.GetContainers.Container*): GetContainers = addAllContainers(__vs)
      def addAllContainers(__vs: TraversableOnce[Response.GetContainers.Container]): GetContainers = copy(containers = containers ++ __vs)
      def withContainers(__v: _root_.scala.collection.Seq[Response.GetContainers.Container]): GetContainers = copy(containers = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => containers
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(containers.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.GetContainers
  }
  
  object GetContainers extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetContainers] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetContainers] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetContainers = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.GetContainers(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[Response.GetContainers.Container]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetContainers] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.GetContainers(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[Response.GetContainers.Container]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(8)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(8)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = agent.Response.GetContainers.Container
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.GetContainers(
    )
    @SerialVersionUID(0L)
    final case class Container(
        frameworkId: org.apache.mesos.v1.mesos.FrameworkID,
        executorId: org.apache.mesos.v1.mesos.ExecutorID,
        executorName: String,
        containerId: org.apache.mesos.v1.mesos.ContainerID,
        containerStatus: scala.Option[org.apache.mesos.v1.mesos.ContainerStatus] = None,
        resourceStatistics: scala.Option[org.apache.mesos.v1.mesos.ResourceStatistics] = None
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Container] with com.trueaccord.lenses.Updatable[Container] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(frameworkId.serializedSize) + frameworkId.serializedSize
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(executorId.serializedSize) + executorId.serializedSize
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, executorName)
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containerId.serializedSize) + containerId.serializedSize
          if (containerStatus.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(containerStatus.get.serializedSize) + containerStatus.get.serializedSize }
          if (resourceStatistics.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(resourceStatistics.get.serializedSize) + resourceStatistics.get.serializedSize }
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(frameworkId.serializedSize)
          frameworkId.writeTo(_output__)
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(executorId.serializedSize)
          executorId.writeTo(_output__)
          _output__.writeString(3, executorName)
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(containerId.serializedSize)
          containerId.writeTo(_output__)
          containerStatus.foreach { __v =>
            _output__.writeTag(5, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          resourceStatistics.foreach { __v =>
            _output__.writeTag(6, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetContainers.Container = {
          var __frameworkId = this.frameworkId
          var __executorId = this.executorId
          var __executorName = this.executorName
          var __containerId = this.containerId
          var __containerStatus = this.containerStatus
          var __resourceStatistics = this.resourceStatistics
          var __requiredFields0: Long = 0xfL
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __frameworkId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __frameworkId)
                __requiredFields0 &= 0xfffffffffffffffeL
              case 18 =>
                __executorId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __executorId)
                __requiredFields0 &= 0xfffffffffffffffdL
              case 26 =>
                __executorName = _input__.readString()
                __requiredFields0 &= 0xfffffffffffffffbL
              case 34 =>
                __containerId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __containerId)
                __requiredFields0 &= 0xfffffffffffffff7L
              case 42 =>
                __containerStatus = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __containerStatus.getOrElse(org.apache.mesos.v1.mesos.ContainerStatus.defaultInstance)))
              case 50 =>
                __resourceStatistics = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __resourceStatistics.getOrElse(org.apache.mesos.v1.mesos.ResourceStatistics.defaultInstance)))
              case tag => _input__.skipField(tag)
            }
          }
          if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
          agent.Response.GetContainers.Container(
              frameworkId = __frameworkId,
              executorId = __executorId,
              executorName = __executorName,
              containerId = __containerId,
              containerStatus = __containerStatus,
              resourceStatistics = __resourceStatistics
          )
        }
        def withFrameworkId(__v: org.apache.mesos.v1.mesos.FrameworkID): Container = copy(frameworkId = __v)
        def withExecutorId(__v: org.apache.mesos.v1.mesos.ExecutorID): Container = copy(executorId = __v)
        def withExecutorName(__v: String): Container = copy(executorName = __v)
        def withContainerId(__v: org.apache.mesos.v1.mesos.ContainerID): Container = copy(containerId = __v)
        def getContainerStatus: org.apache.mesos.v1.mesos.ContainerStatus = containerStatus.getOrElse(org.apache.mesos.v1.mesos.ContainerStatus.defaultInstance)
        def clearContainerStatus: Container = copy(containerStatus = None)
        def withContainerStatus(__v: org.apache.mesos.v1.mesos.ContainerStatus): Container = copy(containerStatus = Some(__v))
        def getResourceStatistics: org.apache.mesos.v1.mesos.ResourceStatistics = resourceStatistics.getOrElse(org.apache.mesos.v1.mesos.ResourceStatistics.defaultInstance)
        def clearResourceStatistics: Container = copy(resourceStatistics = None)
        def withResourceStatistics(__v: org.apache.mesos.v1.mesos.ResourceStatistics): Container = copy(resourceStatistics = Some(__v))
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => frameworkId
            case 2 => executorId
            case 3 => executorName
            case 4 => containerId
            case 5 => containerStatus.orNull
            case 6 => resourceStatistics.orNull
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => frameworkId.toPMessage
            case 2 => executorId.toPMessage
            case 3 => _root_.scalapb.descriptors.PString(executorName)
            case 4 => containerId.toPMessage
            case 5 => containerStatus.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 6 => resourceStatistics.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = agent.Response.GetContainers.Container
    }
    
    object Container extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetContainers.Container] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetContainers.Container] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetContainers.Container = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        agent.Response.GetContainers.Container(
          __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.FrameworkID],
          __fieldsMap(__fields.get(1)).asInstanceOf[org.apache.mesos.v1.mesos.ExecutorID],
          __fieldsMap(__fields.get(2)).asInstanceOf[String],
          __fieldsMap(__fields.get(3)).asInstanceOf[org.apache.mesos.v1.mesos.ContainerID],
          __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ContainerStatus]],
          __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.ResourceStatistics]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetContainers.Container] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          agent.Response.GetContainers.Container(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.FrameworkID],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[org.apache.mesos.v1.mesos.ExecutorID],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[String],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[org.apache.mesos.v1.mesos.ContainerID],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ContainerStatus]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.ResourceStatistics]])
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.GetContainers.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.GetContainers.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => __out = org.apache.mesos.v1.mesos.FrameworkID
          case 2 => __out = org.apache.mesos.v1.mesos.ExecutorID
          case 4 => __out = org.apache.mesos.v1.mesos.ContainerID
          case 5 => __out = org.apache.mesos.v1.mesos.ContainerStatus
          case 6 => __out = org.apache.mesos.v1.mesos.ResourceStatistics
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = agent.Response.GetContainers.Container(
        frameworkId = org.apache.mesos.v1.mesos.FrameworkID.defaultInstance,
        executorId = org.apache.mesos.v1.mesos.ExecutorID.defaultInstance,
        executorName = "",
        containerId = org.apache.mesos.v1.mesos.ContainerID.defaultInstance
      )
      implicit class ContainerLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetContainers.Container]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetContainers.Container](_l) {
        def frameworkId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.FrameworkID] = field(_.frameworkId)((c_, f_) => c_.copy(frameworkId = f_))
        def executorId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ExecutorID] = field(_.executorId)((c_, f_) => c_.copy(executorId = f_))
        def executorName: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.executorName)((c_, f_) => c_.copy(executorName = f_))
        def containerId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerID] = field(_.containerId)((c_, f_) => c_.copy(containerId = f_))
        def containerStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ContainerStatus] = field(_.getContainerStatus)((c_, f_) => c_.copy(containerStatus = Some(f_)))
        def optionalContainerStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ContainerStatus]] = field(_.containerStatus)((c_, f_) => c_.copy(containerStatus = f_))
        def resourceStatistics: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ResourceStatistics] = field(_.getResourceStatistics)((c_, f_) => c_.copy(resourceStatistics = Some(f_)))
        def optionalResourceStatistics: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.ResourceStatistics]] = field(_.resourceStatistics)((c_, f_) => c_.copy(resourceStatistics = f_))
      }
      final val FRAMEWORK_ID_FIELD_NUMBER = 1
      final val EXECUTOR_ID_FIELD_NUMBER = 2
      final val EXECUTOR_NAME_FIELD_NUMBER = 3
      final val CONTAINER_ID_FIELD_NUMBER = 4
      final val CONTAINER_STATUS_FIELD_NUMBER = 5
      final val RESOURCE_STATISTICS_FIELD_NUMBER = 6
    }
    
    implicit class GetContainersLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetContainers]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetContainers](_l) {
      def containers: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Response.GetContainers.Container]] = field(_.containers)((c_, f_) => c_.copy(containers = f_))
    }
    final val CONTAINERS_FIELD_NUMBER = 1
  }
  
  /** Information about all the frameworks known to the agent at the current
    * time.
    */
  @SerialVersionUID(0L)
  final case class GetFrameworks(
                                  frameworks: _root_.scala.collection.Seq[Response.GetFrameworks.Framework] = _root_.scala.collection.Seq.empty,
                                  completedFrameworks: _root_.scala.collection.Seq[Response.GetFrameworks.Framework] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetFrameworks] with com.trueaccord.lenses.Updatable[GetFrameworks] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        frameworks.foreach(frameworks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(frameworks.serializedSize) + frameworks.serializedSize)
        completedFrameworks.foreach(completedFrameworks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(completedFrameworks.serializedSize) + completedFrameworks.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        frameworks.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        completedFrameworks.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetFrameworks = {
        val __frameworks = (_root_.scala.collection.immutable.Vector.newBuilder[Response.GetFrameworks.Framework] ++= this.frameworks)
        val __completedFrameworks = (_root_.scala.collection.immutable.Vector.newBuilder[Response.GetFrameworks.Framework] ++= this.completedFrameworks)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __frameworks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, agent.Response.GetFrameworks.Framework.defaultInstance)
            case 18 =>
              __completedFrameworks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, agent.Response.GetFrameworks.Framework.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        agent.Response.GetFrameworks(
            frameworks = __frameworks.result(),
            completedFrameworks = __completedFrameworks.result()
        )
      }
      def clearFrameworks = copy(frameworks = _root_.scala.collection.Seq.empty)
      def addFrameworks(__vs: Response.GetFrameworks.Framework*): GetFrameworks = addAllFrameworks(__vs)
      def addAllFrameworks(__vs: TraversableOnce[Response.GetFrameworks.Framework]): GetFrameworks = copy(frameworks = frameworks ++ __vs)
      def withFrameworks(__v: _root_.scala.collection.Seq[Response.GetFrameworks.Framework]): GetFrameworks = copy(frameworks = __v)
      def clearCompletedFrameworks = copy(completedFrameworks = _root_.scala.collection.Seq.empty)
      def addCompletedFrameworks(__vs: Response.GetFrameworks.Framework*): GetFrameworks = addAllCompletedFrameworks(__vs)
      def addAllCompletedFrameworks(__vs: TraversableOnce[Response.GetFrameworks.Framework]): GetFrameworks = copy(completedFrameworks = completedFrameworks ++ __vs)
      def withCompletedFrameworks(__v: _root_.scala.collection.Seq[Response.GetFrameworks.Framework]): GetFrameworks = copy(completedFrameworks = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => frameworks
          case 2 => completedFrameworks
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(frameworks.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 2 => _root_.scalapb.descriptors.PRepeated(completedFrameworks.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.GetFrameworks
  }
  
  object GetFrameworks extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetFrameworks] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetFrameworks] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetFrameworks = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.GetFrameworks(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[Response.GetFrameworks.Framework]],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[Response.GetFrameworks.Framework]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetFrameworks] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.GetFrameworks(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[Response.GetFrameworks.Framework]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[Response.GetFrameworks.Framework]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(9)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(9)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = agent.Response.GetFrameworks.Framework
        case 2 => __out = agent.Response.GetFrameworks.Framework
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.GetFrameworks(
    )
    @SerialVersionUID(0L)
    final case class Framework(
        frameworkInfo: org.apache.mesos.v1.mesos.FrameworkInfo
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Framework] with com.trueaccord.lenses.Updatable[Framework] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(frameworkInfo.serializedSize) + frameworkInfo.serializedSize
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(frameworkInfo.serializedSize)
          frameworkInfo.writeTo(_output__)
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetFrameworks.Framework = {
          var __frameworkInfo = this.frameworkInfo
          var __requiredFields0: Long = 0x1L
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __frameworkInfo = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __frameworkInfo)
                __requiredFields0 &= 0xfffffffffffffffeL
              case tag => _input__.skipField(tag)
            }
          }
          if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
          agent.Response.GetFrameworks.Framework(
              frameworkInfo = __frameworkInfo
          )
        }
        def withFrameworkInfo(__v: org.apache.mesos.v1.mesos.FrameworkInfo): Framework = copy(frameworkInfo = __v)
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => frameworkInfo
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => frameworkInfo.toPMessage
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = agent.Response.GetFrameworks.Framework
    }
    
    object Framework extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetFrameworks.Framework] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetFrameworks.Framework] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetFrameworks.Framework = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        agent.Response.GetFrameworks.Framework(
          __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.FrameworkInfo]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetFrameworks.Framework] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          agent.Response.GetFrameworks.Framework(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.FrameworkInfo]
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.GetFrameworks.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.GetFrameworks.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => __out = org.apache.mesos.v1.mesos.FrameworkInfo
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = agent.Response.GetFrameworks.Framework(
        frameworkInfo = org.apache.mesos.v1.mesos.FrameworkInfo.defaultInstance
      )
      implicit class FrameworkLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetFrameworks.Framework]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetFrameworks.Framework](_l) {
        def frameworkInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.FrameworkInfo] = field(_.frameworkInfo)((c_, f_) => c_.copy(frameworkInfo = f_))
      }
      final val FRAMEWORK_INFO_FIELD_NUMBER = 1
    }
    
    implicit class GetFrameworksLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetFrameworks]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetFrameworks](_l) {
      def frameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Response.GetFrameworks.Framework]] = field(_.frameworks)((c_, f_) => c_.copy(frameworks = f_))
      def completedFrameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Response.GetFrameworks.Framework]] = field(_.completedFrameworks)((c_, f_) => c_.copy(completedFrameworks = f_))
    }
    final val FRAMEWORKS_FIELD_NUMBER = 1
    final val COMPLETED_FRAMEWORKS_FIELD_NUMBER = 2
  }
  
  /** Lists information about all the executors known to the agent at the
    * current time.
    */
  @SerialVersionUID(0L)
  final case class GetExecutors(
                                 executors: _root_.scala.collection.Seq[Response.GetExecutors.Executor] = _root_.scala.collection.Seq.empty,
                                 completedExecutors: _root_.scala.collection.Seq[Response.GetExecutors.Executor] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetExecutors] with com.trueaccord.lenses.Updatable[GetExecutors] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        executors.foreach(executors => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(executors.serializedSize) + executors.serializedSize)
        completedExecutors.foreach(completedExecutors => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(completedExecutors.serializedSize) + completedExecutors.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        executors.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        completedExecutors.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetExecutors = {
        val __executors = (_root_.scala.collection.immutable.Vector.newBuilder[Response.GetExecutors.Executor] ++= this.executors)
        val __completedExecutors = (_root_.scala.collection.immutable.Vector.newBuilder[Response.GetExecutors.Executor] ++= this.completedExecutors)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __executors += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, agent.Response.GetExecutors.Executor.defaultInstance)
            case 18 =>
              __completedExecutors += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, agent.Response.GetExecutors.Executor.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        agent.Response.GetExecutors(
            executors = __executors.result(),
            completedExecutors = __completedExecutors.result()
        )
      }
      def clearExecutors = copy(executors = _root_.scala.collection.Seq.empty)
      def addExecutors(__vs: Response.GetExecutors.Executor*): GetExecutors = addAllExecutors(__vs)
      def addAllExecutors(__vs: TraversableOnce[Response.GetExecutors.Executor]): GetExecutors = copy(executors = executors ++ __vs)
      def withExecutors(__v: _root_.scala.collection.Seq[Response.GetExecutors.Executor]): GetExecutors = copy(executors = __v)
      def clearCompletedExecutors = copy(completedExecutors = _root_.scala.collection.Seq.empty)
      def addCompletedExecutors(__vs: Response.GetExecutors.Executor*): GetExecutors = addAllCompletedExecutors(__vs)
      def addAllCompletedExecutors(__vs: TraversableOnce[Response.GetExecutors.Executor]): GetExecutors = copy(completedExecutors = completedExecutors ++ __vs)
      def withCompletedExecutors(__v: _root_.scala.collection.Seq[Response.GetExecutors.Executor]): GetExecutors = copy(completedExecutors = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => executors
          case 2 => completedExecutors
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(executors.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 2 => _root_.scalapb.descriptors.PRepeated(completedExecutors.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.GetExecutors
  }
  
  object GetExecutors extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetExecutors] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetExecutors] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetExecutors = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.GetExecutors(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[Response.GetExecutors.Executor]],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[Response.GetExecutors.Executor]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetExecutors] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.GetExecutors(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[Response.GetExecutors.Executor]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[Response.GetExecutors.Executor]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(10)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(10)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = agent.Response.GetExecutors.Executor
        case 2 => __out = agent.Response.GetExecutors.Executor
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.GetExecutors(
    )
    @SerialVersionUID(0L)
    final case class Executor(
        executorInfo: org.apache.mesos.v1.mesos.ExecutorInfo
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Executor] with com.trueaccord.lenses.Updatable[Executor] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(executorInfo.serializedSize) + executorInfo.serializedSize
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(executorInfo.serializedSize)
          executorInfo.writeTo(_output__)
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetExecutors.Executor = {
          var __executorInfo = this.executorInfo
          var __requiredFields0: Long = 0x1L
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __executorInfo = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __executorInfo)
                __requiredFields0 &= 0xfffffffffffffffeL
              case tag => _input__.skipField(tag)
            }
          }
          if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
          agent.Response.GetExecutors.Executor(
              executorInfo = __executorInfo
          )
        }
        def withExecutorInfo(__v: org.apache.mesos.v1.mesos.ExecutorInfo): Executor = copy(executorInfo = __v)
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => executorInfo
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => executorInfo.toPMessage
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = agent.Response.GetExecutors.Executor
    }
    
    object Executor extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetExecutors.Executor] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetExecutors.Executor] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetExecutors.Executor = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        agent.Response.GetExecutors.Executor(
          __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.ExecutorInfo]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetExecutors.Executor] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          agent.Response.GetExecutors.Executor(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ExecutorInfo]
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.GetExecutors.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.GetExecutors.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => __out = org.apache.mesos.v1.mesos.ExecutorInfo
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = agent.Response.GetExecutors.Executor(
        executorInfo = org.apache.mesos.v1.mesos.ExecutorInfo.defaultInstance
      )
      implicit class ExecutorLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetExecutors.Executor]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetExecutors.Executor](_l) {
        def executorInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ExecutorInfo] = field(_.executorInfo)((c_, f_) => c_.copy(executorInfo = f_))
      }
      final val EXECUTOR_INFO_FIELD_NUMBER = 1
    }
    
    implicit class GetExecutorsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetExecutors]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetExecutors](_l) {
      def executors: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Response.GetExecutors.Executor]] = field(_.executors)((c_, f_) => c_.copy(executors = f_))
      def completedExecutors: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Response.GetExecutors.Executor]] = field(_.completedExecutors)((c_, f_) => c_.copy(completedExecutors = f_))
    }
    final val EXECUTORS_FIELD_NUMBER = 1
    final val COMPLETED_EXECUTORS_FIELD_NUMBER = 2
  }
  
  /** Lists information about all the tasks known to the agent at the current
    * time.
    *
    * @param pendingTasks
    *   Tasks that are pending in the agent's queue before an executor is
    *   launched.
    * @param queuedTasks
    *   Tasks that are enqueued for a launched executor that has not yet
    *   registered.
    * @param launchedTasks
    *   Tasks that are running.
    * @param terminatedTasks
    *   Tasks that are terminated but pending updates.
    * @param completedTasks
    *   Tasks that are terminated and updates acked.
    */
  @SerialVersionUID(0L)
  final case class GetTasks(
      pendingTasks: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task] = _root_.scala.collection.Seq.empty,
      queuedTasks: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task] = _root_.scala.collection.Seq.empty,
      launchedTasks: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task] = _root_.scala.collection.Seq.empty,
      terminatedTasks: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task] = _root_.scala.collection.Seq.empty,
      completedTasks: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetTasks] with com.trueaccord.lenses.Updatable[GetTasks] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        pendingTasks.foreach(pendingTasks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(pendingTasks.serializedSize) + pendingTasks.serializedSize)
        queuedTasks.foreach(queuedTasks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(queuedTasks.serializedSize) + queuedTasks.serializedSize)
        launchedTasks.foreach(launchedTasks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(launchedTasks.serializedSize) + launchedTasks.serializedSize)
        terminatedTasks.foreach(terminatedTasks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(terminatedTasks.serializedSize) + terminatedTasks.serializedSize)
        completedTasks.foreach(completedTasks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(completedTasks.serializedSize) + completedTasks.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        pendingTasks.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        queuedTasks.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        launchedTasks.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        terminatedTasks.foreach { __v =>
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        completedTasks.foreach { __v =>
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetTasks = {
        val __pendingTasks = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Task] ++= this.pendingTasks)
        val __queuedTasks = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Task] ++= this.queuedTasks)
        val __launchedTasks = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Task] ++= this.launchedTasks)
        val __terminatedTasks = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Task] ++= this.terminatedTasks)
        val __completedTasks = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Task] ++= this.completedTasks)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __pendingTasks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Task.defaultInstance)
            case 18 =>
              __queuedTasks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Task.defaultInstance)
            case 26 =>
              __launchedTasks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Task.defaultInstance)
            case 34 =>
              __terminatedTasks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Task.defaultInstance)
            case 42 =>
              __completedTasks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Task.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        agent.Response.GetTasks(
            pendingTasks = __pendingTasks.result(),
            queuedTasks = __queuedTasks.result(),
            launchedTasks = __launchedTasks.result(),
            terminatedTasks = __terminatedTasks.result(),
            completedTasks = __completedTasks.result()
        )
      }
      def clearPendingTasks = copy(pendingTasks = _root_.scala.collection.Seq.empty)
      def addPendingTasks(__vs: org.apache.mesos.v1.mesos.Task*): GetTasks = addAllPendingTasks(__vs)
      def addAllPendingTasks(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(pendingTasks = pendingTasks ++ __vs)
      def withPendingTasks(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(pendingTasks = __v)
      def clearQueuedTasks = copy(queuedTasks = _root_.scala.collection.Seq.empty)
      def addQueuedTasks(__vs: org.apache.mesos.v1.mesos.Task*): GetTasks = addAllQueuedTasks(__vs)
      def addAllQueuedTasks(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(queuedTasks = queuedTasks ++ __vs)
      def withQueuedTasks(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(queuedTasks = __v)
      def clearLaunchedTasks = copy(launchedTasks = _root_.scala.collection.Seq.empty)
      def addLaunchedTasks(__vs: org.apache.mesos.v1.mesos.Task*): GetTasks = addAllLaunchedTasks(__vs)
      def addAllLaunchedTasks(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(launchedTasks = launchedTasks ++ __vs)
      def withLaunchedTasks(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(launchedTasks = __v)
      def clearTerminatedTasks = copy(terminatedTasks = _root_.scala.collection.Seq.empty)
      def addTerminatedTasks(__vs: org.apache.mesos.v1.mesos.Task*): GetTasks = addAllTerminatedTasks(__vs)
      def addAllTerminatedTasks(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(terminatedTasks = terminatedTasks ++ __vs)
      def withTerminatedTasks(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(terminatedTasks = __v)
      def clearCompletedTasks = copy(completedTasks = _root_.scala.collection.Seq.empty)
      def addCompletedTasks(__vs: org.apache.mesos.v1.mesos.Task*): GetTasks = addAllCompletedTasks(__vs)
      def addAllCompletedTasks(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(completedTasks = completedTasks ++ __vs)
      def withCompletedTasks(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(completedTasks = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => pendingTasks
          case 2 => queuedTasks
          case 3 => launchedTasks
          case 4 => terminatedTasks
          case 5 => completedTasks
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(pendingTasks.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 2 => _root_.scalapb.descriptors.PRepeated(queuedTasks.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 3 => _root_.scalapb.descriptors.PRepeated(launchedTasks.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 4 => _root_.scalapb.descriptors.PRepeated(terminatedTasks.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 5 => _root_.scalapb.descriptors.PRepeated(completedTasks.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.GetTasks
  }
  
  object GetTasks extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetTasks] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetTasks] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetTasks = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.GetTasks(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]],
        __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]],
        __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]],
        __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetTasks] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.GetTasks(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(11)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(11)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.Task
        case 2 => __out = org.apache.mesos.v1.mesos.Task
        case 3 => __out = org.apache.mesos.v1.mesos.Task
        case 4 => __out = org.apache.mesos.v1.mesos.Task
        case 5 => __out = org.apache.mesos.v1.mesos.Task
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.GetTasks(
    )
    implicit class GetTasksLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetTasks]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetTasks](_l) {
      def pendingTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]] = field(_.pendingTasks)((c_, f_) => c_.copy(pendingTasks = f_))
      def queuedTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]] = field(_.queuedTasks)((c_, f_) => c_.copy(queuedTasks = f_))
      def launchedTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]] = field(_.launchedTasks)((c_, f_) => c_.copy(launchedTasks = f_))
      def terminatedTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]] = field(_.terminatedTasks)((c_, f_) => c_.copy(terminatedTasks = f_))
      def completedTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]] = field(_.completedTasks)((c_, f_) => c_.copy(completedTasks = f_))
    }
    final val PENDING_TASKS_FIELD_NUMBER = 1
    final val QUEUED_TASKS_FIELD_NUMBER = 2
    final val LAUNCHED_TASKS_FIELD_NUMBER = 3
    final val TERMINATED_TASKS_FIELD_NUMBER = 4
    final val COMPLETED_TASKS_FIELD_NUMBER = 5
  }
  
  /** Contains the agent's information.
    */
  @SerialVersionUID(0L)
  final case class GetAgent(
      agentInfo: scala.Option[org.apache.mesos.v1.mesos.AgentInfo] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetAgent] with com.trueaccord.lenses.Updatable[GetAgent] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (agentInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agentInfo.get.serializedSize) + agentInfo.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        agentInfo.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetAgent = {
        var __agentInfo = this.agentInfo
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __agentInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __agentInfo.getOrElse(org.apache.mesos.v1.mesos.AgentInfo.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        agent.Response.GetAgent(
            agentInfo = __agentInfo
        )
      }
      def getAgentInfo: org.apache.mesos.v1.mesos.AgentInfo = agentInfo.getOrElse(org.apache.mesos.v1.mesos.AgentInfo.defaultInstance)
      def clearAgentInfo: GetAgent = copy(agentInfo = None)
      def withAgentInfo(__v: org.apache.mesos.v1.mesos.AgentInfo): GetAgent = copy(agentInfo = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => agentInfo.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => agentInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.GetAgent
  }
  
  object GetAgent extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetAgent] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetAgent] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetAgent = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.GetAgent(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.AgentInfo]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetAgent] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.GetAgent(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.AgentInfo]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(12)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(12)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.AgentInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.GetAgent(
    )
    implicit class GetAgentLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetAgent]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetAgent](_l) {
      def agentInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.AgentInfo] = field(_.getAgentInfo)((c_, f_) => c_.copy(agentInfo = Some(f_)))
      def optionalAgentInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.AgentInfo]] = field(_.agentInfo)((c_, f_) => c_.copy(agentInfo = f_))
    }
    final val AGENT_INFO_FIELD_NUMBER = 1
  }
  
  /** Returns termination information about the nested container.
    */
  @SerialVersionUID(0L)
  final case class WaitNestedContainer(
      exitStatus: scala.Option[Int] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[WaitNestedContainer] with com.trueaccord.lenses.Updatable[WaitNestedContainer] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (exitStatus.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, exitStatus.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        exitStatus.foreach { __v =>
          _output__.writeInt32(1, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.WaitNestedContainer = {
        var __exitStatus = this.exitStatus
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __exitStatus = Some(_input__.readInt32())
            case tag => _input__.skipField(tag)
          }
        }
        agent.Response.WaitNestedContainer(
            exitStatus = __exitStatus
        )
      }
      def getExitStatus: Int = exitStatus.getOrElse(0)
      def clearExitStatus: WaitNestedContainer = copy(exitStatus = None)
      def withExitStatus(__v: Int): WaitNestedContainer = copy(exitStatus = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => exitStatus.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => exitStatus.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = agent.Response.WaitNestedContainer
  }
  
  object WaitNestedContainer extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.WaitNestedContainer] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.WaitNestedContainer] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.WaitNestedContainer = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      agent.Response.WaitNestedContainer(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.WaitNestedContainer] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        agent.Response.WaitNestedContainer(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = agent.Response.javaDescriptor.getNestedTypes.get(13)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = agent.Response.scalaDescriptor.nestedMessages(13)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = agent.Response.WaitNestedContainer(
    )
    implicit class WaitNestedContainerLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.WaitNestedContainer]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.WaitNestedContainer](_l) {
      def exitStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getExitStatus)((c_, f_) => c_.copy(exitStatus = Some(f_)))
      def optionalExitStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.exitStatus)((c_, f_) => c_.copy(exitStatus = f_))
    }
    final val EXIT_STATUS_FIELD_NUMBER = 1
  }
  
  implicit class ResponseLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response](_l) {
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
    def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def getHealth: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetHealth] = field(_.getGetHealth)((c_, f_) => c_.copy(getHealth = Some(f_)))
    def optionalGetHealth: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetHealth]] = field(_.getHealth)((c_, f_) => c_.copy(getHealth = f_))
    def getFlags: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetFlags] = field(_.getGetFlags)((c_, f_) => c_.copy(getFlags = Some(f_)))
    def optionalGetFlags: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetFlags]] = field(_.getFlags)((c_, f_) => c_.copy(getFlags = f_))
    def getVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetVersion] = field(_.getGetVersion)((c_, f_) => c_.copy(getVersion = Some(f_)))
    def optionalGetVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetVersion]] = field(_.getVersion)((c_, f_) => c_.copy(getVersion = f_))
    def getMetrics: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetMetrics] = field(_.getGetMetrics)((c_, f_) => c_.copy(getMetrics = Some(f_)))
    def optionalGetMetrics: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetMetrics]] = field(_.getMetrics)((c_, f_) => c_.copy(getMetrics = f_))
    def getLoggingLevel: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetLoggingLevel] = field(_.getGetLoggingLevel)((c_, f_) => c_.copy(getLoggingLevel = Some(f_)))
    def optionalGetLoggingLevel: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetLoggingLevel]] = field(_.getLoggingLevel)((c_, f_) => c_.copy(getLoggingLevel = f_))
    def listFiles: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.ListFiles] = field(_.getListFiles)((c_, f_) => c_.copy(listFiles = Some(f_)))
    def optionalListFiles: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.ListFiles]] = field(_.listFiles)((c_, f_) => c_.copy(listFiles = f_))
    def readFile: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.ReadFile] = field(_.getReadFile)((c_, f_) => c_.copy(readFile = Some(f_)))
    def optionalReadFile: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.ReadFile]] = field(_.readFile)((c_, f_) => c_.copy(readFile = f_))
    def getState: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetState] = field(_.getGetState)((c_, f_) => c_.copy(getState = Some(f_)))
    def optionalGetState: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetState]] = field(_.getState)((c_, f_) => c_.copy(getState = f_))
    def getContainers: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetContainers] = field(_.getGetContainers)((c_, f_) => c_.copy(getContainers = Some(f_)))
    def optionalGetContainers: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetContainers]] = field(_.getContainers)((c_, f_) => c_.copy(getContainers = f_))
    def getFrameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetFrameworks] = field(_.getGetFrameworks)((c_, f_) => c_.copy(getFrameworks = Some(f_)))
    def optionalGetFrameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetFrameworks]] = field(_.getFrameworks)((c_, f_) => c_.copy(getFrameworks = f_))
    def getExecutors: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetExecutors] = field(_.getGetExecutors)((c_, f_) => c_.copy(getExecutors = Some(f_)))
    def optionalGetExecutors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetExecutors]] = field(_.getExecutors)((c_, f_) => c_.copy(getExecutors = f_))
    def getTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetTasks] = field(_.getGetTasks)((c_, f_) => c_.copy(getTasks = Some(f_)))
    def optionalGetTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetTasks]] = field(_.getTasks)((c_, f_) => c_.copy(getTasks = f_))
    def getAgent: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetAgent] = field(_.getGetAgent)((c_, f_) => c_.copy(getAgent = Some(f_)))
    def optionalGetAgent: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetAgent]] = field(_.getAgent)((c_, f_) => c_.copy(getAgent = f_))
    def waitNestedContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.WaitNestedContainer] = field(_.getWaitNestedContainer)((c_, f_) => c_.copy(waitNestedContainer = Some(f_)))
    def optionalWaitNestedContainer: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.WaitNestedContainer]] = field(_.waitNestedContainer)((c_, f_) => c_.copy(waitNestedContainer = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val GET_HEALTH_FIELD_NUMBER = 2
  final val GET_FLAGS_FIELD_NUMBER = 3
  final val GET_VERSION_FIELD_NUMBER = 4
  final val GET_METRICS_FIELD_NUMBER = 5
  final val GET_LOGGING_LEVEL_FIELD_NUMBER = 6
  final val LIST_FILES_FIELD_NUMBER = 7
  final val READ_FILE_FIELD_NUMBER = 8
  final val GET_STATE_FIELD_NUMBER = 9
  final val GET_CONTAINERS_FIELD_NUMBER = 10
  final val GET_FRAMEWORKS_FIELD_NUMBER = 11
  final val GET_EXECUTORS_FIELD_NUMBER = 12
  final val GET_TASKS_FIELD_NUMBER = 13
  final val GET_AGENT_FIELD_NUMBER = 15
  final val WAIT_NESTED_CONTAINER_FIELD_NUMBER = 14
}
