// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.master

import org.apache.mesos.v1.maintenance.{ClusterStatus, Schedule}
import org.apache.mesos.v1.{maintenance, master, quota}
import org.apache.mesos.v1.quota.QuotaStatus

/** *
  * Synchronous responses for all calls (except Call::SUBSCRIBE) made to
  * the v1 master API.
  */
@SerialVersionUID(0L)
final case class Response(
                           `type`: scala.Option[Response.Type] = None,
                           getHealth: scala.Option[Response.GetHealth] = None,
                           getFlags: scala.Option[Response.GetFlags] = None,
                           getVersion: scala.Option[Response.GetVersion] = None,
                           getMetrics: scala.Option[Response.GetMetrics] = None,
                           getLoggingLevel: scala.Option[Response.GetLoggingLevel] = None,
                           listFiles: scala.Option[Response.ListFiles] = None,
                           readFile: scala.Option[Response.ReadFile] = None,
                           getState: scala.Option[Response.GetState] = None,
                           getAgents: scala.Option[Response.GetAgents] = None,
                           getFrameworks: scala.Option[Response.GetFrameworks] = None,
                           getExecutors: scala.Option[Response.GetExecutors] = None,
                           getTasks: scala.Option[Response.GetTasks] = None,
                           getRoles: scala.Option[Response.GetRoles] = None,
                           getWeights: scala.Option[Response.GetWeights] = None,
                           getMaster: scala.Option[Response.GetMaster] = None,
                           getMaintenanceStatus: scala.Option[Response.GetMaintenanceStatus] = None,
                           getMaintenanceSchedule: scala.Option[Response.GetMaintenanceSchedule] = None,
                           getQuota: scala.Option[Response.GetQuota] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Response] with com.trueaccord.lenses.Updatable[Response] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
      if (getHealth.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getHealth.get.serializedSize) + getHealth.get.serializedSize }
      if (getFlags.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getFlags.get.serializedSize) + getFlags.get.serializedSize }
      if (getVersion.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getVersion.get.serializedSize) + getVersion.get.serializedSize }
      if (getMetrics.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getMetrics.get.serializedSize) + getMetrics.get.serializedSize }
      if (getLoggingLevel.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getLoggingLevel.get.serializedSize) + getLoggingLevel.get.serializedSize }
      if (listFiles.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(listFiles.get.serializedSize) + listFiles.get.serializedSize }
      if (readFile.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(readFile.get.serializedSize) + readFile.get.serializedSize }
      if (getState.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getState.get.serializedSize) + getState.get.serializedSize }
      if (getAgents.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getAgents.get.serializedSize) + getAgents.get.serializedSize }
      if (getFrameworks.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getFrameworks.get.serializedSize) + getFrameworks.get.serializedSize }
      if (getExecutors.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getExecutors.get.serializedSize) + getExecutors.get.serializedSize }
      if (getTasks.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getTasks.get.serializedSize) + getTasks.get.serializedSize }
      if (getRoles.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getRoles.get.serializedSize) + getRoles.get.serializedSize }
      if (getWeights.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getWeights.get.serializedSize) + getWeights.get.serializedSize }
      if (getMaster.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getMaster.get.serializedSize) + getMaster.get.serializedSize }
      if (getMaintenanceStatus.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getMaintenanceStatus.get.serializedSize) + getMaintenanceStatus.get.serializedSize }
      if (getMaintenanceSchedule.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getMaintenanceSchedule.get.serializedSize) + getMaintenanceSchedule.get.serializedSize }
      if (getQuota.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getQuota.get.serializedSize) + getQuota.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      `type`.foreach { __v =>
        _output__.writeEnum(1, __v.value)
      };
      getHealth.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getFlags.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getVersion.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getMetrics.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getLoggingLevel.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      listFiles.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      readFile.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getState.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getAgents.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getFrameworks.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getExecutors.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getTasks.foreach { __v =>
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getRoles.foreach { __v =>
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getWeights.foreach { __v =>
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getMaster.foreach { __v =>
        _output__.writeTag(16, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getMaintenanceStatus.foreach { __v =>
        _output__.writeTag(17, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getMaintenanceSchedule.foreach { __v =>
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      getQuota.foreach { __v =>
        _output__.writeTag(19, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response = {
      var __type = this.`type`
      var __getHealth = this.getHealth
      var __getFlags = this.getFlags
      var __getVersion = this.getVersion
      var __getMetrics = this.getMetrics
      var __getLoggingLevel = this.getLoggingLevel
      var __listFiles = this.listFiles
      var __readFile = this.readFile
      var __getState = this.getState
      var __getAgents = this.getAgents
      var __getFrameworks = this.getFrameworks
      var __getExecutors = this.getExecutors
      var __getTasks = this.getTasks
      var __getRoles = this.getRoles
      var __getWeights = this.getWeights
      var __getMaster = this.getMaster
      var __getMaintenanceStatus = this.getMaintenanceStatus
      var __getMaintenanceSchedule = this.getMaintenanceSchedule
      var __getQuota = this.getQuota
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = Some(master.Response.Type.fromValue(_input__.readEnum()))
          case 18 =>
            __getHealth = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getHealth.getOrElse(master.Response.GetHealth.defaultInstance)))
          case 26 =>
            __getFlags = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getFlags.getOrElse(master.Response.GetFlags.defaultInstance)))
          case 34 =>
            __getVersion = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getVersion.getOrElse(master.Response.GetVersion.defaultInstance)))
          case 42 =>
            __getMetrics = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getMetrics.getOrElse(master.Response.GetMetrics.defaultInstance)))
          case 50 =>
            __getLoggingLevel = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getLoggingLevel.getOrElse(master.Response.GetLoggingLevel.defaultInstance)))
          case 58 =>
            __listFiles = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __listFiles.getOrElse(master.Response.ListFiles.defaultInstance)))
          case 66 =>
            __readFile = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __readFile.getOrElse(master.Response.ReadFile.defaultInstance)))
          case 74 =>
            __getState = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getState.getOrElse(master.Response.GetState.defaultInstance)))
          case 82 =>
            __getAgents = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getAgents.getOrElse(master.Response.GetAgents.defaultInstance)))
          case 90 =>
            __getFrameworks = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getFrameworks.getOrElse(master.Response.GetFrameworks.defaultInstance)))
          case 98 =>
            __getExecutors = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getExecutors.getOrElse(master.Response.GetExecutors.defaultInstance)))
          case 106 =>
            __getTasks = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getTasks.getOrElse(master.Response.GetTasks.defaultInstance)))
          case 114 =>
            __getRoles = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getRoles.getOrElse(master.Response.GetRoles.defaultInstance)))
          case 122 =>
            __getWeights = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getWeights.getOrElse(master.Response.GetWeights.defaultInstance)))
          case 130 =>
            __getMaster = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getMaster.getOrElse(master.Response.GetMaster.defaultInstance)))
          case 138 =>
            __getMaintenanceStatus = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getMaintenanceStatus.getOrElse(master.Response.GetMaintenanceStatus.defaultInstance)))
          case 146 =>
            __getMaintenanceSchedule = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getMaintenanceSchedule.getOrElse(master.Response.GetMaintenanceSchedule.defaultInstance)))
          case 154 =>
            __getQuota = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getQuota.getOrElse(master.Response.GetQuota.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      master.Response(
          `type` = __type,
          getHealth = __getHealth,
          getFlags = __getFlags,
          getVersion = __getVersion,
          getMetrics = __getMetrics,
          getLoggingLevel = __getLoggingLevel,
          listFiles = __listFiles,
          readFile = __readFile,
          getState = __getState,
          getAgents = __getAgents,
          getFrameworks = __getFrameworks,
          getExecutors = __getExecutors,
          getTasks = __getTasks,
          getRoles = __getRoles,
          getWeights = __getWeights,
          getMaster = __getMaster,
          getMaintenanceStatus = __getMaintenanceStatus,
          getMaintenanceSchedule = __getMaintenanceSchedule,
          getQuota = __getQuota
      )
    }
    def getType: Response.Type = `type`.getOrElse(master.Response.Type.UNKNOWN)
    def clearType: Response = copy(`type` = None)
    def withType(__v: Response.Type): Response = copy(`type` = Some(__v))
    def getGetHealth: Response.GetHealth = getHealth.getOrElse(master.Response.GetHealth.defaultInstance)
    def clearGetHealth: Response = copy(getHealth = None)
    def withGetHealth(__v: Response.GetHealth): Response = copy(getHealth = Some(__v))
    def getGetFlags: Response.GetFlags = getFlags.getOrElse(master.Response.GetFlags.defaultInstance)
    def clearGetFlags: Response = copy(getFlags = None)
    def withGetFlags(__v: Response.GetFlags): Response = copy(getFlags = Some(__v))
    def getGetVersion: Response.GetVersion = getVersion.getOrElse(master.Response.GetVersion.defaultInstance)
    def clearGetVersion: Response = copy(getVersion = None)
    def withGetVersion(__v: Response.GetVersion): Response = copy(getVersion = Some(__v))
    def getGetMetrics: Response.GetMetrics = getMetrics.getOrElse(master.Response.GetMetrics.defaultInstance)
    def clearGetMetrics: Response = copy(getMetrics = None)
    def withGetMetrics(__v: Response.GetMetrics): Response = copy(getMetrics = Some(__v))
    def getGetLoggingLevel: Response.GetLoggingLevel = getLoggingLevel.getOrElse(master.Response.GetLoggingLevel.defaultInstance)
    def clearGetLoggingLevel: Response = copy(getLoggingLevel = None)
    def withGetLoggingLevel(__v: Response.GetLoggingLevel): Response = copy(getLoggingLevel = Some(__v))
    def getListFiles: Response.ListFiles = listFiles.getOrElse(master.Response.ListFiles.defaultInstance)
    def clearListFiles: Response = copy(listFiles = None)
    def withListFiles(__v: Response.ListFiles): Response = copy(listFiles = Some(__v))
    def getReadFile: Response.ReadFile = readFile.getOrElse(master.Response.ReadFile.defaultInstance)
    def clearReadFile: Response = copy(readFile = None)
    def withReadFile(__v: Response.ReadFile): Response = copy(readFile = Some(__v))
    def getGetState: Response.GetState = getState.getOrElse(master.Response.GetState.defaultInstance)
    def clearGetState: Response = copy(getState = None)
    def withGetState(__v: Response.GetState): Response = copy(getState = Some(__v))
    def getGetAgents: Response.GetAgents = getAgents.getOrElse(master.Response.GetAgents.defaultInstance)
    def clearGetAgents: Response = copy(getAgents = None)
    def withGetAgents(__v: Response.GetAgents): Response = copy(getAgents = Some(__v))
    def getGetFrameworks: Response.GetFrameworks = getFrameworks.getOrElse(master.Response.GetFrameworks.defaultInstance)
    def clearGetFrameworks: Response = copy(getFrameworks = None)
    def withGetFrameworks(__v: Response.GetFrameworks): Response = copy(getFrameworks = Some(__v))
    def getGetExecutors: Response.GetExecutors = getExecutors.getOrElse(master.Response.GetExecutors.defaultInstance)
    def clearGetExecutors: Response = copy(getExecutors = None)
    def withGetExecutors(__v: Response.GetExecutors): Response = copy(getExecutors = Some(__v))
    def getGetTasks: Response.GetTasks = getTasks.getOrElse(master.Response.GetTasks.defaultInstance)
    def clearGetTasks: Response = copy(getTasks = None)
    def withGetTasks(__v: Response.GetTasks): Response = copy(getTasks = Some(__v))
    def getGetRoles: Response.GetRoles = getRoles.getOrElse(master.Response.GetRoles.defaultInstance)
    def clearGetRoles: Response = copy(getRoles = None)
    def withGetRoles(__v: Response.GetRoles): Response = copy(getRoles = Some(__v))
    def getGetWeights: Response.GetWeights = getWeights.getOrElse(master.Response.GetWeights.defaultInstance)
    def clearGetWeights: Response = copy(getWeights = None)
    def withGetWeights(__v: Response.GetWeights): Response = copy(getWeights = Some(__v))
    def getGetMaster: Response.GetMaster = getMaster.getOrElse(master.Response.GetMaster.defaultInstance)
    def clearGetMaster: Response = copy(getMaster = None)
    def withGetMaster(__v: Response.GetMaster): Response = copy(getMaster = Some(__v))
    def getGetMaintenanceStatus: Response.GetMaintenanceStatus = getMaintenanceStatus.getOrElse(master.Response.GetMaintenanceStatus.defaultInstance)
    def clearGetMaintenanceStatus: Response = copy(getMaintenanceStatus = None)
    def withGetMaintenanceStatus(__v: Response.GetMaintenanceStatus): Response = copy(getMaintenanceStatus = Some(__v))
    def getGetMaintenanceSchedule: Response.GetMaintenanceSchedule = getMaintenanceSchedule.getOrElse(master.Response.GetMaintenanceSchedule.defaultInstance)
    def clearGetMaintenanceSchedule: Response = copy(getMaintenanceSchedule = None)
    def withGetMaintenanceSchedule(__v: Response.GetMaintenanceSchedule): Response = copy(getMaintenanceSchedule = Some(__v))
    def getGetQuota: Response.GetQuota = getQuota.getOrElse(master.Response.GetQuota.defaultInstance)
    def clearGetQuota: Response = copy(getQuota = None)
    def withGetQuota(__v: Response.GetQuota): Response = copy(getQuota = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.map(_.javaValueDescriptor).orNull
        case 2 => getHealth.orNull
        case 3 => getFlags.orNull
        case 4 => getVersion.orNull
        case 5 => getMetrics.orNull
        case 6 => getLoggingLevel.orNull
        case 7 => listFiles.orNull
        case 8 => readFile.orNull
        case 9 => getState.orNull
        case 10 => getAgents.orNull
        case 11 => getFrameworks.orNull
        case 12 => getExecutors.orNull
        case 13 => getTasks.orNull
        case 14 => getRoles.orNull
        case 15 => getWeights.orNull
        case 16 => getMaster.orNull
        case 17 => getMaintenanceStatus.orNull
        case 18 => getMaintenanceSchedule.orNull
        case 19 => getQuota.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => getHealth.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => getFlags.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => getVersion.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => getMetrics.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => getLoggingLevel.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => listFiles.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => readFile.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => getState.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => getAgents.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => getFrameworks.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => getExecutors.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => getTasks.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => getRoles.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => getWeights.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => getMaster.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => getMaintenanceStatus.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => getMaintenanceSchedule.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => getQuota.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = master.Response
}

object Response extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    master.Response(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => master.Response.Type.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Response.GetHealth]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Response.GetFlags]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Response.GetVersion]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Response.GetMetrics]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Response.GetLoggingLevel]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Response.ListFiles]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Response.ReadFile]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Response.GetState]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Response.GetAgents]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Response.GetFrameworks]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Response.GetExecutors]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Response.GetTasks]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Response.GetRoles]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[Response.GetWeights]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[Response.GetMaster]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[Response.GetMaintenanceStatus]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[Response.GetMaintenanceSchedule]],
      __fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[Response.GetQuota]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[Response] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      master.Response(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => master.Response.Type.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Response.GetHealth]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Response.GetFlags]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Response.GetVersion]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Response.GetMetrics]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Response.GetLoggingLevel]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Response.ListFiles]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Response.ReadFile]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[Response.GetState]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Response.GetAgents]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[Response.GetFrameworks]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[Response.GetExecutors]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[Response.GetTasks]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[Response.GetRoles]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[Response.GetWeights]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[Response.GetMaster]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[Response.GetMaintenanceStatus]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[Response.GetMaintenanceSchedule]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[scala.Option[Response.GetQuota]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MasterProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MasterProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = master.Response.GetHealth
      case 3 => __out = master.Response.GetFlags
      case 4 => __out = master.Response.GetVersion
      case 5 => __out = master.Response.GetMetrics
      case 6 => __out = master.Response.GetLoggingLevel
      case 7 => __out = master.Response.ListFiles
      case 8 => __out = master.Response.ReadFile
      case 9 => __out = master.Response.GetState
      case 10 => __out = master.Response.GetAgents
      case 11 => __out = master.Response.GetFrameworks
      case 12 => __out = master.Response.GetExecutors
      case 13 => __out = master.Response.GetTasks
      case 14 => __out = master.Response.GetRoles
      case 15 => __out = master.Response.GetWeights
      case 16 => __out = master.Response.GetMaster
      case 17 => __out = master.Response.GetMaintenanceStatus
      case 18 => __out = master.Response.GetMaintenanceSchedule
      case 19 => __out = master.Response.GetQuota
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => master.Response.Type
    }
  }
  lazy val defaultInstance = master.Response(
  )
  sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Type
    def isUnknown: Boolean = false
    def isGetHealth: Boolean = false
    def isGetFlags: Boolean = false
    def isGetVersion: Boolean = false
    def isGetMetrics: Boolean = false
    def isGetLoggingLevel: Boolean = false
    def isListFiles: Boolean = false
    def isReadFile: Boolean = false
    def isGetState: Boolean = false
    def isGetAgents: Boolean = false
    def isGetFrameworks: Boolean = false
    def isGetExecutors: Boolean = false
    def isGetTasks: Boolean = false
    def isGetRoles: Boolean = false
    def isGetWeights: Boolean = false
    def isGetMaster: Boolean = false
    def isGetMaintenanceStatus: Boolean = false
    def isGetMaintenanceSchedule: Boolean = false
    def isGetQuota: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = master.Response.Type
  }
  
  object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object UNKNOWN extends Type {
      val value = 0
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_HEALTH extends Type {
      val value = 1
      val index = 1
      val name = "GET_HEALTH"
      override def isGetHealth: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_FLAGS extends Type {
      val value = 2
      val index = 2
      val name = "GET_FLAGS"
      override def isGetFlags: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_VERSION extends Type {
      val value = 3
      val index = 3
      val name = "GET_VERSION"
      override def isGetVersion: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_METRICS extends Type {
      val value = 4
      val index = 4
      val name = "GET_METRICS"
      override def isGetMetrics: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_LOGGING_LEVEL extends Type {
      val value = 5
      val index = 5
      val name = "GET_LOGGING_LEVEL"
      override def isGetLoggingLevel: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LIST_FILES extends Type {
      val value = 6
      val index = 6
      val name = "LIST_FILES"
      override def isListFiles: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object READ_FILE extends Type {
      val value = 7
      val index = 7
      val name = "READ_FILE"
      override def isReadFile: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_STATE extends Type {
      val value = 8
      val index = 8
      val name = "GET_STATE"
      override def isGetState: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_AGENTS extends Type {
      val value = 9
      val index = 9
      val name = "GET_AGENTS"
      override def isGetAgents: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_FRAMEWORKS extends Type {
      val value = 10
      val index = 10
      val name = "GET_FRAMEWORKS"
      override def isGetFrameworks: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_EXECUTORS extends Type {
      val value = 11
      val index = 11
      val name = "GET_EXECUTORS"
      override def isGetExecutors: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_TASKS extends Type {
      val value = 12
      val index = 12
      val name = "GET_TASKS"
      override def isGetTasks: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_ROLES extends Type {
      val value = 13
      val index = 13
      val name = "GET_ROLES"
      override def isGetRoles: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_WEIGHTS extends Type {
      val value = 14
      val index = 14
      val name = "GET_WEIGHTS"
      override def isGetWeights: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_MASTER extends Type {
      val value = 15
      val index = 15
      val name = "GET_MASTER"
      override def isGetMaster: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_MAINTENANCE_STATUS extends Type {
      val value = 16
      val index = 16
      val name = "GET_MAINTENANCE_STATUS"
      override def isGetMaintenanceStatus: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_MAINTENANCE_SCHEDULE extends Type {
      val value = 17
      val index = 17
      val name = "GET_MAINTENANCE_SCHEDULE"
      override def isGetMaintenanceSchedule: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET_QUOTA extends Type {
      val value = 18
      val index = 18
      val name = "GET_QUOTA"
      override def isGetQuota: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(UNKNOWN, GET_HEALTH, GET_FLAGS, GET_VERSION, GET_METRICS, GET_LOGGING_LEVEL, LIST_FILES, READ_FILE, GET_STATE, GET_AGENTS, GET_FRAMEWORKS, GET_EXECUTORS, GET_TASKS, GET_ROLES, GET_WEIGHTS, GET_MASTER, GET_MAINTENANCE_STATUS, GET_MAINTENANCE_SCHEDULE, GET_QUOTA)
    def fromValue(value: Int): Type = value match {
      case 0 => UNKNOWN
      case 1 => GET_HEALTH
      case 2 => GET_FLAGS
      case 3 => GET_VERSION
      case 4 => GET_METRICS
      case 5 => GET_LOGGING_LEVEL
      case 6 => LIST_FILES
      case 7 => READ_FILE
      case 8 => GET_STATE
      case 9 => GET_AGENTS
      case 10 => GET_FRAMEWORKS
      case 11 => GET_EXECUTORS
      case 12 => GET_TASKS
      case 13 => GET_ROLES
      case 14 => GET_WEIGHTS
      case 15 => GET_MASTER
      case 16 => GET_MAINTENANCE_STATUS
      case 17 => GET_MAINTENANCE_SCHEDULE
      case 18 => GET_QUOTA
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = master.Response.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = master.Response.scalaDescriptor.enums(0)
  }
  /** `healthy` would be true if the master is healthy. Delayed responses are
    * also indicative of the poor health of the master.
    */
  @SerialVersionUID(0L)
  final case class GetHealth(
      healthy: Boolean
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetHealth] with com.trueaccord.lenses.Updatable[GetHealth] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, healthy)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeBool(1, healthy)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetHealth = {
        var __healthy = this.healthy
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __healthy = _input__.readBool()
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        master.Response.GetHealth(
            healthy = __healthy
        )
      }
      def withHealthy(__v: Boolean): GetHealth = copy(healthy = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => healthy
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PBoolean(healthy)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetHealth
  }
  
  object GetHealth extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetHealth] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetHealth] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetHealth = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetHealth(
        __fieldsMap(__fields.get(0)).asInstanceOf[Boolean]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetHealth] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetHealth(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Boolean]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetHealth(
      healthy = false
    )
    implicit class GetHealthLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetHealth]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetHealth](_l) {
      def healthy: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.healthy)((c_, f_) => c_.copy(healthy = f_))
    }
    final val HEALTHY_FIELD_NUMBER = 1
  }
  
  /** Contains the flag configuration of the master.
    */
  @SerialVersionUID(0L)
  final case class GetFlags(
      flags: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Flag] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetFlags] with com.trueaccord.lenses.Updatable[GetFlags] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        flags.foreach(flags => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(flags.serializedSize) + flags.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        flags.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetFlags = {
        val __flags = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Flag] ++= this.flags)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __flags += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Flag.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        master.Response.GetFlags(
            flags = __flags.result()
        )
      }
      def clearFlags = copy(flags = _root_.scala.collection.Seq.empty)
      def addFlags(__vs: org.apache.mesos.v1.mesos.Flag*): GetFlags = addAllFlags(__vs)
      def addAllFlags(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Flag]): GetFlags = copy(flags = flags ++ __vs)
      def withFlags(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Flag]): GetFlags = copy(flags = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => flags
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(flags.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetFlags
  }
  
  object GetFlags extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetFlags] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetFlags] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetFlags = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetFlags(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Flag]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetFlags] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetFlags(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Flag]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.Flag
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetFlags(
    )
    implicit class GetFlagsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetFlags]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetFlags](_l) {
      def flags: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Flag]] = field(_.flags)((c_, f_) => c_.copy(flags = f_))
    }
    final val FLAGS_FIELD_NUMBER = 1
  }
  
  /** Contains the version information of the master.
    */
  @SerialVersionUID(0L)
  final case class GetVersion(
      versionInfo: org.apache.mesos.v1.mesos.VersionInfo
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetVersion] with com.trueaccord.lenses.Updatable[GetVersion] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(versionInfo.serializedSize) + versionInfo.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(versionInfo.serializedSize)
        versionInfo.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetVersion = {
        var __versionInfo = this.versionInfo
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __versionInfo = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __versionInfo)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        master.Response.GetVersion(
            versionInfo = __versionInfo
        )
      }
      def withVersionInfo(__v: org.apache.mesos.v1.mesos.VersionInfo): GetVersion = copy(versionInfo = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => versionInfo
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => versionInfo.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetVersion
  }
  
  object GetVersion extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetVersion] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetVersion] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetVersion = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetVersion(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.VersionInfo]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetVersion] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetVersion(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.VersionInfo]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.VersionInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetVersion(
      versionInfo = org.apache.mesos.v1.mesos.VersionInfo.defaultInstance
    )
    implicit class GetVersionLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetVersion]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetVersion](_l) {
      def versionInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.VersionInfo] = field(_.versionInfo)((c_, f_) => c_.copy(versionInfo = f_))
    }
    final val VERSION_INFO_FIELD_NUMBER = 1
  }
  
  /** Contains a snapshot of the current metrics.
    */
  @SerialVersionUID(0L)
  final case class GetMetrics(
      metrics: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Metric] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetMetrics] with com.trueaccord.lenses.Updatable[GetMetrics] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        metrics.foreach(metrics => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(metrics.serializedSize) + metrics.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        metrics.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetMetrics = {
        val __metrics = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Metric] ++= this.metrics)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __metrics += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Metric.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        master.Response.GetMetrics(
            metrics = __metrics.result()
        )
      }
      def clearMetrics = copy(metrics = _root_.scala.collection.Seq.empty)
      def addMetrics(__vs: org.apache.mesos.v1.mesos.Metric*): GetMetrics = addAllMetrics(__vs)
      def addAllMetrics(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Metric]): GetMetrics = copy(metrics = metrics ++ __vs)
      def withMetrics(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Metric]): GetMetrics = copy(metrics = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => metrics
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(metrics.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetMetrics
  }
  
  object GetMetrics extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetMetrics] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetMetrics] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetMetrics = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetMetrics(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Metric]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetMetrics] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetMetrics(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Metric]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.Metric
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetMetrics(
    )
    implicit class GetMetricsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetMetrics]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetMetrics](_l) {
      def metrics: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Metric]] = field(_.metrics)((c_, f_) => c_.copy(metrics = f_))
    }
    final val METRICS_FIELD_NUMBER = 1
  }
  
  /** Contains the logging level of the master.
    */
  @SerialVersionUID(0L)
  final case class GetLoggingLevel(
      level: Int
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetLoggingLevel] with com.trueaccord.lenses.Updatable[GetLoggingLevel] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, level)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeUInt32(1, level)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetLoggingLevel = {
        var __level = this.level
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __level = _input__.readUInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        master.Response.GetLoggingLevel(
            level = __level
        )
      }
      def withLevel(__v: Int): GetLoggingLevel = copy(level = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => level
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(level)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetLoggingLevel
  }
  
  object GetLoggingLevel extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetLoggingLevel] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetLoggingLevel] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetLoggingLevel = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetLoggingLevel(
        __fieldsMap(__fields.get(0)).asInstanceOf[Int]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetLoggingLevel] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetLoggingLevel(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetLoggingLevel(
      level = 0
    )
    implicit class GetLoggingLevelLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetLoggingLevel]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetLoggingLevel](_l) {
      def level: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.level)((c_, f_) => c_.copy(level = f_))
    }
    final val LEVEL_FIELD_NUMBER = 1
  }
  
  /** Contains the file listing(similar to `ls -l`) for a directory.
    */
  @SerialVersionUID(0L)
  final case class ListFiles(
      fileInfos: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FileInfo] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ListFiles] with com.trueaccord.lenses.Updatable[ListFiles] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        fileInfos.foreach(fileInfos => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(fileInfos.serializedSize) + fileInfos.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        fileInfos.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.ListFiles = {
        val __fileInfos = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.FileInfo] ++= this.fileInfos)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __fileInfos += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.FileInfo.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        master.Response.ListFiles(
            fileInfos = __fileInfos.result()
        )
      }
      def clearFileInfos = copy(fileInfos = _root_.scala.collection.Seq.empty)
      def addFileInfos(__vs: org.apache.mesos.v1.mesos.FileInfo*): ListFiles = addAllFileInfos(__vs)
      def addAllFileInfos(__vs: TraversableOnce[org.apache.mesos.v1.mesos.FileInfo]): ListFiles = copy(fileInfos = fileInfos ++ __vs)
      def withFileInfos(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FileInfo]): ListFiles = copy(fileInfos = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => fileInfos
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(fileInfos.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.ListFiles
  }
  
  object ListFiles extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.ListFiles] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.ListFiles] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.ListFiles = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.ListFiles(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FileInfo]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.ListFiles] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.ListFiles(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FileInfo]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(5)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.FileInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.ListFiles(
    )
    implicit class ListFilesLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.ListFiles]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.ListFiles](_l) {
      def fileInfos: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FileInfo]] = field(_.fileInfos)((c_, f_) => c_.copy(fileInfos = f_))
    }
    final val FILE_INFOS_FIELD_NUMBER = 1
  }
  
  /** Contains the file data.
    *
    * @param size
    *   The size of file (in bytes).
    */
  @SerialVersionUID(0L)
  final case class ReadFile(
      size: Long,
      data: _root_.com.google.protobuf.ByteString
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ReadFile] with com.trueaccord.lenses.Updatable[ReadFile] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, size)
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, data)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeUInt64(1, size)
        _output__.writeBytes(2, data)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.ReadFile = {
        var __size = this.size
        var __data = this.data
        var __requiredFields0: Long = 0x3L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __size = _input__.readUInt64()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __data = _input__.readBytes()
              __requiredFields0 &= 0xfffffffffffffffdL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        master.Response.ReadFile(
            size = __size,
            data = __data
        )
      }
      def withSize(__v: Long): ReadFile = copy(size = __v)
      def withData(__v: _root_.com.google.protobuf.ByteString): ReadFile = copy(data = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => size
          case 2 => data
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PLong(size)
          case 2 => _root_.scalapb.descriptors.PByteString(data)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.ReadFile
  }
  
  object ReadFile extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.ReadFile] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.ReadFile] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.ReadFile = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.ReadFile(
        __fieldsMap(__fields.get(0)).asInstanceOf[Long],
        __fieldsMap(__fields.get(1)).asInstanceOf[_root_.com.google.protobuf.ByteString]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.ReadFile] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.ReadFile(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Long],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.com.google.protobuf.ByteString]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(6)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(6)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.ReadFile(
      size = 0L,
      data = _root_.com.google.protobuf.ByteString.EMPTY
    )
    implicit class ReadFileLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.ReadFile]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.ReadFile](_l) {
      def size: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.size)((c_, f_) => c_.copy(size = f_))
      def data: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.data)((c_, f_) => c_.copy(data = f_))
    }
    final val SIZE_FIELD_NUMBER = 1
    final val DATA_FIELD_NUMBER = 2
  }
  
  /** Contains full state of the master i.e. information about the tasks,
    * agents, frameworks and executors running in the cluster.
    */
  @SerialVersionUID(0L)
  final case class GetState(
                             getTasks: scala.Option[Response.GetTasks] = None,
                             getExecutors: scala.Option[Response.GetExecutors] = None,
                             getFrameworks: scala.Option[Response.GetFrameworks] = None,
                             getAgents: scala.Option[Response.GetAgents] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetState] with com.trueaccord.lenses.Updatable[GetState] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (getTasks.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getTasks.get.serializedSize) + getTasks.get.serializedSize }
        if (getExecutors.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getExecutors.get.serializedSize) + getExecutors.get.serializedSize }
        if (getFrameworks.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getFrameworks.get.serializedSize) + getFrameworks.get.serializedSize }
        if (getAgents.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getAgents.get.serializedSize) + getAgents.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        getTasks.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        getExecutors.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        getFrameworks.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        getAgents.foreach { __v =>
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetState = {
        var __getTasks = this.getTasks
        var __getExecutors = this.getExecutors
        var __getFrameworks = this.getFrameworks
        var __getAgents = this.getAgents
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __getTasks = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getTasks.getOrElse(master.Response.GetTasks.defaultInstance)))
            case 18 =>
              __getExecutors = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getExecutors.getOrElse(master.Response.GetExecutors.defaultInstance)))
            case 26 =>
              __getFrameworks = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getFrameworks.getOrElse(master.Response.GetFrameworks.defaultInstance)))
            case 34 =>
              __getAgents = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getAgents.getOrElse(master.Response.GetAgents.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        master.Response.GetState(
            getTasks = __getTasks,
            getExecutors = __getExecutors,
            getFrameworks = __getFrameworks,
            getAgents = __getAgents
        )
      }
      def getGetTasks: Response.GetTasks = getTasks.getOrElse(master.Response.GetTasks.defaultInstance)
      def clearGetTasks: GetState = copy(getTasks = None)
      def withGetTasks(__v: Response.GetTasks): GetState = copy(getTasks = Some(__v))
      def getGetExecutors: Response.GetExecutors = getExecutors.getOrElse(master.Response.GetExecutors.defaultInstance)
      def clearGetExecutors: GetState = copy(getExecutors = None)
      def withGetExecutors(__v: Response.GetExecutors): GetState = copy(getExecutors = Some(__v))
      def getGetFrameworks: Response.GetFrameworks = getFrameworks.getOrElse(master.Response.GetFrameworks.defaultInstance)
      def clearGetFrameworks: GetState = copy(getFrameworks = None)
      def withGetFrameworks(__v: Response.GetFrameworks): GetState = copy(getFrameworks = Some(__v))
      def getGetAgents: Response.GetAgents = getAgents.getOrElse(master.Response.GetAgents.defaultInstance)
      def clearGetAgents: GetState = copy(getAgents = None)
      def withGetAgents(__v: Response.GetAgents): GetState = copy(getAgents = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => getTasks.orNull
          case 2 => getExecutors.orNull
          case 3 => getFrameworks.orNull
          case 4 => getAgents.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => getTasks.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => getExecutors.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => getFrameworks.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => getAgents.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetState
  }
  
  object GetState extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetState] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetState] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetState = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetState(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Response.GetTasks]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Response.GetExecutors]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Response.GetFrameworks]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Response.GetAgents]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetState] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetState(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Response.GetTasks]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Response.GetExecutors]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Response.GetFrameworks]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Response.GetAgents]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(7)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(7)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = master.Response.GetTasks
        case 2 => __out = master.Response.GetExecutors
        case 3 => __out = master.Response.GetFrameworks
        case 4 => __out = master.Response.GetAgents
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetState(
    )
    implicit class GetStateLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetState]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetState](_l) {
      def getTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetTasks] = field(_.getGetTasks)((c_, f_) => c_.copy(getTasks = Some(f_)))
      def optionalGetTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetTasks]] = field(_.getTasks)((c_, f_) => c_.copy(getTasks = f_))
      def getExecutors: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetExecutors] = field(_.getGetExecutors)((c_, f_) => c_.copy(getExecutors = Some(f_)))
      def optionalGetExecutors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetExecutors]] = field(_.getExecutors)((c_, f_) => c_.copy(getExecutors = f_))
      def getFrameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetFrameworks] = field(_.getGetFrameworks)((c_, f_) => c_.copy(getFrameworks = Some(f_)))
      def optionalGetFrameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetFrameworks]] = field(_.getFrameworks)((c_, f_) => c_.copy(getFrameworks = f_))
      def getAgents: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetAgents] = field(_.getGetAgents)((c_, f_) => c_.copy(getAgents = Some(f_)))
      def optionalGetAgents: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetAgents]] = field(_.getAgents)((c_, f_) => c_.copy(getAgents = f_))
    }
    final val GET_TASKS_FIELD_NUMBER = 1
    final val GET_EXECUTORS_FIELD_NUMBER = 2
    final val GET_FRAMEWORKS_FIELD_NUMBER = 3
    final val GET_AGENTS_FIELD_NUMBER = 4
  }
  
  /** @param agents
    *   Registered agents.
    * @param recoveredAgents
    *   Agents which are recovered from registry but not reregistered yet.
    */
  @SerialVersionUID(0L)
  final case class GetAgents(
                              agents: _root_.scala.collection.Seq[Response.GetAgents.Agent] = _root_.scala.collection.Seq.empty,
                              recoveredAgents: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.AgentInfo] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetAgents] with com.trueaccord.lenses.Updatable[GetAgents] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        agents.foreach(agents => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agents.serializedSize) + agents.serializedSize)
        recoveredAgents.foreach(recoveredAgents => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(recoveredAgents.serializedSize) + recoveredAgents.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        agents.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        recoveredAgents.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetAgents = {
        val __agents = (_root_.scala.collection.immutable.Vector.newBuilder[Response.GetAgents.Agent] ++= this.agents)
        val __recoveredAgents = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.AgentInfo] ++= this.recoveredAgents)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __agents += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, master.Response.GetAgents.Agent.defaultInstance)
            case 18 =>
              __recoveredAgents += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.AgentInfo.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        master.Response.GetAgents(
            agents = __agents.result(),
            recoveredAgents = __recoveredAgents.result()
        )
      }
      def clearAgents = copy(agents = _root_.scala.collection.Seq.empty)
      def addAgents(__vs: Response.GetAgents.Agent*): GetAgents = addAllAgents(__vs)
      def addAllAgents(__vs: TraversableOnce[Response.GetAgents.Agent]): GetAgents = copy(agents = agents ++ __vs)
      def withAgents(__v: _root_.scala.collection.Seq[Response.GetAgents.Agent]): GetAgents = copy(agents = __v)
      def clearRecoveredAgents = copy(recoveredAgents = _root_.scala.collection.Seq.empty)
      def addRecoveredAgents(__vs: org.apache.mesos.v1.mesos.AgentInfo*): GetAgents = addAllRecoveredAgents(__vs)
      def addAllRecoveredAgents(__vs: TraversableOnce[org.apache.mesos.v1.mesos.AgentInfo]): GetAgents = copy(recoveredAgents = recoveredAgents ++ __vs)
      def withRecoveredAgents(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.AgentInfo]): GetAgents = copy(recoveredAgents = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => agents
          case 2 => recoveredAgents
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(agents.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 2 => _root_.scalapb.descriptors.PRepeated(recoveredAgents.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetAgents
  }
  
  object GetAgents extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetAgents] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetAgents] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetAgents = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetAgents(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[Response.GetAgents.Agent]],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.AgentInfo]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetAgents] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetAgents(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[Response.GetAgents.Agent]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.AgentInfo]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(8)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(8)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = master.Response.GetAgents.Agent
        case 2 => __out = org.apache.mesos.v1.mesos.AgentInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetAgents(
    )
    /** @param totalResources
      *   Total resources (including oversubscribed resources) the agent
      *   provides.
      */
    @SerialVersionUID(0L)
    final case class Agent(
        agentInfo: org.apache.mesos.v1.mesos.AgentInfo,
        active: Boolean,
        version: String,
        pid: scala.Option[String] = None,
        registeredTime: scala.Option[org.apache.mesos.v1.mesos.TimeInfo] = None,
        reregisteredTime: scala.Option[org.apache.mesos.v1.mesos.TimeInfo] = None,
        totalResources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty,
        allocatedResources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty,
        offeredResources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty,
        capabilities: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.AgentInfo.Capability] = _root_.scala.collection.Seq.empty
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Agent] with com.trueaccord.lenses.Updatable[Agent] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agentInfo.serializedSize) + agentInfo.serializedSize
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, active)
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, version)
          if (pid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, pid.get) }
          if (registeredTime.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(registeredTime.get.serializedSize) + registeredTime.get.serializedSize }
          if (reregisteredTime.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(reregisteredTime.get.serializedSize) + reregisteredTime.get.serializedSize }
          totalResources.foreach(totalResources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(totalResources.serializedSize) + totalResources.serializedSize)
          allocatedResources.foreach(allocatedResources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(allocatedResources.serializedSize) + allocatedResources.serializedSize)
          offeredResources.foreach(offeredResources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(offeredResources.serializedSize) + offeredResources.serializedSize)
          capabilities.foreach(capabilities => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(capabilities.serializedSize) + capabilities.serializedSize)
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(agentInfo.serializedSize)
          agentInfo.writeTo(_output__)
          _output__.writeBool(2, active)
          _output__.writeString(3, version)
          pid.foreach { __v =>
            _output__.writeString(4, __v)
          };
          registeredTime.foreach { __v =>
            _output__.writeTag(5, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          reregisteredTime.foreach { __v =>
            _output__.writeTag(6, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          totalResources.foreach { __v =>
            _output__.writeTag(7, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          allocatedResources.foreach { __v =>
            _output__.writeTag(8, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          offeredResources.foreach { __v =>
            _output__.writeTag(9, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          capabilities.foreach { __v =>
            _output__.writeTag(10, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetAgents.Agent = {
          var __agentInfo = this.agentInfo
          var __active = this.active
          var __version = this.version
          var __pid = this.pid
          var __registeredTime = this.registeredTime
          var __reregisteredTime = this.reregisteredTime
          val __totalResources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.totalResources)
          val __allocatedResources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.allocatedResources)
          val __offeredResources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.offeredResources)
          val __capabilities = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.AgentInfo.Capability] ++= this.capabilities)
          var __requiredFields0: Long = 0x7L
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __agentInfo = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __agentInfo)
                __requiredFields0 &= 0xfffffffffffffffeL
              case 16 =>
                __active = _input__.readBool()
                __requiredFields0 &= 0xfffffffffffffffdL
              case 26 =>
                __version = _input__.readString()
                __requiredFields0 &= 0xfffffffffffffffbL
              case 34 =>
                __pid = Some(_input__.readString())
              case 42 =>
                __registeredTime = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __registeredTime.getOrElse(org.apache.mesos.v1.mesos.TimeInfo.defaultInstance)))
              case 50 =>
                __reregisteredTime = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __reregisteredTime.getOrElse(org.apache.mesos.v1.mesos.TimeInfo.defaultInstance)))
              case 58 =>
                __totalResources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
              case 66 =>
                __allocatedResources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
              case 74 =>
                __offeredResources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
              case 82 =>
                __capabilities += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.AgentInfo.Capability.defaultInstance)
              case tag => _input__.skipField(tag)
            }
          }
          if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
          master.Response.GetAgents.Agent(
              agentInfo = __agentInfo,
              active = __active,
              version = __version,
              pid = __pid,
              registeredTime = __registeredTime,
              reregisteredTime = __reregisteredTime,
              totalResources = __totalResources.result(),
              allocatedResources = __allocatedResources.result(),
              offeredResources = __offeredResources.result(),
              capabilities = __capabilities.result()
          )
        }
        def withAgentInfo(__v: org.apache.mesos.v1.mesos.AgentInfo): Agent = copy(agentInfo = __v)
        def withActive(__v: Boolean): Agent = copy(active = __v)
        def withVersion(__v: String): Agent = copy(version = __v)
        def getPid: String = pid.getOrElse("")
        def clearPid: Agent = copy(pid = None)
        def withPid(__v: String): Agent = copy(pid = Some(__v))
        def getRegisteredTime: org.apache.mesos.v1.mesos.TimeInfo = registeredTime.getOrElse(org.apache.mesos.v1.mesos.TimeInfo.defaultInstance)
        def clearRegisteredTime: Agent = copy(registeredTime = None)
        def withRegisteredTime(__v: org.apache.mesos.v1.mesos.TimeInfo): Agent = copy(registeredTime = Some(__v))
        def getReregisteredTime: org.apache.mesos.v1.mesos.TimeInfo = reregisteredTime.getOrElse(org.apache.mesos.v1.mesos.TimeInfo.defaultInstance)
        def clearReregisteredTime: Agent = copy(reregisteredTime = None)
        def withReregisteredTime(__v: org.apache.mesos.v1.mesos.TimeInfo): Agent = copy(reregisteredTime = Some(__v))
        def clearTotalResources = copy(totalResources = _root_.scala.collection.Seq.empty)
        def addTotalResources(__vs: org.apache.mesos.v1.mesos.Resource*): Agent = addAllTotalResources(__vs)
        def addAllTotalResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Agent = copy(totalResources = totalResources ++ __vs)
        def withTotalResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Agent = copy(totalResources = __v)
        def clearAllocatedResources = copy(allocatedResources = _root_.scala.collection.Seq.empty)
        def addAllocatedResources(__vs: org.apache.mesos.v1.mesos.Resource*): Agent = addAllAllocatedResources(__vs)
        def addAllAllocatedResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Agent = copy(allocatedResources = allocatedResources ++ __vs)
        def withAllocatedResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Agent = copy(allocatedResources = __v)
        def clearOfferedResources = copy(offeredResources = _root_.scala.collection.Seq.empty)
        def addOfferedResources(__vs: org.apache.mesos.v1.mesos.Resource*): Agent = addAllOfferedResources(__vs)
        def addAllOfferedResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Agent = copy(offeredResources = offeredResources ++ __vs)
        def withOfferedResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Agent = copy(offeredResources = __v)
        def clearCapabilities = copy(capabilities = _root_.scala.collection.Seq.empty)
        def addCapabilities(__vs: org.apache.mesos.v1.mesos.AgentInfo.Capability*): Agent = addAllCapabilities(__vs)
        def addAllCapabilities(__vs: TraversableOnce[org.apache.mesos.v1.mesos.AgentInfo.Capability]): Agent = copy(capabilities = capabilities ++ __vs)
        def withCapabilities(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.AgentInfo.Capability]): Agent = copy(capabilities = __v)
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => agentInfo
            case 2 => active
            case 3 => version
            case 4 => pid.orNull
            case 5 => registeredTime.orNull
            case 6 => reregisteredTime.orNull
            case 7 => totalResources
            case 8 => allocatedResources
            case 9 => offeredResources
            case 10 => capabilities
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => agentInfo.toPMessage
            case 2 => _root_.scalapb.descriptors.PBoolean(active)
            case 3 => _root_.scalapb.descriptors.PString(version)
            case 4 => pid.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 5 => registeredTime.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 6 => reregisteredTime.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 7 => _root_.scalapb.descriptors.PRepeated(totalResources.map(_.toPMessage)(_root_.scala.collection.breakOut))
            case 8 => _root_.scalapb.descriptors.PRepeated(allocatedResources.map(_.toPMessage)(_root_.scala.collection.breakOut))
            case 9 => _root_.scalapb.descriptors.PRepeated(offeredResources.map(_.toPMessage)(_root_.scala.collection.breakOut))
            case 10 => _root_.scalapb.descriptors.PRepeated(capabilities.map(_.toPMessage)(_root_.scala.collection.breakOut))
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = master.Response.GetAgents.Agent
    }
    
    object Agent extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetAgents.Agent] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetAgents.Agent] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetAgents.Agent = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        master.Response.GetAgents.Agent(
          __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.AgentInfo],
          __fieldsMap(__fields.get(1)).asInstanceOf[Boolean],
          __fieldsMap(__fields.get(2)).asInstanceOf[String],
          __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
          __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.TimeInfo]],
          __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.TimeInfo]],
          __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]],
          __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]],
          __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]],
          __fieldsMap.getOrElse(__fields.get(9), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.AgentInfo.Capability]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetAgents.Agent] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          master.Response.GetAgents.Agent(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.AgentInfo],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Boolean],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[String],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.TimeInfo]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.TimeInfo]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.AgentInfo.Capability]]).getOrElse(_root_.scala.collection.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.GetAgents.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.GetAgents.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => __out = org.apache.mesos.v1.mesos.AgentInfo
          case 5 => __out = org.apache.mesos.v1.mesos.TimeInfo
          case 6 => __out = org.apache.mesos.v1.mesos.TimeInfo
          case 7 => __out = org.apache.mesos.v1.mesos.Resource
          case 8 => __out = org.apache.mesos.v1.mesos.Resource
          case 9 => __out = org.apache.mesos.v1.mesos.Resource
          case 10 => __out = org.apache.mesos.v1.mesos.AgentInfo.Capability
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = master.Response.GetAgents.Agent(
        agentInfo = org.apache.mesos.v1.mesos.AgentInfo.defaultInstance,
        active = false,
        version = ""
      )
      implicit class AgentLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetAgents.Agent]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetAgents.Agent](_l) {
        def agentInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.AgentInfo] = field(_.agentInfo)((c_, f_) => c_.copy(agentInfo = f_))
        def active: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.active)((c_, f_) => c_.copy(active = f_))
        def version: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.version)((c_, f_) => c_.copy(version = f_))
        def pid: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPid)((c_, f_) => c_.copy(pid = Some(f_)))
        def optionalPid: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.pid)((c_, f_) => c_.copy(pid = f_))
        def registeredTime: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TimeInfo] = field(_.getRegisteredTime)((c_, f_) => c_.copy(registeredTime = Some(f_)))
        def optionalRegisteredTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.TimeInfo]] = field(_.registeredTime)((c_, f_) => c_.copy(registeredTime = f_))
        def reregisteredTime: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TimeInfo] = field(_.getReregisteredTime)((c_, f_) => c_.copy(reregisteredTime = Some(f_)))
        def optionalReregisteredTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.TimeInfo]] = field(_.reregisteredTime)((c_, f_) => c_.copy(reregisteredTime = f_))
        def totalResources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.totalResources)((c_, f_) => c_.copy(totalResources = f_))
        def allocatedResources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.allocatedResources)((c_, f_) => c_.copy(allocatedResources = f_))
        def offeredResources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.offeredResources)((c_, f_) => c_.copy(offeredResources = f_))
        def capabilities: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.AgentInfo.Capability]] = field(_.capabilities)((c_, f_) => c_.copy(capabilities = f_))
      }
      final val AGENT_INFO_FIELD_NUMBER = 1
      final val ACTIVE_FIELD_NUMBER = 2
      final val VERSION_FIELD_NUMBER = 3
      final val PID_FIELD_NUMBER = 4
      final val REGISTERED_TIME_FIELD_NUMBER = 5
      final val REREGISTERED_TIME_FIELD_NUMBER = 6
      final val TOTAL_RESOURCES_FIELD_NUMBER = 7
      final val ALLOCATED_RESOURCES_FIELD_NUMBER = 8
      final val OFFERED_RESOURCES_FIELD_NUMBER = 9
      final val CAPABILITIES_FIELD_NUMBER = 10
    }
    
    implicit class GetAgentsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetAgents]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetAgents](_l) {
      def agents: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Response.GetAgents.Agent]] = field(_.agents)((c_, f_) => c_.copy(agents = f_))
      def recoveredAgents: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.AgentInfo]] = field(_.recoveredAgents)((c_, f_) => c_.copy(recoveredAgents = f_))
    }
    final val AGENTS_FIELD_NUMBER = 1
    final val RECOVERED_AGENTS_FIELD_NUMBER = 2
  }
  
  /** Information about all the frameworks known to the master at the current
    * time. Note that there might be frameworks unknown to the master running
    * on partitioned or unsubscribed agents.
    *
    * @param frameworks
    *   Frameworks that have subscribed with the master. Note that this includes
    *   frameworks that are disconnected and in the process of re-subscribing.
    * @param completedFrameworks
    *   Frameworks that have been teared down.
    * @param recoveredFrameworks
    *   This field previously contained frameworks that previously
    *   subscribed but haven't yet re-subscribed after a master failover.
    *   As of Mesos 1.2, this field will always be empty; recovered
    *   frameworks are now reported in the `frameworks` list with the
    *   `recovered` field set to true.
    *  
    *   TODO(neilc): Remove this field after a deprecation cycle starting
    *   in Mesos 1.2.
    */
  @SerialVersionUID(0L)
  final case class GetFrameworks(
                                  frameworks: _root_.scala.collection.Seq[Response.GetFrameworks.Framework] = _root_.scala.collection.Seq.empty,
                                  completedFrameworks: _root_.scala.collection.Seq[Response.GetFrameworks.Framework] = _root_.scala.collection.Seq.empty,
                                  recoveredFrameworks: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FrameworkInfo] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetFrameworks] with com.trueaccord.lenses.Updatable[GetFrameworks] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        frameworks.foreach(frameworks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(frameworks.serializedSize) + frameworks.serializedSize)
        completedFrameworks.foreach(completedFrameworks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(completedFrameworks.serializedSize) + completedFrameworks.serializedSize)
        recoveredFrameworks.foreach(recoveredFrameworks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(recoveredFrameworks.serializedSize) + recoveredFrameworks.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        frameworks.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        completedFrameworks.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        recoveredFrameworks.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetFrameworks = {
        val __frameworks = (_root_.scala.collection.immutable.Vector.newBuilder[Response.GetFrameworks.Framework] ++= this.frameworks)
        val __completedFrameworks = (_root_.scala.collection.immutable.Vector.newBuilder[Response.GetFrameworks.Framework] ++= this.completedFrameworks)
        val __recoveredFrameworks = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.FrameworkInfo] ++= this.recoveredFrameworks)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __frameworks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, master.Response.GetFrameworks.Framework.defaultInstance)
            case 18 =>
              __completedFrameworks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, master.Response.GetFrameworks.Framework.defaultInstance)
            case 26 =>
              __recoveredFrameworks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.FrameworkInfo.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        master.Response.GetFrameworks(
            frameworks = __frameworks.result(),
            completedFrameworks = __completedFrameworks.result(),
            recoveredFrameworks = __recoveredFrameworks.result()
        )
      }
      def clearFrameworks = copy(frameworks = _root_.scala.collection.Seq.empty)
      def addFrameworks(__vs: Response.GetFrameworks.Framework*): GetFrameworks = addAllFrameworks(__vs)
      def addAllFrameworks(__vs: TraversableOnce[Response.GetFrameworks.Framework]): GetFrameworks = copy(frameworks = frameworks ++ __vs)
      def withFrameworks(__v: _root_.scala.collection.Seq[Response.GetFrameworks.Framework]): GetFrameworks = copy(frameworks = __v)
      def clearCompletedFrameworks = copy(completedFrameworks = _root_.scala.collection.Seq.empty)
      def addCompletedFrameworks(__vs: Response.GetFrameworks.Framework*): GetFrameworks = addAllCompletedFrameworks(__vs)
      def addAllCompletedFrameworks(__vs: TraversableOnce[Response.GetFrameworks.Framework]): GetFrameworks = copy(completedFrameworks = completedFrameworks ++ __vs)
      def withCompletedFrameworks(__v: _root_.scala.collection.Seq[Response.GetFrameworks.Framework]): GetFrameworks = copy(completedFrameworks = __v)
      def clearRecoveredFrameworks = copy(recoveredFrameworks = _root_.scala.collection.Seq.empty)
      def addRecoveredFrameworks(__vs: org.apache.mesos.v1.mesos.FrameworkInfo*): GetFrameworks = addAllRecoveredFrameworks(__vs)
      def addAllRecoveredFrameworks(__vs: TraversableOnce[org.apache.mesos.v1.mesos.FrameworkInfo]): GetFrameworks = copy(recoveredFrameworks = recoveredFrameworks ++ __vs)
      def withRecoveredFrameworks(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FrameworkInfo]): GetFrameworks = copy(recoveredFrameworks = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => frameworks
          case 2 => completedFrameworks
          case 3 => recoveredFrameworks
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(frameworks.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 2 => _root_.scalapb.descriptors.PRepeated(completedFrameworks.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 3 => _root_.scalapb.descriptors.PRepeated(recoveredFrameworks.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetFrameworks
  }
  
  object GetFrameworks extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetFrameworks] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetFrameworks] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetFrameworks = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetFrameworks(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[Response.GetFrameworks.Framework]],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[Response.GetFrameworks.Framework]],
        __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FrameworkInfo]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetFrameworks] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetFrameworks(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[Response.GetFrameworks.Framework]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[Response.GetFrameworks.Framework]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FrameworkInfo]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(9)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(9)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = master.Response.GetFrameworks.Framework
        case 2 => __out = master.Response.GetFrameworks.Framework
        case 3 => __out = org.apache.mesos.v1.mesos.FrameworkInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetFrameworks(
    )
    /** @param recovered
      *   If true, this framework was previously subscribed but hasn't
      *   yet re-subscribed after a master failover. Recovered frameworks
      *   are only reported if one or more agents running a task or
      *   executor for the framework have re-registered after master
      *   failover.
      */
    @SerialVersionUID(0L)
    final case class Framework(
        frameworkInfo: org.apache.mesos.v1.mesos.FrameworkInfo,
        active: Boolean,
        connected: Boolean,
        recovered: Boolean,
        registeredTime: scala.Option[org.apache.mesos.v1.mesos.TimeInfo] = None,
        reregisteredTime: scala.Option[org.apache.mesos.v1.mesos.TimeInfo] = None,
        unregisteredTime: scala.Option[org.apache.mesos.v1.mesos.TimeInfo] = None,
        offers: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Offer] = _root_.scala.collection.Seq.empty,
        inverseOffers: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.InverseOffer] = _root_.scala.collection.Seq.empty,
        allocatedResources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty,
        offeredResources: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource] = _root_.scala.collection.Seq.empty
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Framework] with com.trueaccord.lenses.Updatable[Framework] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(frameworkInfo.serializedSize) + frameworkInfo.serializedSize
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, active)
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, connected)
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(11, recovered)
          if (registeredTime.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(registeredTime.get.serializedSize) + registeredTime.get.serializedSize }
          if (reregisteredTime.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(reregisteredTime.get.serializedSize) + reregisteredTime.get.serializedSize }
          if (unregisteredTime.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(unregisteredTime.get.serializedSize) + unregisteredTime.get.serializedSize }
          offers.foreach(offers => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(offers.serializedSize) + offers.serializedSize)
          inverseOffers.foreach(inverseOffers => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(inverseOffers.serializedSize) + inverseOffers.serializedSize)
          allocatedResources.foreach(allocatedResources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(allocatedResources.serializedSize) + allocatedResources.serializedSize)
          offeredResources.foreach(offeredResources => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(offeredResources.serializedSize) + offeredResources.serializedSize)
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(frameworkInfo.serializedSize)
          frameworkInfo.writeTo(_output__)
          _output__.writeBool(2, active)
          _output__.writeBool(3, connected)
          registeredTime.foreach { __v =>
            _output__.writeTag(4, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          reregisteredTime.foreach { __v =>
            _output__.writeTag(5, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          unregisteredTime.foreach { __v =>
            _output__.writeTag(6, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          offers.foreach { __v =>
            _output__.writeTag(7, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          inverseOffers.foreach { __v =>
            _output__.writeTag(8, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          allocatedResources.foreach { __v =>
            _output__.writeTag(9, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          offeredResources.foreach { __v =>
            _output__.writeTag(10, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          _output__.writeBool(11, recovered)
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetFrameworks.Framework = {
          var __frameworkInfo = this.frameworkInfo
          var __active = this.active
          var __connected = this.connected
          var __recovered = this.recovered
          var __registeredTime = this.registeredTime
          var __reregisteredTime = this.reregisteredTime
          var __unregisteredTime = this.unregisteredTime
          val __offers = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Offer] ++= this.offers)
          val __inverseOffers = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.InverseOffer] ++= this.inverseOffers)
          val __allocatedResources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.allocatedResources)
          val __offeredResources = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Resource] ++= this.offeredResources)
          var __requiredFields0: Long = 0xfL
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __frameworkInfo = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __frameworkInfo)
                __requiredFields0 &= 0xfffffffffffffffeL
              case 16 =>
                __active = _input__.readBool()
                __requiredFields0 &= 0xfffffffffffffffdL
              case 24 =>
                __connected = _input__.readBool()
                __requiredFields0 &= 0xfffffffffffffffbL
              case 88 =>
                __recovered = _input__.readBool()
                __requiredFields0 &= 0xfffffffffffffff7L
              case 34 =>
                __registeredTime = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __registeredTime.getOrElse(org.apache.mesos.v1.mesos.TimeInfo.defaultInstance)))
              case 42 =>
                __reregisteredTime = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __reregisteredTime.getOrElse(org.apache.mesos.v1.mesos.TimeInfo.defaultInstance)))
              case 50 =>
                __unregisteredTime = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __unregisteredTime.getOrElse(org.apache.mesos.v1.mesos.TimeInfo.defaultInstance)))
              case 58 =>
                __offers += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Offer.defaultInstance)
              case 66 =>
                __inverseOffers += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.InverseOffer.defaultInstance)
              case 74 =>
                __allocatedResources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
              case 82 =>
                __offeredResources += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Resource.defaultInstance)
              case tag => _input__.skipField(tag)
            }
          }
          if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
          master.Response.GetFrameworks.Framework(
              frameworkInfo = __frameworkInfo,
              active = __active,
              connected = __connected,
              recovered = __recovered,
              registeredTime = __registeredTime,
              reregisteredTime = __reregisteredTime,
              unregisteredTime = __unregisteredTime,
              offers = __offers.result(),
              inverseOffers = __inverseOffers.result(),
              allocatedResources = __allocatedResources.result(),
              offeredResources = __offeredResources.result()
          )
        }
        def withFrameworkInfo(__v: org.apache.mesos.v1.mesos.FrameworkInfo): Framework = copy(frameworkInfo = __v)
        def withActive(__v: Boolean): Framework = copy(active = __v)
        def withConnected(__v: Boolean): Framework = copy(connected = __v)
        def withRecovered(__v: Boolean): Framework = copy(recovered = __v)
        def getRegisteredTime: org.apache.mesos.v1.mesos.TimeInfo = registeredTime.getOrElse(org.apache.mesos.v1.mesos.TimeInfo.defaultInstance)
        def clearRegisteredTime: Framework = copy(registeredTime = None)
        def withRegisteredTime(__v: org.apache.mesos.v1.mesos.TimeInfo): Framework = copy(registeredTime = Some(__v))
        def getReregisteredTime: org.apache.mesos.v1.mesos.TimeInfo = reregisteredTime.getOrElse(org.apache.mesos.v1.mesos.TimeInfo.defaultInstance)
        def clearReregisteredTime: Framework = copy(reregisteredTime = None)
        def withReregisteredTime(__v: org.apache.mesos.v1.mesos.TimeInfo): Framework = copy(reregisteredTime = Some(__v))
        def getUnregisteredTime: org.apache.mesos.v1.mesos.TimeInfo = unregisteredTime.getOrElse(org.apache.mesos.v1.mesos.TimeInfo.defaultInstance)
        def clearUnregisteredTime: Framework = copy(unregisteredTime = None)
        def withUnregisteredTime(__v: org.apache.mesos.v1.mesos.TimeInfo): Framework = copy(unregisteredTime = Some(__v))
        def clearOffers = copy(offers = _root_.scala.collection.Seq.empty)
        def addOffers(__vs: org.apache.mesos.v1.mesos.Offer*): Framework = addAllOffers(__vs)
        def addAllOffers(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Offer]): Framework = copy(offers = offers ++ __vs)
        def withOffers(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Offer]): Framework = copy(offers = __v)
        def clearInverseOffers = copy(inverseOffers = _root_.scala.collection.Seq.empty)
        def addInverseOffers(__vs: org.apache.mesos.v1.mesos.InverseOffer*): Framework = addAllInverseOffers(__vs)
        def addAllInverseOffers(__vs: TraversableOnce[org.apache.mesos.v1.mesos.InverseOffer]): Framework = copy(inverseOffers = inverseOffers ++ __vs)
        def withInverseOffers(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.InverseOffer]): Framework = copy(inverseOffers = __v)
        def clearAllocatedResources = copy(allocatedResources = _root_.scala.collection.Seq.empty)
        def addAllocatedResources(__vs: org.apache.mesos.v1.mesos.Resource*): Framework = addAllAllocatedResources(__vs)
        def addAllAllocatedResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Framework = copy(allocatedResources = allocatedResources ++ __vs)
        def withAllocatedResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Framework = copy(allocatedResources = __v)
        def clearOfferedResources = copy(offeredResources = _root_.scala.collection.Seq.empty)
        def addOfferedResources(__vs: org.apache.mesos.v1.mesos.Resource*): Framework = addAllOfferedResources(__vs)
        def addAllOfferedResources(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Resource]): Framework = copy(offeredResources = offeredResources ++ __vs)
        def withOfferedResources(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]): Framework = copy(offeredResources = __v)
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => frameworkInfo
            case 2 => active
            case 3 => connected
            case 11 => recovered
            case 4 => registeredTime.orNull
            case 5 => reregisteredTime.orNull
            case 6 => unregisteredTime.orNull
            case 7 => offers
            case 8 => inverseOffers
            case 9 => allocatedResources
            case 10 => offeredResources
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => frameworkInfo.toPMessage
            case 2 => _root_.scalapb.descriptors.PBoolean(active)
            case 3 => _root_.scalapb.descriptors.PBoolean(connected)
            case 11 => _root_.scalapb.descriptors.PBoolean(recovered)
            case 4 => registeredTime.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 5 => reregisteredTime.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 6 => unregisteredTime.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 7 => _root_.scalapb.descriptors.PRepeated(offers.map(_.toPMessage)(_root_.scala.collection.breakOut))
            case 8 => _root_.scalapb.descriptors.PRepeated(inverseOffers.map(_.toPMessage)(_root_.scala.collection.breakOut))
            case 9 => _root_.scalapb.descriptors.PRepeated(allocatedResources.map(_.toPMessage)(_root_.scala.collection.breakOut))
            case 10 => _root_.scalapb.descriptors.PRepeated(offeredResources.map(_.toPMessage)(_root_.scala.collection.breakOut))
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = master.Response.GetFrameworks.Framework
    }
    
    object Framework extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetFrameworks.Framework] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetFrameworks.Framework] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetFrameworks.Framework = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        master.Response.GetFrameworks.Framework(
          __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.FrameworkInfo],
          __fieldsMap(__fields.get(1)).asInstanceOf[Boolean],
          __fieldsMap(__fields.get(2)).asInstanceOf[Boolean],
          __fieldsMap(__fields.get(3)).asInstanceOf[Boolean],
          __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.TimeInfo]],
          __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.TimeInfo]],
          __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.TimeInfo]],
          __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Offer]],
          __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.InverseOffer]],
          __fieldsMap.getOrElse(__fields.get(9), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]],
          __fieldsMap.getOrElse(__fields.get(10), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetFrameworks.Framework] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          master.Response.GetFrameworks.Framework(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.FrameworkInfo],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Boolean],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[Boolean],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).get.as[Boolean],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.TimeInfo]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.TimeInfo]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.TimeInfo]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Offer]]).getOrElse(_root_.scala.collection.Seq.empty),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.InverseOffer]]).getOrElse(_root_.scala.collection.Seq.empty),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]]).getOrElse(_root_.scala.collection.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.GetFrameworks.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.GetFrameworks.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => __out = org.apache.mesos.v1.mesos.FrameworkInfo
          case 4 => __out = org.apache.mesos.v1.mesos.TimeInfo
          case 5 => __out = org.apache.mesos.v1.mesos.TimeInfo
          case 6 => __out = org.apache.mesos.v1.mesos.TimeInfo
          case 7 => __out = org.apache.mesos.v1.mesos.Offer
          case 8 => __out = org.apache.mesos.v1.mesos.InverseOffer
          case 9 => __out = org.apache.mesos.v1.mesos.Resource
          case 10 => __out = org.apache.mesos.v1.mesos.Resource
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = master.Response.GetFrameworks.Framework(
        frameworkInfo = org.apache.mesos.v1.mesos.FrameworkInfo.defaultInstance,
        active = false,
        connected = false,
        recovered = false
      )
      implicit class FrameworkLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetFrameworks.Framework]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetFrameworks.Framework](_l) {
        def frameworkInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.FrameworkInfo] = field(_.frameworkInfo)((c_, f_) => c_.copy(frameworkInfo = f_))
        def active: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.active)((c_, f_) => c_.copy(active = f_))
        def connected: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.connected)((c_, f_) => c_.copy(connected = f_))
        def recovered: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.recovered)((c_, f_) => c_.copy(recovered = f_))
        def registeredTime: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TimeInfo] = field(_.getRegisteredTime)((c_, f_) => c_.copy(registeredTime = Some(f_)))
        def optionalRegisteredTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.TimeInfo]] = field(_.registeredTime)((c_, f_) => c_.copy(registeredTime = f_))
        def reregisteredTime: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TimeInfo] = field(_.getReregisteredTime)((c_, f_) => c_.copy(reregisteredTime = Some(f_)))
        def optionalReregisteredTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.TimeInfo]] = field(_.reregisteredTime)((c_, f_) => c_.copy(reregisteredTime = f_))
        def unregisteredTime: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TimeInfo] = field(_.getUnregisteredTime)((c_, f_) => c_.copy(unregisteredTime = Some(f_)))
        def optionalUnregisteredTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.TimeInfo]] = field(_.unregisteredTime)((c_, f_) => c_.copy(unregisteredTime = f_))
        def offers: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Offer]] = field(_.offers)((c_, f_) => c_.copy(offers = f_))
        def inverseOffers: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.InverseOffer]] = field(_.inverseOffers)((c_, f_) => c_.copy(inverseOffers = f_))
        def allocatedResources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.allocatedResources)((c_, f_) => c_.copy(allocatedResources = f_))
        def offeredResources: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Resource]] = field(_.offeredResources)((c_, f_) => c_.copy(offeredResources = f_))
      }
      final val FRAMEWORK_INFO_FIELD_NUMBER = 1
      final val ACTIVE_FIELD_NUMBER = 2
      final val CONNECTED_FIELD_NUMBER = 3
      final val RECOVERED_FIELD_NUMBER = 11
      final val REGISTERED_TIME_FIELD_NUMBER = 4
      final val REREGISTERED_TIME_FIELD_NUMBER = 5
      final val UNREGISTERED_TIME_FIELD_NUMBER = 6
      final val OFFERS_FIELD_NUMBER = 7
      final val INVERSE_OFFERS_FIELD_NUMBER = 8
      final val ALLOCATED_RESOURCES_FIELD_NUMBER = 9
      final val OFFERED_RESOURCES_FIELD_NUMBER = 10
    }
    
    implicit class GetFrameworksLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetFrameworks]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetFrameworks](_l) {
      def frameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Response.GetFrameworks.Framework]] = field(_.frameworks)((c_, f_) => c_.copy(frameworks = f_))
      def completedFrameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Response.GetFrameworks.Framework]] = field(_.completedFrameworks)((c_, f_) => c_.copy(completedFrameworks = f_))
      def recoveredFrameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.FrameworkInfo]] = field(_.recoveredFrameworks)((c_, f_) => c_.copy(recoveredFrameworks = f_))
    }
    final val FRAMEWORKS_FIELD_NUMBER = 1
    final val COMPLETED_FRAMEWORKS_FIELD_NUMBER = 2
    final val RECOVERED_FRAMEWORKS_FIELD_NUMBER = 3
  }
  
  /** Lists information about all the executors known to the master at the
    * current time. Note that there might be executors unknown to the master
    * running on partitioned or unsubscribed agents.
    *
    * @param orphanExecutors
    *   As of Mesos 1.2, this field will always be empty.
    *  
    *   TODO(neilc): Remove this field after a deprecation cycle starting
    *   in Mesos 1.2.
    */
  @SerialVersionUID(0L)
  final case class GetExecutors(
                                 executors: _root_.scala.collection.Seq[Response.GetExecutors.Executor] = _root_.scala.collection.Seq.empty,
                                 orphanExecutors: _root_.scala.collection.Seq[Response.GetExecutors.Executor] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetExecutors] with com.trueaccord.lenses.Updatable[GetExecutors] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        executors.foreach(executors => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(executors.serializedSize) + executors.serializedSize)
        orphanExecutors.foreach(orphanExecutors => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(orphanExecutors.serializedSize) + orphanExecutors.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        executors.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        orphanExecutors.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetExecutors = {
        val __executors = (_root_.scala.collection.immutable.Vector.newBuilder[Response.GetExecutors.Executor] ++= this.executors)
        val __orphanExecutors = (_root_.scala.collection.immutable.Vector.newBuilder[Response.GetExecutors.Executor] ++= this.orphanExecutors)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __executors += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, master.Response.GetExecutors.Executor.defaultInstance)
            case 18 =>
              __orphanExecutors += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, master.Response.GetExecutors.Executor.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        master.Response.GetExecutors(
            executors = __executors.result(),
            orphanExecutors = __orphanExecutors.result()
        )
      }
      def clearExecutors = copy(executors = _root_.scala.collection.Seq.empty)
      def addExecutors(__vs: Response.GetExecutors.Executor*): GetExecutors = addAllExecutors(__vs)
      def addAllExecutors(__vs: TraversableOnce[Response.GetExecutors.Executor]): GetExecutors = copy(executors = executors ++ __vs)
      def withExecutors(__v: _root_.scala.collection.Seq[Response.GetExecutors.Executor]): GetExecutors = copy(executors = __v)
      def clearOrphanExecutors = copy(orphanExecutors = _root_.scala.collection.Seq.empty)
      def addOrphanExecutors(__vs: Response.GetExecutors.Executor*): GetExecutors = addAllOrphanExecutors(__vs)
      def addAllOrphanExecutors(__vs: TraversableOnce[Response.GetExecutors.Executor]): GetExecutors = copy(orphanExecutors = orphanExecutors ++ __vs)
      def withOrphanExecutors(__v: _root_.scala.collection.Seq[Response.GetExecutors.Executor]): GetExecutors = copy(orphanExecutors = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => executors
          case 2 => orphanExecutors
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(executors.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 2 => _root_.scalapb.descriptors.PRepeated(orphanExecutors.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetExecutors
  }
  
  object GetExecutors extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetExecutors] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetExecutors] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetExecutors = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetExecutors(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[Response.GetExecutors.Executor]],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[Response.GetExecutors.Executor]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetExecutors] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetExecutors(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[Response.GetExecutors.Executor]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[Response.GetExecutors.Executor]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(10)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(10)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = master.Response.GetExecutors.Executor
        case 2 => __out = master.Response.GetExecutors.Executor
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetExecutors(
    )
    @SerialVersionUID(0L)
    final case class Executor(
        executorInfo: org.apache.mesos.v1.mesos.ExecutorInfo,
        agentId: org.apache.mesos.v1.mesos.AgentID
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Executor] with com.trueaccord.lenses.Updatable[Executor] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(executorInfo.serializedSize) + executorInfo.serializedSize
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agentId.serializedSize) + agentId.serializedSize
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(executorInfo.serializedSize)
          executorInfo.writeTo(_output__)
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(agentId.serializedSize)
          agentId.writeTo(_output__)
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetExecutors.Executor = {
          var __executorInfo = this.executorInfo
          var __agentId = this.agentId
          var __requiredFields0: Long = 0x3L
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __executorInfo = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __executorInfo)
                __requiredFields0 &= 0xfffffffffffffffeL
              case 18 =>
                __agentId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __agentId)
                __requiredFields0 &= 0xfffffffffffffffdL
              case tag => _input__.skipField(tag)
            }
          }
          if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
          master.Response.GetExecutors.Executor(
              executorInfo = __executorInfo,
              agentId = __agentId
          )
        }
        def withExecutorInfo(__v: org.apache.mesos.v1.mesos.ExecutorInfo): Executor = copy(executorInfo = __v)
        def withAgentId(__v: org.apache.mesos.v1.mesos.AgentID): Executor = copy(agentId = __v)
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => executorInfo
            case 2 => agentId
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => executorInfo.toPMessage
            case 2 => agentId.toPMessage
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = master.Response.GetExecutors.Executor
    }
    
    object Executor extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetExecutors.Executor] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetExecutors.Executor] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetExecutors.Executor = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        master.Response.GetExecutors.Executor(
          __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.ExecutorInfo],
          __fieldsMap(__fields.get(1)).asInstanceOf[org.apache.mesos.v1.mesos.AgentID]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetExecutors.Executor] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          master.Response.GetExecutors.Executor(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.ExecutorInfo],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[org.apache.mesos.v1.mesos.AgentID]
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.GetExecutors.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.GetExecutors.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => __out = org.apache.mesos.v1.mesos.ExecutorInfo
          case 2 => __out = org.apache.mesos.v1.mesos.AgentID
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = master.Response.GetExecutors.Executor(
        executorInfo = org.apache.mesos.v1.mesos.ExecutorInfo.defaultInstance,
        agentId = org.apache.mesos.v1.mesos.AgentID.defaultInstance
      )
      implicit class ExecutorLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetExecutors.Executor]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetExecutors.Executor](_l) {
        def executorInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.ExecutorInfo] = field(_.executorInfo)((c_, f_) => c_.copy(executorInfo = f_))
        def agentId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.AgentID] = field(_.agentId)((c_, f_) => c_.copy(agentId = f_))
      }
      final val EXECUTOR_INFO_FIELD_NUMBER = 1
      final val AGENT_ID_FIELD_NUMBER = 2
    }
    
    implicit class GetExecutorsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetExecutors]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetExecutors](_l) {
      def executors: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Response.GetExecutors.Executor]] = field(_.executors)((c_, f_) => c_.copy(executors = f_))
      def orphanExecutors: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Response.GetExecutors.Executor]] = field(_.orphanExecutors)((c_, f_) => c_.copy(orphanExecutors = f_))
    }
    final val EXECUTORS_FIELD_NUMBER = 1
    final val ORPHAN_EXECUTORS_FIELD_NUMBER = 2
  }
  
  /** Lists information about all the tasks known to the master at the current
    * time. Note that there might be tasks unknown to the master running on
    * partitioned or unsubscribed agents.
    *
    * @param pendingTasks
    *   Tasks that are enqueued on the master waiting (e.g., authorizing)
    *   to be launched.
    * @param tasks
    *   Tasks that have been forwarded to the agent for launch. This
    *   includes tasks that are staging or running; it also includes
    *   tasks that have reached a terminal state but the terminal status
    *   update has not yet been acknowledged by the scheduler.
    * @param unreachableTasks
    *   Tasks that were running on agents that have become partitioned
    *   from the master. If/when the agent is no longer partitioned,
    *   tasks running on that agent will no longer be unreachable (they
    *   will either be running or completed). Note that the master only
    *   stores a limited number of unreachable tasks; information about
    *   unreachable tasks is also not preserved across master failover.
    * @param completedTasks
    *   Tasks that have reached terminal state and have all their updates
    *   acknowledged by the scheduler.
    * @param orphanTasks
    *   As of Mesos 1.2, this field will always be empty.
    *  
    *   TODO(neilc): Remove this field after a deprecation cycle starting
    *   in Mesos 1.2.
    */
  @SerialVersionUID(0L)
  final case class GetTasks(
      pendingTasks: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task] = _root_.scala.collection.Seq.empty,
      tasks: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task] = _root_.scala.collection.Seq.empty,
      unreachableTasks: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task] = _root_.scala.collection.Seq.empty,
      completedTasks: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task] = _root_.scala.collection.Seq.empty,
      orphanTasks: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetTasks] with com.trueaccord.lenses.Updatable[GetTasks] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        pendingTasks.foreach(pendingTasks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(pendingTasks.serializedSize) + pendingTasks.serializedSize)
        tasks.foreach(tasks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(tasks.serializedSize) + tasks.serializedSize)
        unreachableTasks.foreach(unreachableTasks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(unreachableTasks.serializedSize) + unreachableTasks.serializedSize)
        completedTasks.foreach(completedTasks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(completedTasks.serializedSize) + completedTasks.serializedSize)
        orphanTasks.foreach(orphanTasks => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(orphanTasks.serializedSize) + orphanTasks.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        pendingTasks.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        tasks.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        completedTasks.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        orphanTasks.foreach { __v =>
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        unreachableTasks.foreach { __v =>
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetTasks = {
        val __pendingTasks = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Task] ++= this.pendingTasks)
        val __tasks = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Task] ++= this.tasks)
        val __unreachableTasks = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Task] ++= this.unreachableTasks)
        val __completedTasks = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Task] ++= this.completedTasks)
        val __orphanTasks = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Task] ++= this.orphanTasks)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __pendingTasks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Task.defaultInstance)
            case 18 =>
              __tasks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Task.defaultInstance)
            case 42 =>
              __unreachableTasks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Task.defaultInstance)
            case 26 =>
              __completedTasks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Task.defaultInstance)
            case 34 =>
              __orphanTasks += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Task.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        master.Response.GetTasks(
            pendingTasks = __pendingTasks.result(),
            tasks = __tasks.result(),
            unreachableTasks = __unreachableTasks.result(),
            completedTasks = __completedTasks.result(),
            orphanTasks = __orphanTasks.result()
        )
      }
      def clearPendingTasks = copy(pendingTasks = _root_.scala.collection.Seq.empty)
      def addPendingTasks(__vs: org.apache.mesos.v1.mesos.Task*): GetTasks = addAllPendingTasks(__vs)
      def addAllPendingTasks(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(pendingTasks = pendingTasks ++ __vs)
      def withPendingTasks(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(pendingTasks = __v)
      def clearTasks = copy(tasks = _root_.scala.collection.Seq.empty)
      def addTasks(__vs: org.apache.mesos.v1.mesos.Task*): GetTasks = addAllTasks(__vs)
      def addAllTasks(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(tasks = tasks ++ __vs)
      def withTasks(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(tasks = __v)
      def clearUnreachableTasks = copy(unreachableTasks = _root_.scala.collection.Seq.empty)
      def addUnreachableTasks(__vs: org.apache.mesos.v1.mesos.Task*): GetTasks = addAllUnreachableTasks(__vs)
      def addAllUnreachableTasks(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(unreachableTasks = unreachableTasks ++ __vs)
      def withUnreachableTasks(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(unreachableTasks = __v)
      def clearCompletedTasks = copy(completedTasks = _root_.scala.collection.Seq.empty)
      def addCompletedTasks(__vs: org.apache.mesos.v1.mesos.Task*): GetTasks = addAllCompletedTasks(__vs)
      def addAllCompletedTasks(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(completedTasks = completedTasks ++ __vs)
      def withCompletedTasks(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(completedTasks = __v)
      def clearOrphanTasks = copy(orphanTasks = _root_.scala.collection.Seq.empty)
      def addOrphanTasks(__vs: org.apache.mesos.v1.mesos.Task*): GetTasks = addAllOrphanTasks(__vs)
      def addAllOrphanTasks(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(orphanTasks = orphanTasks ++ __vs)
      def withOrphanTasks(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]): GetTasks = copy(orphanTasks = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => pendingTasks
          case 2 => tasks
          case 5 => unreachableTasks
          case 3 => completedTasks
          case 4 => orphanTasks
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(pendingTasks.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 2 => _root_.scalapb.descriptors.PRepeated(tasks.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 5 => _root_.scalapb.descriptors.PRepeated(unreachableTasks.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 3 => _root_.scalapb.descriptors.PRepeated(completedTasks.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 4 => _root_.scalapb.descriptors.PRepeated(orphanTasks.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetTasks
  }
  
  object GetTasks extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetTasks] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetTasks] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetTasks = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetTasks(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]],
        __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]],
        __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]],
        __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetTasks] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetTasks(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(11)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(11)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.Task
        case 2 => __out = org.apache.mesos.v1.mesos.Task
        case 5 => __out = org.apache.mesos.v1.mesos.Task
        case 3 => __out = org.apache.mesos.v1.mesos.Task
        case 4 => __out = org.apache.mesos.v1.mesos.Task
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetTasks(
    )
    implicit class GetTasksLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetTasks]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetTasks](_l) {
      def pendingTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]] = field(_.pendingTasks)((c_, f_) => c_.copy(pendingTasks = f_))
      def tasks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]] = field(_.tasks)((c_, f_) => c_.copy(tasks = f_))
      def unreachableTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]] = field(_.unreachableTasks)((c_, f_) => c_.copy(unreachableTasks = f_))
      def completedTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]] = field(_.completedTasks)((c_, f_) => c_.copy(completedTasks = f_))
      def orphanTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Task]] = field(_.orphanTasks)((c_, f_) => c_.copy(orphanTasks = f_))
    }
    final val PENDING_TASKS_FIELD_NUMBER = 1
    final val TASKS_FIELD_NUMBER = 2
    final val UNREACHABLE_TASKS_FIELD_NUMBER = 5
    final val COMPLETED_TASKS_FIELD_NUMBER = 3
    final val ORPHAN_TASKS_FIELD_NUMBER = 4
  }
  
  /** Provides information about every role that is on the role whitelist (if
    * enabled), has one or more registered frameworks or has a non-default weight
    * or quota.
    */
  @SerialVersionUID(0L)
  final case class GetRoles(
      roles: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Role] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetRoles] with com.trueaccord.lenses.Updatable[GetRoles] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        roles.foreach(roles => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(roles.serializedSize) + roles.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        roles.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetRoles = {
        val __roles = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.Role] ++= this.roles)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __roles += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.Role.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        master.Response.GetRoles(
            roles = __roles.result()
        )
      }
      def clearRoles = copy(roles = _root_.scala.collection.Seq.empty)
      def addRoles(__vs: org.apache.mesos.v1.mesos.Role*): GetRoles = addAllRoles(__vs)
      def addAllRoles(__vs: TraversableOnce[org.apache.mesos.v1.mesos.Role]): GetRoles = copy(roles = roles ++ __vs)
      def withRoles(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Role]): GetRoles = copy(roles = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => roles
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(roles.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetRoles
  }
  
  object GetRoles extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetRoles] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetRoles] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetRoles = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetRoles(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Role]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetRoles] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetRoles(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Role]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(12)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(12)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.Role
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetRoles(
    )
    implicit class GetRolesLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetRoles]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetRoles](_l) {
      def roles: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.Role]] = field(_.roles)((c_, f_) => c_.copy(roles = f_))
    }
    final val ROLES_FIELD_NUMBER = 1
  }
  
  /** Provides the weight information about every role.
    */
  @SerialVersionUID(0L)
  final case class GetWeights(
      weightInfos: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.WeightInfo] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetWeights] with com.trueaccord.lenses.Updatable[GetWeights] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        weightInfos.foreach(weightInfos => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(weightInfos.serializedSize) + weightInfos.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        weightInfos.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetWeights = {
        val __weightInfos = (_root_.scala.collection.immutable.Vector.newBuilder[org.apache.mesos.v1.mesos.WeightInfo] ++= this.weightInfos)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __weightInfos += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.apache.mesos.v1.mesos.WeightInfo.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        master.Response.GetWeights(
            weightInfos = __weightInfos.result()
        )
      }
      def clearWeightInfos = copy(weightInfos = _root_.scala.collection.Seq.empty)
      def addWeightInfos(__vs: org.apache.mesos.v1.mesos.WeightInfo*): GetWeights = addAllWeightInfos(__vs)
      def addAllWeightInfos(__vs: TraversableOnce[org.apache.mesos.v1.mesos.WeightInfo]): GetWeights = copy(weightInfos = weightInfos ++ __vs)
      def withWeightInfos(__v: _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.WeightInfo]): GetWeights = copy(weightInfos = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => weightInfos
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(weightInfos.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetWeights
  }
  
  object GetWeights extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetWeights] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetWeights] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetWeights = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetWeights(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.WeightInfo]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetWeights] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetWeights(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.apache.mesos.v1.mesos.WeightInfo]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(13)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(13)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.WeightInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetWeights(
    )
    implicit class GetWeightsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetWeights]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetWeights](_l) {
      def weightInfos: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.apache.mesos.v1.mesos.WeightInfo]] = field(_.weightInfos)((c_, f_) => c_.copy(weightInfos = f_))
    }
    final val WEIGHT_INFOS_FIELD_NUMBER = 1
  }
  
  /** Contains the master's information.
    */
  @SerialVersionUID(0L)
  final case class GetMaster(
      masterInfo: scala.Option[org.apache.mesos.v1.mesos.MasterInfo] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetMaster] with com.trueaccord.lenses.Updatable[GetMaster] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (masterInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(masterInfo.get.serializedSize) + masterInfo.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        masterInfo.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetMaster = {
        var __masterInfo = this.masterInfo
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __masterInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __masterInfo.getOrElse(org.apache.mesos.v1.mesos.MasterInfo.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        master.Response.GetMaster(
            masterInfo = __masterInfo
        )
      }
      def getMasterInfo: org.apache.mesos.v1.mesos.MasterInfo = masterInfo.getOrElse(org.apache.mesos.v1.mesos.MasterInfo.defaultInstance)
      def clearMasterInfo: GetMaster = copy(masterInfo = None)
      def withMasterInfo(__v: org.apache.mesos.v1.mesos.MasterInfo): GetMaster = copy(masterInfo = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => masterInfo.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => masterInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetMaster
  }
  
  object GetMaster extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetMaster] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetMaster] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetMaster = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetMaster(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.apache.mesos.v1.mesos.MasterInfo]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetMaster] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetMaster(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.apache.mesos.v1.mesos.MasterInfo]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(14)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(14)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.MasterInfo
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetMaster(
    )
    implicit class GetMasterLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetMaster]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetMaster](_l) {
      def masterInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.MasterInfo] = field(_.getMasterInfo)((c_, f_) => c_.copy(masterInfo = Some(f_)))
      def optionalMasterInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[org.apache.mesos.v1.mesos.MasterInfo]] = field(_.masterInfo)((c_, f_) => c_.copy(masterInfo = f_))
    }
    final val MASTER_INFO_FIELD_NUMBER = 1
  }
  
  /** Contains the cluster's maintenance status.
    */
  @SerialVersionUID(0L)
  final case class GetMaintenanceStatus(
      status: ClusterStatus
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetMaintenanceStatus] with com.trueaccord.lenses.Updatable[GetMaintenanceStatus] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(status.serializedSize) + status.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(status.serializedSize)
        status.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetMaintenanceStatus = {
        var __status = this.status
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __status = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __status)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        master.Response.GetMaintenanceStatus(
            status = __status
        )
      }
      def withStatus(__v: ClusterStatus): GetMaintenanceStatus = copy(status = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => status
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => status.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetMaintenanceStatus
  }
  
  object GetMaintenanceStatus extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetMaintenanceStatus] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetMaintenanceStatus] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetMaintenanceStatus = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetMaintenanceStatus(
        __fieldsMap(__fields.get(0)).asInstanceOf[ClusterStatus]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetMaintenanceStatus] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetMaintenanceStatus(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[ClusterStatus]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(15)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(15)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = maintenance.ClusterStatus
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetMaintenanceStatus(
      status = maintenance.ClusterStatus.defaultInstance
    )
    implicit class GetMaintenanceStatusLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetMaintenanceStatus]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetMaintenanceStatus](_l) {
      def status: _root_.com.trueaccord.lenses.Lens[UpperPB, ClusterStatus] = field(_.status)((c_, f_) => c_.copy(status = f_))
    }
    final val STATUS_FIELD_NUMBER = 1
  }
  
  /** Contains the cluster's maintenance schedule.
    */
  @SerialVersionUID(0L)
  final case class GetMaintenanceSchedule(
      schedule: Schedule
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetMaintenanceSchedule] with com.trueaccord.lenses.Updatable[GetMaintenanceSchedule] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(schedule.serializedSize) + schedule.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(schedule.serializedSize)
        schedule.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetMaintenanceSchedule = {
        var __schedule = this.schedule
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __schedule = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __schedule)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        master.Response.GetMaintenanceSchedule(
            schedule = __schedule
        )
      }
      def withSchedule(__v: Schedule): GetMaintenanceSchedule = copy(schedule = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => schedule
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => schedule.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetMaintenanceSchedule
  }
  
  object GetMaintenanceSchedule extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetMaintenanceSchedule] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetMaintenanceSchedule] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetMaintenanceSchedule = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetMaintenanceSchedule(
        __fieldsMap(__fields.get(0)).asInstanceOf[Schedule]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetMaintenanceSchedule] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetMaintenanceSchedule(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Schedule]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(16)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(16)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = maintenance.Schedule
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetMaintenanceSchedule(
      schedule = maintenance.Schedule.defaultInstance
    )
    implicit class GetMaintenanceScheduleLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetMaintenanceSchedule]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetMaintenanceSchedule](_l) {
      def schedule: _root_.com.trueaccord.lenses.Lens[UpperPB, Schedule] = field(_.schedule)((c_, f_) => c_.copy(schedule = f_))
    }
    final val SCHEDULE_FIELD_NUMBER = 1
  }
  
  /** Contains the cluster's configured quotas.
    */
  @SerialVersionUID(0L)
  final case class GetQuota(
      status: QuotaStatus
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GetQuota] with com.trueaccord.lenses.Updatable[GetQuota] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(status.serializedSize) + status.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(status.serializedSize)
        status.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Response.GetQuota = {
        var __status = this.status
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __status = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __status)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        master.Response.GetQuota(
            status = __status
        )
      }
      def withStatus(__v: QuotaStatus): GetQuota = copy(status = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => status
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => status.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Response.GetQuota
  }
  
  object GetQuota extends com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetQuota] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Response.GetQuota] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Response.GetQuota = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Response.GetQuota(
        __fieldsMap(__fields.get(0)).asInstanceOf[QuotaStatus]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Response.GetQuota] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Response.GetQuota(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[QuotaStatus]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Response.javaDescriptor.getNestedTypes.get(17)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Response.scalaDescriptor.nestedMessages(17)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = quota.QuotaStatus
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Response.GetQuota(
      status = quota.QuotaStatus.defaultInstance
    )
    implicit class GetQuotaLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetQuota]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response.GetQuota](_l) {
      def status: _root_.com.trueaccord.lenses.Lens[UpperPB, QuotaStatus] = field(_.status)((c_, f_) => c_.copy(status = f_))
    }
    final val STATUS_FIELD_NUMBER = 1
  }
  
  implicit class ResponseLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Response]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Response](_l) {
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
    def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def getHealth: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetHealth] = field(_.getGetHealth)((c_, f_) => c_.copy(getHealth = Some(f_)))
    def optionalGetHealth: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetHealth]] = field(_.getHealth)((c_, f_) => c_.copy(getHealth = f_))
    def getFlags: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetFlags] = field(_.getGetFlags)((c_, f_) => c_.copy(getFlags = Some(f_)))
    def optionalGetFlags: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetFlags]] = field(_.getFlags)((c_, f_) => c_.copy(getFlags = f_))
    def getVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetVersion] = field(_.getGetVersion)((c_, f_) => c_.copy(getVersion = Some(f_)))
    def optionalGetVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetVersion]] = field(_.getVersion)((c_, f_) => c_.copy(getVersion = f_))
    def getMetrics: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetMetrics] = field(_.getGetMetrics)((c_, f_) => c_.copy(getMetrics = Some(f_)))
    def optionalGetMetrics: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetMetrics]] = field(_.getMetrics)((c_, f_) => c_.copy(getMetrics = f_))
    def getLoggingLevel: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetLoggingLevel] = field(_.getGetLoggingLevel)((c_, f_) => c_.copy(getLoggingLevel = Some(f_)))
    def optionalGetLoggingLevel: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetLoggingLevel]] = field(_.getLoggingLevel)((c_, f_) => c_.copy(getLoggingLevel = f_))
    def listFiles: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.ListFiles] = field(_.getListFiles)((c_, f_) => c_.copy(listFiles = Some(f_)))
    def optionalListFiles: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.ListFiles]] = field(_.listFiles)((c_, f_) => c_.copy(listFiles = f_))
    def readFile: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.ReadFile] = field(_.getReadFile)((c_, f_) => c_.copy(readFile = Some(f_)))
    def optionalReadFile: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.ReadFile]] = field(_.readFile)((c_, f_) => c_.copy(readFile = f_))
    def getState: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetState] = field(_.getGetState)((c_, f_) => c_.copy(getState = Some(f_)))
    def optionalGetState: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetState]] = field(_.getState)((c_, f_) => c_.copy(getState = f_))
    def getAgents: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetAgents] = field(_.getGetAgents)((c_, f_) => c_.copy(getAgents = Some(f_)))
    def optionalGetAgents: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetAgents]] = field(_.getAgents)((c_, f_) => c_.copy(getAgents = f_))
    def getFrameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetFrameworks] = field(_.getGetFrameworks)((c_, f_) => c_.copy(getFrameworks = Some(f_)))
    def optionalGetFrameworks: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetFrameworks]] = field(_.getFrameworks)((c_, f_) => c_.copy(getFrameworks = f_))
    def getExecutors: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetExecutors] = field(_.getGetExecutors)((c_, f_) => c_.copy(getExecutors = Some(f_)))
    def optionalGetExecutors: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetExecutors]] = field(_.getExecutors)((c_, f_) => c_.copy(getExecutors = f_))
    def getTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetTasks] = field(_.getGetTasks)((c_, f_) => c_.copy(getTasks = Some(f_)))
    def optionalGetTasks: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetTasks]] = field(_.getTasks)((c_, f_) => c_.copy(getTasks = f_))
    def getRoles: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetRoles] = field(_.getGetRoles)((c_, f_) => c_.copy(getRoles = Some(f_)))
    def optionalGetRoles: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetRoles]] = field(_.getRoles)((c_, f_) => c_.copy(getRoles = f_))
    def getWeights: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetWeights] = field(_.getGetWeights)((c_, f_) => c_.copy(getWeights = Some(f_)))
    def optionalGetWeights: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetWeights]] = field(_.getWeights)((c_, f_) => c_.copy(getWeights = f_))
    def getMaster: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetMaster] = field(_.getGetMaster)((c_, f_) => c_.copy(getMaster = Some(f_)))
    def optionalGetMaster: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetMaster]] = field(_.getMaster)((c_, f_) => c_.copy(getMaster = f_))
    def getMaintenanceStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetMaintenanceStatus] = field(_.getGetMaintenanceStatus)((c_, f_) => c_.copy(getMaintenanceStatus = Some(f_)))
    def optionalGetMaintenanceStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetMaintenanceStatus]] = field(_.getMaintenanceStatus)((c_, f_) => c_.copy(getMaintenanceStatus = f_))
    def getMaintenanceSchedule: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetMaintenanceSchedule] = field(_.getGetMaintenanceSchedule)((c_, f_) => c_.copy(getMaintenanceSchedule = Some(f_)))
    def optionalGetMaintenanceSchedule: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetMaintenanceSchedule]] = field(_.getMaintenanceSchedule)((c_, f_) => c_.copy(getMaintenanceSchedule = f_))
    def getQuota: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetQuota] = field(_.getGetQuota)((c_, f_) => c_.copy(getQuota = Some(f_)))
    def optionalGetQuota: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetQuota]] = field(_.getQuota)((c_, f_) => c_.copy(getQuota = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val GET_HEALTH_FIELD_NUMBER = 2
  final val GET_FLAGS_FIELD_NUMBER = 3
  final val GET_VERSION_FIELD_NUMBER = 4
  final val GET_METRICS_FIELD_NUMBER = 5
  final val GET_LOGGING_LEVEL_FIELD_NUMBER = 6
  final val LIST_FILES_FIELD_NUMBER = 7
  final val READ_FILE_FIELD_NUMBER = 8
  final val GET_STATE_FIELD_NUMBER = 9
  final val GET_AGENTS_FIELD_NUMBER = 10
  final val GET_FRAMEWORKS_FIELD_NUMBER = 11
  final val GET_EXECUTORS_FIELD_NUMBER = 12
  final val GET_TASKS_FIELD_NUMBER = 13
  final val GET_ROLES_FIELD_NUMBER = 14
  final val GET_WEIGHTS_FIELD_NUMBER = 15
  final val GET_MASTER_FIELD_NUMBER = 16
  final val GET_MAINTENANCE_STATUS_FIELD_NUMBER = 17
  final val GET_MAINTENANCE_SCHEDULE_FIELD_NUMBER = 18
  final val GET_QUOTA_FIELD_NUMBER = 19
}
