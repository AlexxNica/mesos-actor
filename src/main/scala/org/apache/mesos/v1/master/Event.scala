// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package org.apache.mesos.v1.master

import org.apache.mesos.v1.master

/** *
  * Streaming response to `Call::SUBSCRIBE` made to the master.
  */
@SerialVersionUID(0L)
final case class Event(
                        `type`: scala.Option[Event.Type] = None,
                        subscribed: scala.Option[Event.Subscribed] = None,
                        taskAdded: scala.Option[Event.TaskAdded] = None,
                        taskUpdated: scala.Option[Event.TaskUpdated] = None,
                        agentAdded: scala.Option[Event.AgentAdded] = None,
                        agentRemoved: scala.Option[Event.AgentRemoved] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Event] with com.trueaccord.lenses.Updatable[Event] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.get.value) }
      if (subscribed.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(subscribed.get.serializedSize) + subscribed.get.serializedSize }
      if (taskAdded.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(taskAdded.get.serializedSize) + taskAdded.get.serializedSize }
      if (taskUpdated.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(taskUpdated.get.serializedSize) + taskUpdated.get.serializedSize }
      if (agentAdded.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agentAdded.get.serializedSize) + agentAdded.get.serializedSize }
      if (agentRemoved.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agentRemoved.get.serializedSize) + agentRemoved.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      `type`.foreach { __v =>
        _output__.writeEnum(1, __v.value)
      };
      subscribed.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      taskAdded.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      taskUpdated.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      agentAdded.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      agentRemoved.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Event = {
      var __type = this.`type`
      var __subscribed = this.subscribed
      var __taskAdded = this.taskAdded
      var __taskUpdated = this.taskUpdated
      var __agentAdded = this.agentAdded
      var __agentRemoved = this.agentRemoved
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = Some(master.Event.Type.fromValue(_input__.readEnum()))
          case 18 =>
            __subscribed = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __subscribed.getOrElse(master.Event.Subscribed.defaultInstance)))
          case 26 =>
            __taskAdded = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __taskAdded.getOrElse(master.Event.TaskAdded.defaultInstance)))
          case 34 =>
            __taskUpdated = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __taskUpdated.getOrElse(master.Event.TaskUpdated.defaultInstance)))
          case 42 =>
            __agentAdded = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __agentAdded.getOrElse(master.Event.AgentAdded.defaultInstance)))
          case 50 =>
            __agentRemoved = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __agentRemoved.getOrElse(master.Event.AgentRemoved.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      master.Event(
          `type` = __type,
          subscribed = __subscribed,
          taskAdded = __taskAdded,
          taskUpdated = __taskUpdated,
          agentAdded = __agentAdded,
          agentRemoved = __agentRemoved
      )
    }
    def getType: Event.Type = `type`.getOrElse(master.Event.Type.UNKNOWN)
    def clearType: Event = copy(`type` = None)
    def withType(__v: Event.Type): Event = copy(`type` = Some(__v))
    def getSubscribed: Event.Subscribed = subscribed.getOrElse(master.Event.Subscribed.defaultInstance)
    def clearSubscribed: Event = copy(subscribed = None)
    def withSubscribed(__v: Event.Subscribed): Event = copy(subscribed = Some(__v))
    def getTaskAdded: Event.TaskAdded = taskAdded.getOrElse(master.Event.TaskAdded.defaultInstance)
    def clearTaskAdded: Event = copy(taskAdded = None)
    def withTaskAdded(__v: Event.TaskAdded): Event = copy(taskAdded = Some(__v))
    def getTaskUpdated: Event.TaskUpdated = taskUpdated.getOrElse(master.Event.TaskUpdated.defaultInstance)
    def clearTaskUpdated: Event = copy(taskUpdated = None)
    def withTaskUpdated(__v: Event.TaskUpdated): Event = copy(taskUpdated = Some(__v))
    def getAgentAdded: Event.AgentAdded = agentAdded.getOrElse(master.Event.AgentAdded.defaultInstance)
    def clearAgentAdded: Event = copy(agentAdded = None)
    def withAgentAdded(__v: Event.AgentAdded): Event = copy(agentAdded = Some(__v))
    def getAgentRemoved: Event.AgentRemoved = agentRemoved.getOrElse(master.Event.AgentRemoved.defaultInstance)
    def clearAgentRemoved: Event = copy(agentRemoved = None)
    def withAgentRemoved(__v: Event.AgentRemoved): Event = copy(agentRemoved = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.map(_.javaValueDescriptor).orNull
        case 2 => subscribed.orNull
        case 3 => taskAdded.orNull
        case 4 => taskUpdated.orNull
        case 5 => agentAdded.orNull
        case 6 => agentRemoved.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => subscribed.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => taskAdded.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => taskUpdated.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => agentAdded.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => agentRemoved.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = master.Event
}

object Event extends com.trueaccord.scalapb.GeneratedMessageCompanion[Event] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Event] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Event = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    master.Event(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => master.Event.Type.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Event.Subscribed]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Event.TaskAdded]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Event.TaskUpdated]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Event.AgentAdded]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Event.AgentRemoved]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[Event] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      master.Event(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => master.Event.Type.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Event.Subscribed]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Event.TaskAdded]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Event.TaskUpdated]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Event.AgentAdded]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Event.AgentRemoved]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MasterProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MasterProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = master.Event.Subscribed
      case 3 => __out = master.Event.TaskAdded
      case 4 => __out = master.Event.TaskUpdated
      case 5 => __out = master.Event.AgentAdded
      case 6 => __out = master.Event.AgentRemoved
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => master.Event.Type
    }
  }
  lazy val defaultInstance = master.Event(
  )
  sealed trait Type extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Type
    def isUnknown: Boolean = false
    def isSubscribed: Boolean = false
    def isTaskAdded: Boolean = false
    def isTaskUpdated: Boolean = false
    def isAgentAdded: Boolean = false
    def isAgentRemoved: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = master.Event.Type
  }
  
  object Type extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object UNKNOWN extends Type {
      val value = 0
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SUBSCRIBED extends Type {
      val value = 1
      val index = 1
      val name = "SUBSCRIBED"
      override def isSubscribed: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object TASK_ADDED extends Type {
      val value = 2
      val index = 2
      val name = "TASK_ADDED"
      override def isTaskAdded: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object TASK_UPDATED extends Type {
      val value = 3
      val index = 3
      val name = "TASK_UPDATED"
      override def isTaskUpdated: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object AGENT_ADDED extends Type {
      val value = 4
      val index = 4
      val name = "AGENT_ADDED"
      override def isAgentAdded: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object AGENT_REMOVED extends Type {
      val value = 5
      val index = 5
      val name = "AGENT_REMOVED"
      override def isAgentRemoved: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Type with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(UNKNOWN, SUBSCRIBED, TASK_ADDED, TASK_UPDATED, AGENT_ADDED, AGENT_REMOVED)
    def fromValue(value: Int): Type = value match {
      case 0 => UNKNOWN
      case 1 => SUBSCRIBED
      case 2 => TASK_ADDED
      case 3 => TASK_UPDATED
      case 4 => AGENT_ADDED
      case 5 => AGENT_REMOVED
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = master.Event.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = master.Event.scalaDescriptor.enums(0)
  }
  /** First event received when a client subscribes.
    *
    * @param getState
    *   Snapshot of the entire cluster state. Further updates to the
    *   cluster state are sent as separate events on the stream.
    */
  @SerialVersionUID(0L)
  final case class Subscribed(
      getState: scala.Option[Response.GetState] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Subscribed] with com.trueaccord.lenses.Updatable[Subscribed] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (getState.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(getState.get.serializedSize) + getState.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        getState.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Event.Subscribed = {
        var __getState = this.getState
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __getState = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __getState.getOrElse(master.Response.GetState.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        master.Event.Subscribed(
            getState = __getState
        )
      }
      def getGetState: Response.GetState = getState.getOrElse(master.Response.GetState.defaultInstance)
      def clearGetState: Subscribed = copy(getState = None)
      def withGetState(__v: Response.GetState): Subscribed = copy(getState = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => getState.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => getState.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Event.Subscribed
  }
  
  object Subscribed extends com.trueaccord.scalapb.GeneratedMessageCompanion[Event.Subscribed] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Event.Subscribed] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Event.Subscribed = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Event.Subscribed(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Response.GetState]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Event.Subscribed] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Event.Subscribed(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Response.GetState]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Event.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Event.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = master.Response.GetState
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Event.Subscribed(
    )
    implicit class SubscribedLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.Subscribed]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Event.Subscribed](_l) {
      def getState: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetState] = field(_.getGetState)((c_, f_) => c_.copy(getState = Some(f_)))
      def optionalGetState: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Response.GetState]] = field(_.getState)((c_, f_) => c_.copy(getState = f_))
    }
    final val GET_STATE_FIELD_NUMBER = 1
  }
  
  /** Forwarded by the master when a task becomes known to it. This can happen
    * when a new task is launched by the scheduler or when the task becomes
    * known to the master upon an agent (re-)registration after a failover.
    */
  @SerialVersionUID(0L)
  final case class TaskAdded(
      task: org.apache.mesos.v1.mesos.Task
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TaskAdded] with com.trueaccord.lenses.Updatable[TaskAdded] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(task.serializedSize) + task.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(task.serializedSize)
        task.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Event.TaskAdded = {
        var __task = this.task
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __task = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __task)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        master.Event.TaskAdded(
            task = __task
        )
      }
      def withTask(__v: org.apache.mesos.v1.mesos.Task): TaskAdded = copy(task = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => task
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => task.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Event.TaskAdded
  }
  
  object TaskAdded extends com.trueaccord.scalapb.GeneratedMessageCompanion[Event.TaskAdded] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Event.TaskAdded] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Event.TaskAdded = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Event.TaskAdded(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.Task]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Event.TaskAdded] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Event.TaskAdded(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.Task]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Event.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Event.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.Task
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Event.TaskAdded(
      task = org.apache.mesos.v1.mesos.Task.defaultInstance
    )
    implicit class TaskAddedLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.TaskAdded]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Event.TaskAdded](_l) {
      def task: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.Task] = field(_.task)((c_, f_) => c_.copy(task = f_))
    }
    final val TASK_FIELD_NUMBER = 1
  }
  
  /** Forwarded by the master when an existing task transitions to a new state.
    *
    * @param status
    *   This is the status of the task corresponding to the last
    *   status update acknowledged by the scheduler.
    * @param state
    *   This is the latest state of the task according to the agent.
    */
  @SerialVersionUID(0L)
  final case class TaskUpdated(
      frameworkId: org.apache.mesos.v1.mesos.FrameworkID,
      status: org.apache.mesos.v1.mesos.TaskStatus,
      state: org.apache.mesos.v1.mesos.TaskState
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TaskUpdated] with com.trueaccord.lenses.Updatable[TaskUpdated] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(frameworkId.serializedSize) + frameworkId.serializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(status.serializedSize) + status.serializedSize
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, state.value)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(frameworkId.serializedSize)
        frameworkId.writeTo(_output__)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(status.serializedSize)
        status.writeTo(_output__)
        _output__.writeEnum(3, state.value)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Event.TaskUpdated = {
        var __frameworkId = this.frameworkId
        var __status = this.status
        var __state = this.state
        var __requiredFields0: Long = 0x7L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __frameworkId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __frameworkId)
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __status = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __status)
              __requiredFields0 &= 0xfffffffffffffffdL
            case 24 =>
              __state = org.apache.mesos.v1.mesos.TaskState.fromValue(_input__.readEnum())
              __requiredFields0 &= 0xfffffffffffffffbL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        master.Event.TaskUpdated(
            frameworkId = __frameworkId,
            status = __status,
            state = __state
        )
      }
      def withFrameworkId(__v: org.apache.mesos.v1.mesos.FrameworkID): TaskUpdated = copy(frameworkId = __v)
      def withStatus(__v: org.apache.mesos.v1.mesos.TaskStatus): TaskUpdated = copy(status = __v)
      def withState(__v: org.apache.mesos.v1.mesos.TaskState): TaskUpdated = copy(state = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => frameworkId
          case 2 => status
          case 3 => state.javaValueDescriptor
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => frameworkId.toPMessage
          case 2 => status.toPMessage
          case 3 => _root_.scalapb.descriptors.PEnum(state.scalaValueDescriptor)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Event.TaskUpdated
  }
  
  object TaskUpdated extends com.trueaccord.scalapb.GeneratedMessageCompanion[Event.TaskUpdated] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Event.TaskUpdated] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Event.TaskUpdated = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Event.TaskUpdated(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.FrameworkID],
        __fieldsMap(__fields.get(1)).asInstanceOf[org.apache.mesos.v1.mesos.TaskStatus],
        org.apache.mesos.v1.mesos.TaskState.fromValue(__fieldsMap(__fields.get(2)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Event.TaskUpdated] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Event.TaskUpdated(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.FrameworkID],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[org.apache.mesos.v1.mesos.TaskStatus],
          org.apache.mesos.v1.mesos.TaskState.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Event.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Event.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.FrameworkID
        case 2 => __out = org.apache.mesos.v1.mesos.TaskStatus
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => org.apache.mesos.v1.mesos.TaskState
      }
    }
    lazy val defaultInstance = master.Event.TaskUpdated(
      frameworkId = org.apache.mesos.v1.mesos.FrameworkID.defaultInstance,
      status = org.apache.mesos.v1.mesos.TaskStatus.defaultInstance,
      state = org.apache.mesos.v1.mesos.TaskState.TASK_STAGING
    )
    implicit class TaskUpdatedLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.TaskUpdated]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Event.TaskUpdated](_l) {
      def frameworkId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.FrameworkID] = field(_.frameworkId)((c_, f_) => c_.copy(frameworkId = f_))
      def status: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TaskStatus] = field(_.status)((c_, f_) => c_.copy(status = f_))
      def state: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.TaskState] = field(_.state)((c_, f_) => c_.copy(state = f_))
    }
    final val FRAMEWORK_ID_FIELD_NUMBER = 1
    final val STATUS_FIELD_NUMBER = 2
    final val STATE_FIELD_NUMBER = 3
  }
  
  /** Forwarded by the master when an agent becomes known to it.
    * This can happen when an agent registered for the first
    * time, or reregistered after a master failover.
    */
  @SerialVersionUID(0L)
  final case class AgentAdded(
      agent: Response.GetAgents.Agent
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[AgentAdded] with com.trueaccord.lenses.Updatable[AgentAdded] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agent.serializedSize) + agent.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(agent.serializedSize)
        agent.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Event.AgentAdded = {
        var __agent = this.agent
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __agent = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __agent)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        master.Event.AgentAdded(
            agent = __agent
        )
      }
      def withAgent(__v: Response.GetAgents.Agent): AgentAdded = copy(agent = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => agent
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => agent.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Event.AgentAdded
  }
  
  object AgentAdded extends com.trueaccord.scalapb.GeneratedMessageCompanion[Event.AgentAdded] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Event.AgentAdded] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Event.AgentAdded = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Event.AgentAdded(
        __fieldsMap(__fields.get(0)).asInstanceOf[Response.GetAgents.Agent]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Event.AgentAdded] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Event.AgentAdded(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Response.GetAgents.Agent]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Event.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Event.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = master.Response.GetAgents.Agent
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Event.AgentAdded(
      agent = master.Response.GetAgents.Agent.defaultInstance
    )
    implicit class AgentAddedLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.AgentAdded]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Event.AgentAdded](_l) {
      def agent: _root_.com.trueaccord.lenses.Lens[UpperPB, Response.GetAgents.Agent] = field(_.agent)((c_, f_) => c_.copy(agent = f_))
    }
    final val AGENT_FIELD_NUMBER = 1
  }
  
  /** Forwarded by the master when an agent is removed. This
    * can happen when the agent is scheduled for maintenance.
    *
    * NOTE: It's possible that an agent might become
    * active once it has been removed, i.e. if the master
    * has gc'ed its list of known "dead" agents.
    * See MESOS-5965 for context.
    */
  @SerialVersionUID(0L)
  final case class AgentRemoved(
      agentId: org.apache.mesos.v1.mesos.AgentID
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[AgentRemoved] with com.trueaccord.lenses.Updatable[AgentRemoved] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agentId.serializedSize) + agentId.serializedSize
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(agentId.serializedSize)
        agentId.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Event.AgentRemoved = {
        var __agentId = this.agentId
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __agentId = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __agentId)
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        master.Event.AgentRemoved(
            agentId = __agentId
        )
      }
      def withAgentId(__v: org.apache.mesos.v1.mesos.AgentID): AgentRemoved = copy(agentId = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => agentId
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => agentId.toPMessage
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = master.Event.AgentRemoved
  }
  
  object AgentRemoved extends com.trueaccord.scalapb.GeneratedMessageCompanion[Event.AgentRemoved] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Event.AgentRemoved] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Event.AgentRemoved = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      master.Event.AgentRemoved(
        __fieldsMap(__fields.get(0)).asInstanceOf[org.apache.mesos.v1.mesos.AgentID]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Event.AgentRemoved] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        master.Event.AgentRemoved(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[org.apache.mesos.v1.mesos.AgentID]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = master.Event.javaDescriptor.getNestedTypes.get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = master.Event.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = org.apache.mesos.v1.mesos.AgentID
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = master.Event.AgentRemoved(
      agentId = org.apache.mesos.v1.mesos.AgentID.defaultInstance
    )
    implicit class AgentRemovedLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.AgentRemoved]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Event.AgentRemoved](_l) {
      def agentId: _root_.com.trueaccord.lenses.Lens[UpperPB, org.apache.mesos.v1.mesos.AgentID] = field(_.agentId)((c_, f_) => c_.copy(agentId = f_))
    }
    final val AGENT_ID_FIELD_NUMBER = 1
  }
  
  implicit class EventLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Event]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Event](_l) {
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
    def optionalType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Event.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def subscribed: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.Subscribed] = field(_.getSubscribed)((c_, f_) => c_.copy(subscribed = Some(f_)))
    def optionalSubscribed: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Event.Subscribed]] = field(_.subscribed)((c_, f_) => c_.copy(subscribed = f_))
    def taskAdded: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.TaskAdded] = field(_.getTaskAdded)((c_, f_) => c_.copy(taskAdded = Some(f_)))
    def optionalTaskAdded: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Event.TaskAdded]] = field(_.taskAdded)((c_, f_) => c_.copy(taskAdded = f_))
    def taskUpdated: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.TaskUpdated] = field(_.getTaskUpdated)((c_, f_) => c_.copy(taskUpdated = Some(f_)))
    def optionalTaskUpdated: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Event.TaskUpdated]] = field(_.taskUpdated)((c_, f_) => c_.copy(taskUpdated = f_))
    def agentAdded: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.AgentAdded] = field(_.getAgentAdded)((c_, f_) => c_.copy(agentAdded = Some(f_)))
    def optionalAgentAdded: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Event.AgentAdded]] = field(_.agentAdded)((c_, f_) => c_.copy(agentAdded = f_))
    def agentRemoved: _root_.com.trueaccord.lenses.Lens[UpperPB, Event.AgentRemoved] = field(_.getAgentRemoved)((c_, f_) => c_.copy(agentRemoved = Some(f_)))
    def optionalAgentRemoved: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Event.AgentRemoved]] = field(_.agentRemoved)((c_, f_) => c_.copy(agentRemoved = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val SUBSCRIBED_FIELD_NUMBER = 2
  final val TASK_ADDED_FIELD_NUMBER = 3
  final val TASK_UPDATED_FIELD_NUMBER = 4
  final val AGENT_ADDED_FIELD_NUMBER = 5
  final val AGENT_REMOVED_FIELD_NUMBER = 6
}
